/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e,n,t={16:(e,n,t)=>{t.d(n,{A:()=>d});var r=t(354),a=t.n(r),o=t(314),l=t.n(o),i=t(417),u=t.n(i),c=new URL(t(44),t.b),s=l()(a()),f=u()(c);s.push([e.id,`/* ===================== Friends Page Layout Update ===================== */\n.friends-page .main-content {\n  max-width: 1100px;\n  margin: 0 auto;\n  padding: 2rem 1rem;\n  display: flex;\n  flex-direction: column;\n}\n\n.friends-header {\n  font-weight: 700;\n  font-size: 2.5rem;\n  margin-bottom: 2rem;\n  letter-spacing: -1px;\n}\n\n.friends-actions {\n  display: flex;\n  gap: 1.5rem;\n  margin-bottom: 2.5rem;\n  align-items: center;\n}\n\n.search-friends-input {\n  flex: 2;\n  padding: 0.75rem 1rem;\n  border-radius: 8px;\n  border: 1px solid #2A2A2A;\n  background: #181818;\n  color: #E5E5E5;\n  font-size: 1rem;\n}\n\n.add-friend-form {\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n  flex: 2;\n}\n\n.add-friend-form input[type="text"] {\n  flex: 1;\n  padding: 0.75rem 1rem;\n  border-radius: 8px;\n  border: 1px solid #2A2A2A;\n  background: #181818;\n  color: #E5E5E5;\n  font-size: 1rem;\n}\n\n.add-friend-form .add-btn {\n  min-width: 120px;\n  font-weight: 600;\n}\n\n.friends-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(340px, 1fr));\n  gap: 2rem;\n}\n\n.friend-card {\n  box-shadow: 0 4px 24px rgba(0,0,0,0.18);\n  border-radius: 16px;\n  background: #1A1A1A;\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n  border: 1px solid #232323;\n}\n\n.friend-card-top {\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n}\n\n.friend-card .friend-icon {\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  background: #232323;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  color: #3B82F6;\n  font-weight: 700;\n}\n\n.friend-card .friend-info {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 0.2rem;\n}\n.friend-card .friend-info .friend-name {\n  font-weight: 600;\n  font-size: 1.25rem;\n  color: #E5E5E5;\n}\n.friend-card .friend-info .friend-email {\n  color: #A0A0A0;\n  font-size: 0.95rem;\n}\n\n.friend-card .remove-btn {\n  background: #d20d0d9e;\n  color: #fff;\n  border: none;\n  border-radius: 8px;\n  padding: 0.5rem 1rem;\n  font-weight: 600;\n}\n\n.friend-activities {\n  margin-top: 0.5rem;\n}\n.friend-activities h4 {\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  color: #3B82F6;\n  font-size: 1.1rem;\n}\n.friend-activities ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n.friend-activities li {\n  color: #E5E5E5;\n  margin-bottom: 0.5rem;\n  font-size: 0.98rem;\n  background: #232323;\n  border-radius: 6px;\n  padding: 0.5rem 0.75rem;\n}\n.friend-activities li span:first-child {\n  color: #3B82F6;\n  font-weight: 500;\n}\n.friend-activities li span:last-child {\n  color: #A0A0A0;\n  margin-left: 0.5rem;\n  font-size: 0.92rem;\n}\n.friend-activities li.no-activity {\n  color: #A0A0A0;\n  font-size: 0.95rem;\n  background: none;\n  padding: 0;\n}\n/* ===================== Modern Friends Page ===================== */\n.friends-page .main-content {\n  max-width: 1100px;\n  margin: 0 auto;\n  padding: 2rem 1rem;\n  display: block;\n}\n\n.friends-page h1 {\n  font-weight: 700;\n  font-size: 2.5rem;\n  margin-bottom: 2rem;\n  letter-spacing: -1px;\n}\n\n.add-friend-form {\n  display: flex;\n  gap: 1rem;\n  margin-bottom: 2.5rem;\n  align-items: center;\n}\n\n.add-friend-form input[type="text"] {\n  flex: 1;\n  padding: 0.75rem 1rem;\n  border-radius: 8px;\n  border: 1px solid #2A2A2A;\n  background: #181818;\n  color: #E5E5E5;\n  font-size: 1rem;\n}\n\n.add-friend-form .add-btn {\n  min-width: 120px;\n  font-weight: 600;\n}\n\n.friends-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(340px, 1fr));\n  gap: 2rem;\n}\n\n.friend-card {\n  box-shadow: 0 4px 24px rgba(0,0,0,0.18);\n  border-radius: 16px;\n  background: #1A1A1A;\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n  border: 1px solid #232323;\n}\n\n.friend-card .friend-icon {\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  background: #232323;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  color: #3B82F6;\n  font-weight: 700;\n}\n\n.friend-card .friend-info {\n  flex: 1;\n}\n\n.friend-card .friend-info div:first-child {\n  font-weight: 600;\n  font-size: 1.25rem;\n  color: #E5E5E5;\n}\n.friend-card .friend-info div:last-child {\n  color: #A0A0A0;\n  font-size: 0.95rem;\n}\n\n.friend-card .remove-btn {\n  background: #d20d0d9e;\n  color: #fff;\n  border: none;\n  border-radius: 8px;\n  padding: 0.5rem 1rem;\n  font-weight: 600;\n}\n\n.friend-activities {\n  margin-top: 0.5rem;\n}\n.friend-activities h4 {\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  color: #3B82F6;\n  font-size: 1.1rem;\n}\n.friend-activities ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n.friend-activities li {\n  color: #E5E5E5;\n  margin-bottom: 0.5rem;\n  font-size: 0.98rem;\n  background: #232323;\n  border-radius: 6px;\n  padding: 0.5rem 0.75rem;\n}\n.friend-activities li span:first-child {\n  color: #3B82F6;\n  font-weight: 500;\n}\n.friend-activities li span:last-child {\n  color: #A0A0A0;\n  margin-left: 0.5rem;\n  font-size: 0.92rem;\n}\n.friend-activities li.no-activity {\n  color: #A0A0A0;\n  font-size: 0.95rem;\n  background: none;\n  padding: 0;\n}\n/* ===================== Modern UI Improvements ===================== */\n.popup-card,\n.project-card,\n.auth-form-card,\n.profile-details-container,\n.activity-card {\n  box-shadow: 0 4px 24px rgba(0,0,0,0.25);\n  border-radius: 12px;\n  padding: 2rem 2.5rem;\n}\n\n.btn {\n  border-radius: 12px;\n}\n\n.project-card:hover,\n.activity-card:hover {\n  background-color: #232323;\n  box-shadow: 0 8px 32px rgba(0,0,0,0.35);\n  transition: background 0.2s, box-shadow 0.2s;\n}\n\n.btn:hover {\n  opacity: 0.85;\n  transform: translateY(-2px);\n  transition: opacity 0.2s, transform 0.2s;\n}\n\n.error-message {\n  color: #ff4d4f;\n  background: #2a1a1a;\n  padding: 0.5rem 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  font-weight: bold;\n}\n\n.divider {\n  border-bottom: 1px solid #2A2A2A;\n  margin: 2rem 0;\n}\n@font-face {\n  font-family: 'Inter';\n  src: url(${f}) format('truetype');\n  font-weight: normal;\n}\n\nbody {\n  font-family: 'Inter', sans-serif;\n  margin: 0;\n  background-color: #0A0A0A;\n}\n\n/* =========================================================navbar================================= */\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem 2rem;\n  background-color: #121212;\n  color: #E5E5E5;\n}\n\n.left-group {\n  display: flex;\n  align-items: center;\n  gap: 4rem;\n}\n\n.nav-links ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  gap: 3rem;\n}\n\n.nav-links ul a {\n  color: #E5E5E5;\n  text-decoration: none;\n  font-size: 1rem;\n}\n\n.user-actions-logged-out {\n  display: flex;\n  gap: 1.5rem;\n}\n\n.user-actions-logged-in {\n  display: flex;\n  align-items: center;\n  gap: 1.5rem;\n}\n\n.search-input {\n  padding: 0.5rem;\n  border-radius: 400px;\n  border: 1px solid #2A2A2A;\n  background-color: #1A1A1A;\n  color: #E5E5E5;\n}\n\n.profile-link {\n  text-decoration: none;\n  color: #E5E5E5;\n}\n\n.btn {\n  background-color: #3B82F6;\n  padding: 0.5rem 1rem;\n  border: 1px solid #3B82F6;\n  border-radius: 4px;\n  text-decoration: none;\n  color: #E5E5E5;\n  cursor: pointer;\n  text-transform: uppercase;\n}\n\n.btn.sign-out-btn,\n.btn.logout-btn {\n  background-color: #d20d0d9e;\n  border: none;\n}\n\n.btn.login-btn,\n.btn.signup-btn {\n  border: 1px solid #3B82F6;\n}\n\n@media (max-width: 768px) {\n  .search-input {\n    display: none;\n  }\n}\n\n.logo-img {\n  height: 2rem;\n  width: auto;\n}\n\n/* =========================================================splash page================================= */\n.splash-page {\n  text-align: center;\n  color: #E5E5E5;\n  background-color: #0A0A0A;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.splash-main {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.splash-content {\n  margin-top: 7rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.splash-content h2 {\n  font-size: 2rem;\n  color: #E5E5E5;\n}\n\n.splash-content .subtitle {\n  font-size: 1.25rem;\n  margin-top: 1.5rem;\n  line-height: 2;\n  padding-bottom: 3rem;\n}\n\n.btn.get-started-btn {\n  background-color: #3B82F6;\n  color: #E5E5E5;\n  font-weight: bold;\n  border: 2px;\n  padding: 0.75rem 1.5rem;\n  font-size: 1rem;\n}\n\n.btn.get-started-btn:hover {\n  opacity: 0.8;\n}\n\n.splash-logo-img {\n  height: 4rem;\n  width: auto;\n  margin-bottom: 2rem;\n}\n\n/* =========================================================home page================================= */\n\n.home-page .main-content {\n  display: flex;\n  justify-content: space-between;\n  padding: 2rem;\n  gap: 4rem;\n  background-color: #0A0A0A;\n  min-height: calc(100vh - 74px);\n  color: #E5E5E5;\n}\n\n.home-page .left-panel,\n.home-page .right-panel {\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border: 2px solid #2A2A2A;\n  border-radius: 1px;\n}\n\n.home-page .left-panel {\n  flex: 1;\n}\n\n.home-page .right-panel {\n  flex: 2;\n}\n\n.home-page h3 {\n  margin-top: 2rem;\n}\n\n.activity-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.sort-btn {\n  cursor: pointer;\n  text-transform: uppercase;\n  border: none;\n}\n\n/* =============================project card styles================================= */\n\n.new-project-btn {\n  color: #E5E5E5;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 4px;\n  text-transform: uppercase;\n  font-weight: bold;\n  cursor: pointer;\n  margin-bottom: 1rem;\n}\n\n.projects-list .project-card {\n  border: 1px solid #2A2A2A;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  border-radius: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #1A1A1A;\n}\n\n.project-card h4 {\n  margin: 0;\n  color: #E5E5E5;\n}\n\n.project-card p {\n  margin: 0;\n  color: #E5E5E5;\n  font-size: 1rem;\n}\n\n.view-btn {\n  background-color: #3B82F6;\n  color: #E5E5E5;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  text-decoration: none;\n}\n\n.project-card-link {\n  text-decoration: none;\n  color: inherit;\n}\n\n/* =============================activity cards=========================== */\n\n.activity-card {\n  border: 1px solid #2A2A2A;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  border-radius: 8px;\n  background-color: #1A1A1A;\n}\n\n.activity-card p {\n  margin: 0.25rem 0;\n}\n\n.tags {\n  margin-top: 0.5rem;\n}\n\n.tag-item {\n  background-color: #3B82F6;\n  color: #E5E5E5;\n  padding: 0.2rem 0.5rem;\n  border-radius: 4px;\n  font-size: 0.8rem;\n  margin-right: 0.2rem;\n  margin-left: 0.5rem;\n}\n\n.activity-card-link {\n  text-decoration: none;\n  color: inherit;\n}\n\n/* ===============================project view =========================== */\n.project-view-page .main-content {\n  display: flex;\n  padding: 2rem;\n  gap: 2rem;\n  background-color: #0A0A0A;\n  min-height: calc(100vh - 74px);\n  color: #E5E5E5;\n}\n\n.project-view-page .left-panel {\n  flex: 1;\n  padding: 2rem;\n  background-color: #1A1A1A;\n  border-radius: 8px;\n  border: 2px solid #2A2A2A;\n}\n\n.project-view-page .right-panel {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n.back-link {\n  text-decoration: none;\n  color: #3B82F6;\n  font-weight: bold;\n  font-size: 0.9rem;\n}\n\n.project-files {\n  margin-top: 2rem;\n  border: 2px solid #2A2A2A;\n  padding: 1rem;\n}\n\n.file-list {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  margin-bottom: 1rem;\n}\n\n.file-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.75rem;\n  border-bottom: 1px solid #2A2A2A;\n  border-radius: 4px;\n}\n\n.file-actions {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.check-in-btn,\n.check-out-btn {\n  background-color: #3B82F6;\n  color: #E5E5E5;\n  border: none;\n  padding: 0.5rem 1rem;\n  font-size: 0.8rem;\n  cursor: pointer;\n  border-radius: 4px;\n}\n\n.edit-btn {\n  color: #E5E5E5;\n  border: none;\n  padding: 0.5rem 1rem;\n  font-size: 0.8rem;\n  cursor: pointer;\n  border-radius: 4px;\n  text-transform: uppercase;\n}\n\n.project-members {\n  margin-top: 2rem;\n}\n\n.member-item {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 0.5rem;\n  border: 1px solid #2A2A2A;\n  border-radius: 4px;\n}\n\n.user-icon {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n}\n\n.project-details {\n  padding: 2rem;\n  background-color: #1A1A1A;\n  border-radius: 8px;\n  border: 2px solid #2A2A2A;\n}\n\n.project-info {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n/* ==========================================profile page============================ */\n\n.profile-page .main-content {\n  display: flex;\n  padding: 2rem;\n  gap: 4rem;\n  background-color: #0A0A0A;\n  min-height: calc(100vh - 74px);\n  color: #E5E5E5;\n}\n\n.profile-page .left-panel {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border: 2px solid #2A2A2A;\n  border-radius: 1px;\n}\n\n.profile-page .right-panel {\n  flex: 2;\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n.profile-info {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border: 2px solid #2A2A2A;\n  border-radius: 1px;\n}\n\n.profile-img {\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n  margin-bottom: 1rem;\n}\n\n.profile-username {\n  font-size: 2rem;\n  margin: 0.5rem 0;\n}\n\n.profile-bio {\n  text-align: center;\n  margin: 0;\n  color: #A0A0A0; /* Muted text color for the bio */\n}\n\n.logout-btn {\n  margin-top: 1rem;\n}\n\n.profile-details-container {\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border-radius: 1px;\n  border: 2px solid #2A2A2A;\n  color: #E5E5E5;\n}\n\n.details-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.edit-profile-btn {\n  background-color: #3B82F6;\n  color: #E5E5E5;\n  border: none;\n}\n\n.activity-feed-container {\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border-radius: 1px;\n  border: 2px solid #2A2A2A;\n}\n\n/* ============================= projects page =========================== */\n.projects-page .main-content {\n  display: flex;\n  justify-content: center; /* Center the content */\n  padding: 2rem;\n  background-color: #0A0A0A;\n  min-height: calc(100vh - 74px);\n  color: #E5E5E5;\n}\n\n.projects-page .content-container {\n  width: 100%;\n  max-width: 900px; /* Limit the width for better readability */\n}\n\n.projects-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n/* ==================================== friends page ==================================== */\n.friends-page .main-content {\n  display: flex;\n  padding: 2rem;\n  gap: 4rem;\n  background-color: #0A0A0A;\n  min-height: calc(100vh - 74px);\n  color: #E5E5E5;\n}\n\n.friends-page .left-panel {\n  flex: 1;\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border: 2px solid #2A2A2A;\n  border-radius: 1px;\n}\n\n.friends-page .right-panel {\n  flex: 2;\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border: 2px solid #2A2A2A;\n  border-radius: 1px;\n}\n\n.friends-list {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.friend-card {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  border: 1px solid #2A2A2A;\n  border-radius: 8px;\n  background-color: #1A1A1A;\n}\n\n.friend-icon {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n}\n\n.friend-info {\n  display: flex;\n  flex-direction: column;\n}\n\n.friend-info h3 {\n  margin: 0;\n}\n\n.view-profile-btn {\n  text-decoration: none;\n  color: #3B82F6;\n  font-size: 0.9rem;\n}\n\n/* =========================================================auth pages================================= */\n.auth-page {\n  background-color: #0A0A0A;\n  color: #E5E5E5;\n  min-height: 100vh;\n}\n\n.auth-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 4rem 2rem;\n}\n\n.auth-form-card {\n  background-color: #1A1A1A;\n  border: 2px solid #2A2A2A;\n  padding: 3rem;\n  border-radius: 1px;\n  width: 100%;\n  max-width: 450px;\n  text-align: center;\n}\n\n.auth-form-card h2 {\n  margin-top: 0;\n  margin-bottom: 2rem;\n}\n\n.auth-form {\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n}\n\n.form-group label {\n  margin-bottom: 0.5rem;\n  color: #A0A0A0; /* Muted text color for labels */\n}\n\n.form-group input {\n  padding: 0.75rem;\n  border: 1px solid #2A2A2A;\n  background-color: #121212;\n  color: #E5E5E5;\n  border-radius: 4px;\n}\n\n.auth-btn {\n  margin-top: 1rem;\n  width: 100%;\n}\n\n.form-link {\n  margin-top: 2rem;\n}\n\n.form-link a {\n  color: #3B82F6;\n  text-decoration: none;\n}\n\n/* ========================================================= Popup Modal ================================= */\n.popup-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.popup-card {\n  background-color: #1A1A1A;\n  border: 2px solid #2A2A2A;\n  color: #E5E5E5;\n  padding: 2rem;\n  border-radius: 8px;\n  width: 100%;\n  max-width: 400px;\n}\n\n.popup-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n.close-btn {\n  background: none;\n  border: none;\n  color: #E5E5E5;\n  font-size: 2rem;\n  cursor: pointer;\n}\n\n.popup-form {\n  display: flex;\n  flex-direction: column;\n}\n\n.popup-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n  margin-top: 2rem;\n}\n\n.cancel-btn {\n  background-color: transparent;\n  border: 1px solid #E5E5E5;\n  color: #E5E5E5;\n}\n\n.create-btn {\n  background-color: #3B82F6;\n  border: none;\n}`,"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA,2EAA2E;AAC3E;EACE,iBAAiB;EACjB,cAAc;EACd,kBAAkB;EAClB,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,WAAW;EACX,qBAAqB;EACrB,mBAAmB;AACrB;;AAEA;EACE,OAAO;EACP,qBAAqB;EACrB,kBAAkB;EAClB,yBAAyB;EACzB,mBAAmB;EACnB,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,mBAAmB;EACnB,OAAO;AACT;;AAEA;EACE,OAAO;EACP,qBAAqB;EACrB,kBAAkB;EAClB,yBAAyB;EACzB,mBAAmB;EACnB,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,2DAA2D;EAC3D,SAAS;AACX;;AAEA;EACE,uCAAuC;EACvC,mBAAmB;EACnB,mBAAmB;EACnB,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;EACnB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,eAAe;EACf,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;AACA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,cAAc;AAChB;AACA;EACE,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,oBAAoB;EACpB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;EACpB,gBAAgB;EAChB,cAAc;EACd,iBAAiB;AACnB;AACA;EACE,gBAAgB;EAChB,UAAU;EACV,SAAS;AACX;AACA;EACE,cAAc;EACd,qBAAqB;EACrB,kBAAkB;EAClB,mBAAmB;EACnB,kBAAkB;EAClB,uBAAuB;AACzB;AACA;EACE,cAAc;EACd,gBAAgB;AAClB;AACA;EACE,cAAc;EACd,mBAAmB;EACnB,kBAAkB;AACpB;AACA;EACE,cAAc;EACd,kBAAkB;EAClB,gBAAgB;EAChB,UAAU;AACZ;AACA,oEAAoE;AACpE;EACE,iBAAiB;EACjB,cAAc;EACd,kBAAkB;EAClB,cAAc;AAChB;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,qBAAqB;EACrB,mBAAmB;AACrB;;AAEA;EACE,OAAO;EACP,qBAAqB;EACrB,kBAAkB;EAClB,yBAAyB;EACzB,mBAAmB;EACnB,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,2DAA2D;EAC3D,SAAS;AACX;;AAEA;EACE,uCAAuC;EACvC,mBAAmB;EACnB,mBAAmB;EACnB,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,yBAAyB;AAC3B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;EACnB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,eAAe;EACf,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,OAAO;AACT;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,cAAc;AAChB;AACA;EACE,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,oBAAoB;EACpB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;EACpB,gBAAgB;EAChB,cAAc;EACd,iBAAiB;AACnB;AACA;EACE,gBAAgB;EAChB,UAAU;EACV,SAAS;AACX;AACA;EACE,cAAc;EACd,qBAAqB;EACrB,kBAAkB;EAClB,mBAAmB;EACnB,kBAAkB;EAClB,uBAAuB;AACzB;AACA;EACE,cAAc;EACd,gBAAgB;AAClB;AACA;EACE,cAAc;EACd,mBAAmB;EACnB,kBAAkB;AACpB;AACA;EACE,cAAc;EACd,kBAAkB;EAClB,gBAAgB;EAChB,UAAU;AACZ;AACA,uEAAuE;AACvE;;;;;EAKE,uCAAuC;EACvC,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;;EAEE,yBAAyB;EACzB,uCAAuC;EACvC,4CAA4C;AAC9C;;AAEA;EACE,aAAa;EACb,2BAA2B;EAC3B,wCAAwC;AAC1C;;AAEA;EACE,cAAc;EACd,mBAAmB;EACnB,oBAAoB;EACpB,kBAAkB;EAClB,mBAAmB;EACnB,iBAAiB;AACnB;;AAEA;EACE,gCAAgC;EAChC,cAAc;AAChB;AACA;EACE,oBAAoB;EACpB,+DAA+F;EAC/F,mBAAmB;AACrB;;AAEA;EACE,gCAAgC;EAChC,SAAS;EACT,yBAAyB;AAC3B;;AAEA,qGAAqG;AACrG;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,kBAAkB;EAClB,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,gBAAgB;EAChB,UAAU;EACV,SAAS;EACT,aAAa;EACb,SAAS;AACX;;AAEA;EACE,cAAc;EACd,qBAAqB;EACrB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,eAAe;EACf,oBAAoB;EACpB,yBAAyB;EACzB,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,qBAAqB;EACrB,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,oBAAoB;EACpB,yBAAyB;EACzB,kBAAkB;EAClB,qBAAqB;EACrB,cAAc;EACd,eAAe;EACf,yBAAyB;AAC3B;;AAEA;;EAEE,2BAA2B;EAC3B,YAAY;AACd;;AAEA;;EAEE,yBAAyB;AAC3B;;AAEA;EACE;IACE,aAAa;EACf;AACF;;AAEA;EACE,YAAY;EACZ,WAAW;AACb;;AAEA,0GAA0G;AAC1G;EACE,kBAAkB;EAClB,cAAc;EACd,yBAAyB;EACzB,aAAa;EACb,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,yBAAyB;EACzB,cAAc;EACd,iBAAiB;EACjB,WAAW;EACX,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,mBAAmB;AACrB;;AAEA,wGAAwG;;AAExG;EACE,aAAa;EACb,8BAA8B;EAC9B,aAAa;EACb,SAAS;EACT,yBAAyB;EACzB,8BAA8B;EAC9B,cAAc;AAChB;;AAEA;;EAEE,yBAAyB;EACzB,aAAa;EACb,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,OAAO;AACT;;AAEA;EACE,OAAO;AACT;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,yBAAyB;EACzB,YAAY;AACd;;AAEA,sFAAsF;;AAEtF;EACE,cAAc;EACd,YAAY;EACZ,uBAAuB;EACvB,kBAAkB;EAClB,yBAAyB;EACzB,iBAAiB;EACjB,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,yBAAyB;AAC3B;;AAEA;EACE,SAAS;EACT,cAAc;AAChB;;AAEA;EACE,SAAS;EACT,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,cAAc;EACd,YAAY;EACZ,oBAAoB;EACpB,kBAAkB;EAClB,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;EACrB,cAAc;AAChB;;AAEA,2EAA2E;;AAE3E;EACE,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,cAAc;EACd,sBAAsB;EACtB,kBAAkB;EAClB,iBAAiB;EACjB,oBAAoB;EACpB,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,cAAc;AAChB;;AAEA,4EAA4E;AAC5E;EACE,aAAa;EACb,aAAa;EACb,SAAS;EACT,yBAAyB;EACzB,8BAA8B;EAC9B,cAAc;AAChB;;AAEA;EACE,OAAO;EACP,aAAa;EACb,yBAAyB;EACzB,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,qBAAqB;EACrB,cAAc;EACd,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,gBAAgB;EAChB,gCAAgC;EAChC,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,WAAW;AACb;;AAEA;;EAEE,yBAAyB;EACzB,cAAc;EACd,YAAY;EACZ,oBAAoB;EACpB,iBAAiB;EACjB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,cAAc;EACd,YAAY;EACZ,oBAAoB;EACpB,iBAAiB;EACjB,eAAe;EACf,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,eAAe;EACf,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,yBAAyB;EACzB,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA,uFAAuF;;AAEvF;EACE,aAAa;EACb,aAAa;EACb,SAAS;EACT,yBAAyB;EACzB,8BAA8B;EAC9B,cAAc;AAChB;;AAEA;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,yBAAyB;EACzB,aAAa;EACb,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,yBAAyB;EACzB,aAAa;EACb,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,cAAc,EAAE,iCAAiC;AACnD;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,kBAAkB;EAClB,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;EACzB,cAAc;EACd,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA,4EAA4E;AAC5E;EACE,aAAa;EACb,uBAAuB,EAAE,uBAAuB;EAChD,aAAa;EACb,yBAAyB;EACzB,8BAA8B;EAC9B,cAAc;AAChB;;AAEA;EACE,WAAW;EACX,gBAAgB,EAAE,2CAA2C;AAC/D;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA,2FAA2F;AAC3F;EACE,aAAa;EACb,aAAa;EACb,SAAS;EACT,yBAAyB;EACzB,8BAA8B;EAC9B,cAAc;AAChB;;AAEA;EACE,OAAO;EACP,yBAAyB;EACzB,aAAa;EACb,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,OAAO;EACP,yBAAyB;EACzB,aAAa;EACb,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,aAAa;EACb,yBAAyB;EACzB,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,qBAAqB;EACrB,cAAc;EACd,iBAAiB;AACnB;;AAEA,yGAAyG;AACzG;EACE,yBAAyB;EACzB,cAAc;EACd,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,yBAAyB;EACzB,aAAa;EACb,kBAAkB;EAClB,WAAW;EACX,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA;EACE,qBAAqB;EACrB,cAAc,EAAE,gCAAgC;AAClD;;AAEA;EACE,gBAAgB;EAChB,yBAAyB;EACzB,yBAAyB;EACzB,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,WAAW;AACb;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,qBAAqB;AACvB;;AAEA,4GAA4G;AAC5G;EACE,eAAe;EACf,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,oCAAoC;EACpC,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;AACf;;AAEA;EACE,yBAAyB;EACzB,yBAAyB;EACzB,cAAc;EACd,aAAa;EACb,kBAAkB;EAClB,WAAW;EACX,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,cAAc;EACd,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,yBAAyB;EACzB,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,6BAA6B;EAC7B,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,YAAY;AACd",sourcesContent:["/* ===================== Friends Page Layout Update ===================== */\n.friends-page .main-content {\n  max-width: 1100px;\n  margin: 0 auto;\n  padding: 2rem 1rem;\n  display: flex;\n  flex-direction: column;\n}\n\n.friends-header {\n  font-weight: 700;\n  font-size: 2.5rem;\n  margin-bottom: 2rem;\n  letter-spacing: -1px;\n}\n\n.friends-actions {\n  display: flex;\n  gap: 1.5rem;\n  margin-bottom: 2.5rem;\n  align-items: center;\n}\n\n.search-friends-input {\n  flex: 2;\n  padding: 0.75rem 1rem;\n  border-radius: 8px;\n  border: 1px solid #2A2A2A;\n  background: #181818;\n  color: #E5E5E5;\n  font-size: 1rem;\n}\n\n.add-friend-form {\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n  flex: 2;\n}\n\n.add-friend-form input[type=\"text\"] {\n  flex: 1;\n  padding: 0.75rem 1rem;\n  border-radius: 8px;\n  border: 1px solid #2A2A2A;\n  background: #181818;\n  color: #E5E5E5;\n  font-size: 1rem;\n}\n\n.add-friend-form .add-btn {\n  min-width: 120px;\n  font-weight: 600;\n}\n\n.friends-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(340px, 1fr));\n  gap: 2rem;\n}\n\n.friend-card {\n  box-shadow: 0 4px 24px rgba(0,0,0,0.18);\n  border-radius: 16px;\n  background: #1A1A1A;\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n  border: 1px solid #232323;\n}\n\n.friend-card-top {\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n}\n\n.friend-card .friend-icon {\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  background: #232323;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  color: #3B82F6;\n  font-weight: 700;\n}\n\n.friend-card .friend-info {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 0.2rem;\n}\n.friend-card .friend-info .friend-name {\n  font-weight: 600;\n  font-size: 1.25rem;\n  color: #E5E5E5;\n}\n.friend-card .friend-info .friend-email {\n  color: #A0A0A0;\n  font-size: 0.95rem;\n}\n\n.friend-card .remove-btn {\n  background: #d20d0d9e;\n  color: #fff;\n  border: none;\n  border-radius: 8px;\n  padding: 0.5rem 1rem;\n  font-weight: 600;\n}\n\n.friend-activities {\n  margin-top: 0.5rem;\n}\n.friend-activities h4 {\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  color: #3B82F6;\n  font-size: 1.1rem;\n}\n.friend-activities ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n.friend-activities li {\n  color: #E5E5E5;\n  margin-bottom: 0.5rem;\n  font-size: 0.98rem;\n  background: #232323;\n  border-radius: 6px;\n  padding: 0.5rem 0.75rem;\n}\n.friend-activities li span:first-child {\n  color: #3B82F6;\n  font-weight: 500;\n}\n.friend-activities li span:last-child {\n  color: #A0A0A0;\n  margin-left: 0.5rem;\n  font-size: 0.92rem;\n}\n.friend-activities li.no-activity {\n  color: #A0A0A0;\n  font-size: 0.95rem;\n  background: none;\n  padding: 0;\n}\n/* ===================== Modern Friends Page ===================== */\n.friends-page .main-content {\n  max-width: 1100px;\n  margin: 0 auto;\n  padding: 2rem 1rem;\n  display: block;\n}\n\n.friends-page h1 {\n  font-weight: 700;\n  font-size: 2.5rem;\n  margin-bottom: 2rem;\n  letter-spacing: -1px;\n}\n\n.add-friend-form {\n  display: flex;\n  gap: 1rem;\n  margin-bottom: 2.5rem;\n  align-items: center;\n}\n\n.add-friend-form input[type=\"text\"] {\n  flex: 1;\n  padding: 0.75rem 1rem;\n  border-radius: 8px;\n  border: 1px solid #2A2A2A;\n  background: #181818;\n  color: #E5E5E5;\n  font-size: 1rem;\n}\n\n.add-friend-form .add-btn {\n  min-width: 120px;\n  font-weight: 600;\n}\n\n.friends-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(340px, 1fr));\n  gap: 2rem;\n}\n\n.friend-card {\n  box-shadow: 0 4px 24px rgba(0,0,0,0.18);\n  border-radius: 16px;\n  background: #1A1A1A;\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n  border: 1px solid #232323;\n}\n\n.friend-card .friend-icon {\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  background: #232323;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  color: #3B82F6;\n  font-weight: 700;\n}\n\n.friend-card .friend-info {\n  flex: 1;\n}\n\n.friend-card .friend-info div:first-child {\n  font-weight: 600;\n  font-size: 1.25rem;\n  color: #E5E5E5;\n}\n.friend-card .friend-info div:last-child {\n  color: #A0A0A0;\n  font-size: 0.95rem;\n}\n\n.friend-card .remove-btn {\n  background: #d20d0d9e;\n  color: #fff;\n  border: none;\n  border-radius: 8px;\n  padding: 0.5rem 1rem;\n  font-weight: 600;\n}\n\n.friend-activities {\n  margin-top: 0.5rem;\n}\n.friend-activities h4 {\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  color: #3B82F6;\n  font-size: 1.1rem;\n}\n.friend-activities ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n.friend-activities li {\n  color: #E5E5E5;\n  margin-bottom: 0.5rem;\n  font-size: 0.98rem;\n  background: #232323;\n  border-radius: 6px;\n  padding: 0.5rem 0.75rem;\n}\n.friend-activities li span:first-child {\n  color: #3B82F6;\n  font-weight: 500;\n}\n.friend-activities li span:last-child {\n  color: #A0A0A0;\n  margin-left: 0.5rem;\n  font-size: 0.92rem;\n}\n.friend-activities li.no-activity {\n  color: #A0A0A0;\n  font-size: 0.95rem;\n  background: none;\n  padding: 0;\n}\n/* ===================== Modern UI Improvements ===================== */\n.popup-card,\n.project-card,\n.auth-form-card,\n.profile-details-container,\n.activity-card {\n  box-shadow: 0 4px 24px rgba(0,0,0,0.25);\n  border-radius: 12px;\n  padding: 2rem 2.5rem;\n}\n\n.btn {\n  border-radius: 12px;\n}\n\n.project-card:hover,\n.activity-card:hover {\n  background-color: #232323;\n  box-shadow: 0 8px 32px rgba(0,0,0,0.35);\n  transition: background 0.2s, box-shadow 0.2s;\n}\n\n.btn:hover {\n  opacity: 0.85;\n  transform: translateY(-2px);\n  transition: opacity 0.2s, transform 0.2s;\n}\n\n.error-message {\n  color: #ff4d4f;\n  background: #2a1a1a;\n  padding: 0.5rem 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  font-weight: bold;\n}\n\n.divider {\n  border-bottom: 1px solid #2A2A2A;\n  margin: 2rem 0;\n}\n@font-face {\n  font-family: 'Inter';\n  src: url('../../public/assets/fonts/Inter/Inter-VariableFont_opsz,wght.ttf') format('truetype');\n  font-weight: normal;\n}\n\nbody {\n  font-family: 'Inter', sans-serif;\n  margin: 0;\n  background-color: #0A0A0A;\n}\n\n/* =========================================================navbar================================= */\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem 2rem;\n  background-color: #121212;\n  color: #E5E5E5;\n}\n\n.left-group {\n  display: flex;\n  align-items: center;\n  gap: 4rem;\n}\n\n.nav-links ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  gap: 3rem;\n}\n\n.nav-links ul a {\n  color: #E5E5E5;\n  text-decoration: none;\n  font-size: 1rem;\n}\n\n.user-actions-logged-out {\n  display: flex;\n  gap: 1.5rem;\n}\n\n.user-actions-logged-in {\n  display: flex;\n  align-items: center;\n  gap: 1.5rem;\n}\n\n.search-input {\n  padding: 0.5rem;\n  border-radius: 400px;\n  border: 1px solid #2A2A2A;\n  background-color: #1A1A1A;\n  color: #E5E5E5;\n}\n\n.profile-link {\n  text-decoration: none;\n  color: #E5E5E5;\n}\n\n.btn {\n  background-color: #3B82F6;\n  padding: 0.5rem 1rem;\n  border: 1px solid #3B82F6;\n  border-radius: 4px;\n  text-decoration: none;\n  color: #E5E5E5;\n  cursor: pointer;\n  text-transform: uppercase;\n}\n\n.btn.sign-out-btn,\n.btn.logout-btn {\n  background-color: #d20d0d9e;\n  border: none;\n}\n\n.btn.login-btn,\n.btn.signup-btn {\n  border: 1px solid #3B82F6;\n}\n\n@media (max-width: 768px) {\n  .search-input {\n    display: none;\n  }\n}\n\n.logo-img {\n  height: 2rem;\n  width: auto;\n}\n\n/* =========================================================splash page================================= */\n.splash-page {\n  text-align: center;\n  color: #E5E5E5;\n  background-color: #0A0A0A;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.splash-main {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.splash-content {\n  margin-top: 7rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.splash-content h2 {\n  font-size: 2rem;\n  color: #E5E5E5;\n}\n\n.splash-content .subtitle {\n  font-size: 1.25rem;\n  margin-top: 1.5rem;\n  line-height: 2;\n  padding-bottom: 3rem;\n}\n\n.btn.get-started-btn {\n  background-color: #3B82F6;\n  color: #E5E5E5;\n  font-weight: bold;\n  border: 2px;\n  padding: 0.75rem 1.5rem;\n  font-size: 1rem;\n}\n\n.btn.get-started-btn:hover {\n  opacity: 0.8;\n}\n\n.splash-logo-img {\n  height: 4rem;\n  width: auto;\n  margin-bottom: 2rem;\n}\n\n/* =========================================================home page================================= */\n\n.home-page .main-content {\n  display: flex;\n  justify-content: space-between;\n  padding: 2rem;\n  gap: 4rem;\n  background-color: #0A0A0A;\n  min-height: calc(100vh - 74px);\n  color: #E5E5E5;\n}\n\n.home-page .left-panel,\n.home-page .right-panel {\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border: 2px solid #2A2A2A;\n  border-radius: 1px;\n}\n\n.home-page .left-panel {\n  flex: 1;\n}\n\n.home-page .right-panel {\n  flex: 2;\n}\n\n.home-page h3 {\n  margin-top: 2rem;\n}\n\n.activity-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.sort-btn {\n  cursor: pointer;\n  text-transform: uppercase;\n  border: none;\n}\n\n/* =============================project card styles================================= */\n\n.new-project-btn {\n  color: #E5E5E5;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 4px;\n  text-transform: uppercase;\n  font-weight: bold;\n  cursor: pointer;\n  margin-bottom: 1rem;\n}\n\n.projects-list .project-card {\n  border: 1px solid #2A2A2A;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  border-radius: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #1A1A1A;\n}\n\n.project-card h4 {\n  margin: 0;\n  color: #E5E5E5;\n}\n\n.project-card p {\n  margin: 0;\n  color: #E5E5E5;\n  font-size: 1rem;\n}\n\n.view-btn {\n  background-color: #3B82F6;\n  color: #E5E5E5;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  text-decoration: none;\n}\n\n.project-card-link {\n  text-decoration: none;\n  color: inherit;\n}\n\n/* =============================activity cards=========================== */\n\n.activity-card {\n  border: 1px solid #2A2A2A;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  border-radius: 8px;\n  background-color: #1A1A1A;\n}\n\n.activity-card p {\n  margin: 0.25rem 0;\n}\n\n.tags {\n  margin-top: 0.5rem;\n}\n\n.tag-item {\n  background-color: #3B82F6;\n  color: #E5E5E5;\n  padding: 0.2rem 0.5rem;\n  border-radius: 4px;\n  font-size: 0.8rem;\n  margin-right: 0.2rem;\n  margin-left: 0.5rem;\n}\n\n.activity-card-link {\n  text-decoration: none;\n  color: inherit;\n}\n\n/* ===============================project view =========================== */\n.project-view-page .main-content {\n  display: flex;\n  padding: 2rem;\n  gap: 2rem;\n  background-color: #0A0A0A;\n  min-height: calc(100vh - 74px);\n  color: #E5E5E5;\n}\n\n.project-view-page .left-panel {\n  flex: 1;\n  padding: 2rem;\n  background-color: #1A1A1A;\n  border-radius: 8px;\n  border: 2px solid #2A2A2A;\n}\n\n.project-view-page .right-panel {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n.back-link {\n  text-decoration: none;\n  color: #3B82F6;\n  font-weight: bold;\n  font-size: 0.9rem;\n}\n\n.project-files {\n  margin-top: 2rem;\n  border: 2px solid #2A2A2A;\n  padding: 1rem;\n}\n\n.file-list {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  margin-bottom: 1rem;\n}\n\n.file-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.75rem;\n  border-bottom: 1px solid #2A2A2A;\n  border-radius: 4px;\n}\n\n.file-actions {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.check-in-btn,\n.check-out-btn {\n  background-color: #3B82F6;\n  color: #E5E5E5;\n  border: none;\n  padding: 0.5rem 1rem;\n  font-size: 0.8rem;\n  cursor: pointer;\n  border-radius: 4px;\n}\n\n.edit-btn {\n  color: #E5E5E5;\n  border: none;\n  padding: 0.5rem 1rem;\n  font-size: 0.8rem;\n  cursor: pointer;\n  border-radius: 4px;\n  text-transform: uppercase;\n}\n\n.project-members {\n  margin-top: 2rem;\n}\n\n.member-item {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 0.5rem;\n  border: 1px solid #2A2A2A;\n  border-radius: 4px;\n}\n\n.user-icon {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n}\n\n.project-details {\n  padding: 2rem;\n  background-color: #1A1A1A;\n  border-radius: 8px;\n  border: 2px solid #2A2A2A;\n}\n\n.project-info {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n/* ==========================================profile page============================ */\n\n.profile-page .main-content {\n  display: flex;\n  padding: 2rem;\n  gap: 4rem;\n  background-color: #0A0A0A;\n  min-height: calc(100vh - 74px);\n  color: #E5E5E5;\n}\n\n.profile-page .left-panel {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border: 2px solid #2A2A2A;\n  border-radius: 1px;\n}\n\n.profile-page .right-panel {\n  flex: 2;\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n.profile-info {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border: 2px solid #2A2A2A;\n  border-radius: 1px;\n}\n\n.profile-img {\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n  margin-bottom: 1rem;\n}\n\n.profile-username {\n  font-size: 2rem;\n  margin: 0.5rem 0;\n}\n\n.profile-bio {\n  text-align: center;\n  margin: 0;\n  color: #A0A0A0; /* Muted text color for the bio */\n}\n\n.logout-btn {\n  margin-top: 1rem;\n}\n\n.profile-details-container {\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border-radius: 1px;\n  border: 2px solid #2A2A2A;\n  color: #E5E5E5;\n}\n\n.details-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.edit-profile-btn {\n  background-color: #3B82F6;\n  color: #E5E5E5;\n  border: none;\n}\n\n.activity-feed-container {\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border-radius: 1px;\n  border: 2px solid #2A2A2A;\n}\n\n/* ============================= projects page =========================== */\n.projects-page .main-content {\n  display: flex;\n  justify-content: center; /* Center the content */\n  padding: 2rem;\n  background-color: #0A0A0A;\n  min-height: calc(100vh - 74px);\n  color: #E5E5E5;\n}\n\n.projects-page .content-container {\n  width: 100%;\n  max-width: 900px; /* Limit the width for better readability */\n}\n\n.projects-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n/* ==================================== friends page ==================================== */\n.friends-page .main-content {\n  display: flex;\n  padding: 2rem;\n  gap: 4rem;\n  background-color: #0A0A0A;\n  min-height: calc(100vh - 74px);\n  color: #E5E5E5;\n}\n\n.friends-page .left-panel {\n  flex: 1;\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border: 2px solid #2A2A2A;\n  border-radius: 1px;\n}\n\n.friends-page .right-panel {\n  flex: 2;\n  background-color: #1A1A1A;\n  padding: 2rem;\n  border: 2px solid #2A2A2A;\n  border-radius: 1px;\n}\n\n.friends-list {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.friend-card {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  border: 1px solid #2A2A2A;\n  border-radius: 8px;\n  background-color: #1A1A1A;\n}\n\n.friend-icon {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n}\n\n.friend-info {\n  display: flex;\n  flex-direction: column;\n}\n\n.friend-info h3 {\n  margin: 0;\n}\n\n.view-profile-btn {\n  text-decoration: none;\n  color: #3B82F6;\n  font-size: 0.9rem;\n}\n\n/* =========================================================auth pages================================= */\n.auth-page {\n  background-color: #0A0A0A;\n  color: #E5E5E5;\n  min-height: 100vh;\n}\n\n.auth-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 4rem 2rem;\n}\n\n.auth-form-card {\n  background-color: #1A1A1A;\n  border: 2px solid #2A2A2A;\n  padding: 3rem;\n  border-radius: 1px;\n  width: 100%;\n  max-width: 450px;\n  text-align: center;\n}\n\n.auth-form-card h2 {\n  margin-top: 0;\n  margin-bottom: 2rem;\n}\n\n.auth-form {\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n}\n\n.form-group label {\n  margin-bottom: 0.5rem;\n  color: #A0A0A0; /* Muted text color for labels */\n}\n\n.form-group input {\n  padding: 0.75rem;\n  border: 1px solid #2A2A2A;\n  background-color: #121212;\n  color: #E5E5E5;\n  border-radius: 4px;\n}\n\n.auth-btn {\n  margin-top: 1rem;\n  width: 100%;\n}\n\n.form-link {\n  margin-top: 2rem;\n}\n\n.form-link a {\n  color: #3B82F6;\n  text-decoration: none;\n}\n\n/* ========================================================= Popup Modal ================================= */\n.popup-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.popup-card {\n  background-color: #1A1A1A;\n  border: 2px solid #2A2A2A;\n  color: #E5E5E5;\n  padding: 2rem;\n  border-radius: 8px;\n  width: 100%;\n  max-width: 400px;\n}\n\n.popup-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n.close-btn {\n  background: none;\n  border: none;\n  color: #E5E5E5;\n  font-size: 2rem;\n  cursor: pointer;\n}\n\n.popup-form {\n  display: flex;\n  flex-direction: column;\n}\n\n.popup-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n  margin-top: 2rem;\n}\n\n.cancel-btn {\n  background-color: transparent;\n  border: 1px solid #E5E5E5;\n  color: #E5E5E5;\n}\n\n.create-btn {\n  background-color: #3B82F6;\n  border: none;\n}"],sourceRoot:""}]);const d=s},44:(e,n,t)=>{e.exports=t.p+"e05c5f3d1fa6a3893d84.ttf"},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},l=[],i=0;i<e.length;i++){var u=e[i],c=r.base?u[0]+r.base:u[0],s=o[c]||0,f="".concat(c," ").concat(s);o[c]=s+1;var d=t(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)n[d].references++,n[d].updater(p);else{var m=a(p,r);r.byIndex=i,n.splice(i,0,{identifier:f,updater:m,references:1})}l.push(f)}return l}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var l=0;l<o.length;l++){var i=t(o[l]);n[i].references--}for(var u=r(e,a),c=0;c<o.length;c++){var s=t(o[c]);0===n[s].references&&(n[s].updater(),n.splice(s,1))}o=u}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},159:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},287:(e,n)=>{var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},A=Object.assign,h={};function g(e,n,t){this.props=e,this.context=n,this.refs=h,this.updater=t||m}function v(){}function y(e,n,t){this.props=e,this.context=n,this.refs=h,this.updater=t||m}g.prototype.isReactComponent={},g.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=g.prototype;var b=y.prototype=new v;b.constructor=y,A(b,g.prototype),b.isPureReactComponent=!0;var E=Array.isArray,C=Object.prototype.hasOwnProperty,B={current:null},w={key:!0,ref:!0,__self:!0,__source:!0};function k(e,n,r){var a,o={},l=null,i=null;if(null!=n)for(a in void 0!==n.ref&&(i=n.ref),void 0!==n.key&&(l=""+n.key),n)C.call(n,a)&&!w.hasOwnProperty(a)&&(o[a]=n[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:t,type:e,key:l,ref:i,props:o,_owner:B.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var S=/\/+/g;function j(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(e){return n[e]})}(""+e.key):n.toString(36)}function N(e,n,a,o,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case t:case r:u=!0}}if(u)return l=l(u=e),e=""===o?"."+j(u,0):o,E(l)?(a="",null!=e&&(a=e.replace(S,"$&/")+"/"),N(l,n,a,"",function(e){return e})):null!=l&&(x(l)&&(l=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(l,a+(!l.key||u&&u.key===l.key?"":(""+l.key).replace(S,"$&/")+"/")+e)),n.push(l)),1;if(u=0,o=""===o?".":o+":",E(e))for(var c=0;c<e.length;c++){var s=o+j(i=e[c],c);u+=N(i,n,a,s,l)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(i=e.next()).done;)u+=N(i=i.value,n,a,s=o+j(i,c++),l);else if("object"===i)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return u}function P(e,n,t){if(null==e)return e;var r=[],a=0;return N(e,r,"","",function(e){return n.call(t,e,a++)}),r}function _(e){if(-1===e._status){var n=e._result;(n=n()).then(function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)},function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)}),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var O={current:null},z={transition:null},T={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:z,ReactCurrentOwner:B};function F(){throw Error("act(...) is not supported in production builds of React.")}n.Children={map:P,forEach:function(e,n,t){P(e,function(){n.apply(this,arguments)},t)},count:function(e){var n=0;return P(e,function(){n++}),n},toArray:function(e){return P(e,function(e){return e})||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=g,n.Fragment=a,n.Profiler=l,n.PureComponent=y,n.StrictMode=o,n.Suspense=s,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,n.act=F,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=A({},e.props),o=e.key,l=e.ref,i=e._owner;if(null!=n){if(void 0!==n.ref&&(l=n.ref,i=B.current),void 0!==n.key&&(o=""+n.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in n)C.call(n,c)&&!w.hasOwnProperty(c)&&(a[c]=void 0===n[c]&&void 0!==u?u[c]:n[c])}var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){u=Array(c);for(var s=0;s<c;s++)u[s]=arguments[s+2];a.children=u}return{$$typeof:t,type:e.type,key:o,ref:l,props:a,_owner:i}},n.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},n.createElement=k,n.createFactory=function(e){var n=k.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:c,render:e}},n.isValidElement=x,n.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:_}},n.memo=function(e,n){return{$$typeof:f,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=z.transition;z.transition={};try{e()}finally{z.transition=n}},n.unstable_act=F,n.useCallback=function(e,n){return O.current.useCallback(e,n)},n.useContext=function(e){return O.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return O.current.useDeferredValue(e)},n.useEffect=function(e,n){return O.current.useEffect(e,n)},n.useId=function(){return O.current.useId()},n.useImperativeHandle=function(e,n,t){return O.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return O.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return O.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return O.current.useMemo(e,n)},n.useReducer=function(e,n,t){return O.current.useReducer(e,n,t)},n.useRef=function(e){return O.current.useRef(e)},n.useState=function(e){return O.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return O.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return O.current.useTransition()},n.version="18.3.1"},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t}).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(l[u]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&l[s[0]]||(void 0!==o&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=o),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),a&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=a):s[4]="".concat(a)),n.push(s))}},n}},338:(e,n,t)=>{var r=t(961);n.H=r.createRoot,r.hydrateRoot},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},417:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},463:(e,n)=>{function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,a=e[r];if(!(0<o(a,n)))break e;e[r]=n,e[t]=a,t=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,a=e.length,l=a>>>1;r<l;){var i=2*(r+1)-1,u=e[i],c=i+1,s=e[c];if(0>o(u,t))c<a&&0>o(s,u)?(e[r]=s,e[c]=t,r=c):(e[r]=u,e[i]=t,r=i);else{if(!(c<a&&0>o(s,t)))break e;e[r]=s,e[c]=t,r=c}}}return n}function o(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;n.unstable_now=function(){return l.now()}}else{var i=Date,u=i.now();n.unstable_now=function(){return i.now()-u}}var c=[],s=[],f=1,d=null,p=3,m=!1,A=!1,h=!1,g="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function b(e){for(var n=r(s);null!==n;){if(null===n.callback)a(s);else{if(!(n.startTime<=e))break;a(s),n.sortIndex=n.expirationTime,t(c,n)}n=r(s)}}function E(e){if(h=!1,b(e),!A)if(null!==r(c))A=!0,z(C);else{var n=r(s);null!==n&&T(E,n.startTime-e)}}function C(e,t){A=!1,h&&(h=!1,v(x),x=-1),m=!0;var o=p;try{for(b(t),d=r(c);null!==d&&(!(d.expirationTime>t)||e&&!N());){var l=d.callback;if("function"==typeof l){d.callback=null,p=d.priorityLevel;var i=l(d.expirationTime<=t);t=n.unstable_now(),"function"==typeof i?d.callback=i:d===r(c)&&a(c),b(t)}else a(c);d=r(c)}if(null!==d)var u=!0;else{var f=r(s);null!==f&&T(E,f.startTime-t),u=!1}return u}finally{d=null,p=o,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var B,w=!1,k=null,x=-1,S=5,j=-1;function N(){return!(n.unstable_now()-j<S)}function P(){if(null!==k){var e=n.unstable_now();j=e;var t=!0;try{t=k(!0,e)}finally{t?B():(w=!1,k=null)}}else w=!1}if("function"==typeof y)B=function(){y(P)};else if("undefined"!=typeof MessageChannel){var _=new MessageChannel,O=_.port2;_.port1.onmessage=P,B=function(){O.postMessage(null)}}else B=function(){g(P,0)};function z(e){k=e,w||(w=!0,B())}function T(e,t){x=g(function(){e(n.unstable_now())},t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){A||m||(A=!0,z(C))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):S=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return p},n.unstable_getFirstCallbackNode=function(){return r(c)},n.unstable_next=function(e){switch(p){case 1:case 2:case 3:var n=3;break;default:n=p}var t=p;p=n;try{return e()}finally{p=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=p;p=e;try{return n()}finally{p=t}},n.unstable_scheduleCallback=function(e,a,o){var l=n.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?l+o:l,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:o,expirationTime:i=o+i,sortIndex:-1},o>l?(e.sortIndex=o,t(s,e),null===r(c)&&e===r(s)&&(h?(v(x),x=-1):h=!0,T(E,o-l))):(e.sortIndex=i,t(c,e),A||m||(A=!0,z(C))),e},n.unstable_shouldYield=N,n.unstable_wrapCallback=function(e){var n=p;return function(){var t=p;p=n;try{return e.apply(this,arguments)}finally{p=t}}}},540:(e,n,t)=>{e.exports=t(287)},551:(e,n,t)=>{var r=t(540),a=t(982);function o(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=new Set,i={};function u(e,n){c(e,n),c(e+"Capture",n)}function c(e,n){for(i[e]=n,e=0;e<n.length;e++)l.add(n[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},m={};function A(e,n,t,r,a,o,l){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=o,this.removeEmptyString=l}var h={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){h[e]=new A(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var n=e[0];h[n]=new A(n,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){h[e]=new A(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){h[e]=new A(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){h[e]=new A(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){h[e]=new A(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){h[e]=new A(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){h[e]=new A(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){h[e]=new A(e,5,!1,e.toLowerCase(),null,!1,!1)});var g=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function y(e,n,t,r){var a=h.hasOwnProperty(n)?h[n]:null;(null!==a?0!==a.type:r||!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,a,r)&&(t=null),r||null===a?function(e){return!!f.call(m,e)||!f.call(p,e)&&(d.test(e)?m[e]=!0:(p[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):a.mustUseProperty?e[a.propertyName]=null===t?3!==a.type&&"":t:(n=a.attributeName,r=a.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(a=a.type)||4===a&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var n=e.replace(g,v);h[n]=new A(n,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var n=e.replace(g,v);h[n]=new A(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var n=e.replace(g,v);h[n]=new A(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){h[e]=new A(e,1,!1,e.toLowerCase(),null,!1,!1)}),h.xlinkHref=new A("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){h[e]=new A(e,1,!1,e.toLowerCase(),null,!0,!0)});var b=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=Symbol.for("react.element"),C=Symbol.for("react.portal"),B=Symbol.for("react.fragment"),w=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),x=Symbol.for("react.provider"),S=Symbol.for("react.context"),j=Symbol.for("react.forward_ref"),N=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),_=Symbol.for("react.memo"),O=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var z=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var T=Symbol.iterator;function F(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=T&&e[T]||e["@@iterator"])?e:null}var L,I=Object.assign;function R(e){if(void 0===L)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);L=n&&n[1]||""}return"\n"+L+e}var M=!1;function D(e,n){if(!e||M)return"";M=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&"string"==typeof n.stack){for(var a=n.stack.split("\n"),o=r.stack.split("\n"),l=a.length-1,i=o.length-1;1<=l&&0<=i&&a[l]!==o[i];)i--;for(;1<=l&&0<=i;l--,i--)if(a[l]!==o[i]){if(1!==l||1!==i)do{if(l--,0>--i||a[l]!==o[i]){var u="\n"+a[l].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=l&&0<=i);break}}}finally{M=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?R(e):""}function U(e){switch(e.tag){case 5:return R(e.type);case 16:return R("Lazy");case 13:return R("Suspense");case 19:return R("SuspenseList");case 0:case 2:case 15:return D(e.type,!1);case 11:return D(e.type.render,!1);case 1:return D(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case B:return"Fragment";case C:return"Portal";case k:return"Profiler";case w:return"StrictMode";case N:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case S:return(e.displayName||"Context")+".Consumer";case x:return(e._context.displayName||"Context")+".Provider";case j:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case _:return null!==(n=e.displayName||null)?n:W(e.type)||"Memo";case O:n=e._payload,e=e._init;try{return W(e(n))}catch(e){}}return null}function $(e){var n=e.type;switch(e.tag){case 24:return"Cache";case 9:return(n.displayName||"Context")+".Consumer";case 10:return(n._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=n.render).displayName||e.name||"",n.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return n;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return W(n);case 8:return n===w?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function G(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function H(e){e._valueTracker||(e._valueTracker=function(e){var n=G(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var a=t.get,o=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function q(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=G(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function Q(e,n){var t=n.checked;return I({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function X(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=V(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function K(e,n){null!=(n=n.checked)&&y(e,"checked",n,!1)}function Z(e,n){K(e,n);var t=V(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?ee(e,n.type,t):n.hasOwnProperty("defaultValue")&&ee(e,n.type,V(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function J(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function ee(e,n,t){"number"===n&&Y(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}var ne=Array.isArray;function te(e,n,t,r){if(e=e.options,n){n={};for(var a=0;a<t.length;a++)n["$"+t[a]]=!0;for(t=0;t<e.length;t++)a=n.hasOwnProperty("$"+e[t].value),e[t].selected!==a&&(e[t].selected=a),a&&r&&(e[t].defaultSelected=!0)}else{for(t=""+V(t),n=null,a=0;a<e.length;a++){if(e[a].value===t)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==n||e[a].disabled||(n=e[a])}null!==n&&(n.selected=!0)}}function re(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(o(91));return I({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(o(92));if(ne(t)){if(1<t.length)throw Error(o(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:V(t)}}function oe(e,n){var t=V(n.value),r=V(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function le(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var ce,se,fe=(se=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction(function(){return se(e,n)})}:se);function de(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function Ae(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||pe.hasOwnProperty(e)&&pe[e]?(""+n).trim():n+"px"}function he(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),a=Ae(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,a):e[t]=a}}Object.keys(pe).forEach(function(e){me.forEach(function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),pe[n]=pe[e]})});var ge=I({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,n){if(n){if(ge[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(o(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(o(62))}}function ye(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var be=null;function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Be=null,we=null;function ke(e){if(e=ya(e)){if("function"!=typeof Ce)throw Error(o(280));var n=e.stateNode;n&&(n=Ea(n),Ce(e.stateNode,e.type,n))}}function xe(e){Be?we?we.push(e):we=[e]:Be=e}function Se(){if(Be){var e=Be,n=we;if(we=Be=null,ke(e),n)for(e=0;e<n.length;e++)ke(n[e])}}function je(e,n){return e(n)}function Ne(){}var Pe=!1;function _e(e,n,t){if(Pe)return e(n,t);Pe=!0;try{return je(e,n,t)}finally{Pe=!1,(null!==Be||null!==we)&&(Ne(),Se())}}function Oe(e,n){var t=e.stateNode;if(null===t)return null;var r=Ea(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(o(231,n,typeof t));return t}var ze=!1;if(s)try{var Te={};Object.defineProperty(Te,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Te,Te),window.removeEventListener("test",Te,Te)}catch(se){ze=!1}function Fe(e,n,t,r,a,o,l,i,u){var c=Array.prototype.slice.call(arguments,3);try{n.apply(t,c)}catch(e){this.onError(e)}}var Le=!1,Ie=null,Re=!1,Me=null,De={onError:function(e){Le=!0,Ie=e}};function Ue(e,n,t,r,a,o,l,i,u){Le=!1,Ie=null,Fe.apply(De,arguments)}function We(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{!!(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function $e(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function Ve(e){if(We(e)!==e)throw Error(o(188))}function Ge(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=We(e)))throw Error(o(188));return n!==e?null:e}for(var t=e,r=n;;){var a=t.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){t=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===t)return Ve(a),e;if(l===r)return Ve(a),n;l=l.sibling}throw Error(o(188))}if(t.return!==r.return)t=a,r=l;else{for(var i=!1,u=a.child;u;){if(u===t){i=!0,t=a,r=l;break}if(u===r){i=!0,r=a,t=l;break}u=u.sibling}if(!i){for(u=l.child;u;){if(u===t){i=!0,t=l,r=a;break}if(u===r){i=!0,r=l,t=a;break}u=u.sibling}if(!i)throw Error(o(189))}}if(t.alternate!==r)throw Error(o(190))}if(3!==t.tag)throw Error(o(188));return t.stateNode.current===t?e:n}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var n=He(e);if(null!==n)return n;e=e.sibling}return null}var qe=a.unstable_scheduleCallback,Ye=a.unstable_cancelCallback,Qe=a.unstable_shouldYield,Xe=a.unstable_requestPaint,Ke=a.unstable_now,Ze=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,en=a.unstable_UserBlockingPriority,nn=a.unstable_NormalPriority,tn=a.unstable_LowPriority,rn=a.unstable_IdlePriority,an=null,on=null,ln=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(un(e)/cn|0)|0},un=Math.log,cn=Math.LN2,sn=64,fn=4194304;function dn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pn(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,l=268435455&t;if(0!==l){var i=l&~a;0!==i?r=dn(i):0!==(o&=l)&&(r=dn(o))}else 0!==(l=t&~a)?r=dn(l):0!==o&&(r=dn(o));if(0===r)return 0;if(0!==n&&n!==r&&0===(n&a)&&((a=r&-r)>=(o=n&-n)||16===a&&4194240&o))return n;if(4&r&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)a=1<<(t=31-ln(n)),r|=e[t],n&=~a;return r}function mn(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function An(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function hn(){var e=sn;return!(4194240&(sn<<=1))&&(sn=64),e}function gn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function vn(e,n,t){e.pendingLanes|=n,536870912!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-ln(n)]=t}function yn(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-ln(t),a=1<<r;a&n|e[r]&n&&(e[r]|=n),t&=~a}}var bn=0;function En(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var Cn,Bn,wn,kn,xn,Sn=!1,jn=[],Nn=null,Pn=null,_n=null,On=new Map,zn=new Map,Tn=[],Fn="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ln(e,n){switch(e){case"focusin":case"focusout":Nn=null;break;case"dragenter":case"dragleave":Pn=null;break;case"mouseover":case"mouseout":_n=null;break;case"pointerover":case"pointerout":On.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":zn.delete(n.pointerId)}}function In(e,n,t,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==n&&null!==(n=ya(n))&&Bn(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==a&&-1===n.indexOf(a)&&n.push(a),e)}function Rn(e){var n=va(e.target);if(null!==n){var t=We(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=$e(t)))return e.blockedOn=n,void xn(e.priority,function(){wn(t)})}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function Mn(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Xn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=ya(t))&&Bn(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);be=r,t.target.dispatchEvent(r),be=null,n.shift()}return!0}function Dn(e,n,t){Mn(e)&&t.delete(n)}function Un(){Sn=!1,null!==Nn&&Mn(Nn)&&(Nn=null),null!==Pn&&Mn(Pn)&&(Pn=null),null!==_n&&Mn(_n)&&(_n=null),On.forEach(Dn),zn.forEach(Dn)}function Wn(e,n){e.blockedOn===n&&(e.blockedOn=null,Sn||(Sn=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Un)))}function $n(e){function n(n){return Wn(n,e)}if(0<jn.length){Wn(jn[0],e);for(var t=1;t<jn.length;t++){var r=jn[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Nn&&Wn(Nn,e),null!==Pn&&Wn(Pn,e),null!==_n&&Wn(_n,e),On.forEach(n),zn.forEach(n),t=0;t<Tn.length;t++)(r=Tn[t]).blockedOn===e&&(r.blockedOn=null);for(;0<Tn.length&&null===(t=Tn[0]).blockedOn;)Rn(t),null===t.blockedOn&&Tn.shift()}var Vn=b.ReactCurrentBatchConfig,Gn=!0;function Hn(e,n,t,r){var a=bn,o=Vn.transition;Vn.transition=null;try{bn=1,Yn(e,n,t,r)}finally{bn=a,Vn.transition=o}}function qn(e,n,t,r){var a=bn,o=Vn.transition;Vn.transition=null;try{bn=4,Yn(e,n,t,r)}finally{bn=a,Vn.transition=o}}function Yn(e,n,t,r){if(Gn){var a=Xn(e,n,t,r);if(null===a)Vr(e,n,r,Qn,t),Ln(e,r);else if(function(e,n,t,r,a){switch(n){case"focusin":return Nn=In(Nn,e,n,t,r,a),!0;case"dragenter":return Pn=In(Pn,e,n,t,r,a),!0;case"mouseover":return _n=In(_n,e,n,t,r,a),!0;case"pointerover":var o=a.pointerId;return On.set(o,In(On.get(o)||null,e,n,t,r,a)),!0;case"gotpointercapture":return o=a.pointerId,zn.set(o,In(zn.get(o)||null,e,n,t,r,a)),!0}return!1}(a,e,n,t,r))r.stopPropagation();else if(Ln(e,r),4&n&&-1<Fn.indexOf(e)){for(;null!==a;){var o=ya(a);if(null!==o&&Cn(o),null===(o=Xn(e,n,t,r))&&Vr(e,n,r,Qn,t),o===a)break;a=o}null!==a&&r.stopPropagation()}else Vr(e,n,r,null,t)}}var Qn=null;function Xn(e,n,t,r){if(Qn=null,null!==(e=va(e=Ee(r))))if(null===(n=We(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=$e(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return Qn=e,null}function Kn(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case en:return 4;case nn:case tn:return 16;case rn:return 536870912;default:return 16}default:return 16}}var Zn=null,Jn=null,et=null;function nt(){if(et)return et;var e,n,t=Jn,r=t.length,a="value"in Zn?Zn.value:Zn.textContent,o=a.length;for(e=0;e<r&&t[e]===a[e];e++);var l=r-e;for(n=1;n<=l&&t[r-n]===a[o-n];n++);return et=a.slice(e,1<n?1-n:void 0)}function tt(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function rt(){return!0}function at(){return!1}function ot(e){function n(n,t,r,a,o){for(var l in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(l)&&(n=e[l],this[l]=n?n(a):a[l]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?rt:at,this.isPropagationStopped=at,this}return I(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),n}var lt,it,ut,ct={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},st=ot(ct),ft=I({},ct,{view:0,detail:0}),dt=ot(ft),pt=I({},ft,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kt,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ut&&(ut&&"mousemove"===e.type?(lt=e.screenX-ut.screenX,it=e.screenY-ut.screenY):it=lt=0,ut=e),lt)},movementY:function(e){return"movementY"in e?e.movementY:it}}),mt=ot(pt),At=ot(I({},pt,{dataTransfer:0})),ht=ot(I({},ft,{relatedTarget:0})),gt=ot(I({},ct,{animationName:0,elapsedTime:0,pseudoElement:0})),vt=I({},ct,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yt=ot(vt),bt=ot(I({},ct,{data:0})),Et={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ct={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Bt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function wt(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=Bt[e])&&!!n[e]}function kt(){return wt}var xt=I({},ft,{key:function(e){if(e.key){var n=Et[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=tt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Ct[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kt,charCode:function(e){return"keypress"===e.type?tt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),St=ot(xt),jt=ot(I({},pt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Nt=ot(I({},ft,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kt})),Pt=ot(I({},ct,{propertyName:0,elapsedTime:0,pseudoElement:0})),_t=I({},pt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ot=ot(_t),zt=[9,13,27,32],Tt=s&&"CompositionEvent"in window,Ft=null;s&&"documentMode"in document&&(Ft=document.documentMode);var Lt=s&&"TextEvent"in window&&!Ft,It=s&&(!Tt||Ft&&8<Ft&&11>=Ft),Rt=String.fromCharCode(32),Mt=!1;function Dt(e,n){switch(e){case"keyup":return-1!==zt.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ut(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wt=!1,$t={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!$t[e.type]:"textarea"===n}function Gt(e,n,t,r){xe(r),0<(n=Hr(n,"onChange")).length&&(t=new st("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Ht=null,qt=null;function Yt(e){Rr(e,0)}function Qt(e){if(q(ba(e)))return e}function Xt(e,n){if("change"===e)return n}var Kt=!1;if(s){var Zt;if(s){var Jt="oninput"in document;if(!Jt){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jt="function"==typeof er.oninput}Zt=Jt}else Zt=!1;Kt=Zt&&(!document.documentMode||9<document.documentMode)}function nr(){Ht&&(Ht.detachEvent("onpropertychange",tr),qt=Ht=null)}function tr(e){if("value"===e.propertyName&&Qt(qt)){var n=[];Gt(n,qt,e,Ee(e)),_e(Yt,n)}}function rr(e,n,t){"focusin"===e?(nr(),qt=t,(Ht=n).attachEvent("onpropertychange",tr)):"focusout"===e&&nr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qt(qt)}function or(e,n){if("click"===e)return Qt(n)}function lr(e,n){if("input"===e||"change"===e)return Qt(n)}var ir="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function ur(e,n){if(ir(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var a=t[r];if(!f.call(n,a)||!ir(e[a],n[a]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,n){var t,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?fr(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function dr(){for(var e=window,n=Y();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=Y((e=n.contentWindow).document)}return n}function pr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function mr(e){var n=dr(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&fr(t.ownerDocument.documentElement,t)){if(null!==r&&pr(t))if(n=r.start,void 0===(e=r.end)&&(e=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var a=t.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=sr(t,o);var l=sr(t,r);a&&l&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==l.node||e.focusOffset!==l.offset)&&((n=n.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(n),e.extend(l.node,l.offset)):(n.setEnd(l.node,l.offset),e.addRange(n)))}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Ar=s&&"documentMode"in document&&11>=document.documentMode,hr=null,gr=null,vr=null,yr=!1;function br(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;yr||null==hr||hr!==Y(r)||(r="selectionStart"in(r=hr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Hr(gr,"onSelect")).length&&(n=new st("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=hr)))}function Er(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var Cr={animationend:Er("Animation","AnimationEnd"),animationiteration:Er("Animation","AnimationIteration"),animationstart:Er("Animation","AnimationStart"),transitionend:Er("Transition","TransitionEnd")},Br={},wr={};function kr(e){if(Br[e])return Br[e];if(!Cr[e])return e;var n,t=Cr[e];for(n in t)if(t.hasOwnProperty(n)&&n in wr)return Br[e]=t[n];return e}s&&(wr=document.createElement("div").style,"AnimationEvent"in window||(delete Cr.animationend.animation,delete Cr.animationiteration.animation,delete Cr.animationstart.animation),"TransitionEvent"in window||delete Cr.transitionend.transition);var xr=kr("animationend"),Sr=kr("animationiteration"),jr=kr("animationstart"),Nr=kr("transitionend"),Pr=new Map,_r="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Or(e,n){Pr.set(e,n),u(n,[e])}for(var zr=0;zr<_r.length;zr++){var Tr=_r[zr];Or(Tr.toLowerCase(),"on"+(Tr[0].toUpperCase()+Tr.slice(1)))}Or(xr,"onAnimationEnd"),Or(Sr,"onAnimationIteration"),Or(jr,"onAnimationStart"),Or("dblclick","onDoubleClick"),Or("focusin","onFocus"),Or("focusout","onBlur"),Or(Nr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Fr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Lr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Fr));function Ir(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,a,l,i,u,c){if(Ue.apply(this,arguments),Le){if(!Le)throw Error(o(198));var s=Ie;Le=!1,Ie=null,Re||(Re=!0,Me=s)}}(r,n,void 0,e),e.currentTarget=null}function Rr(e,n){n=!!(4&n);for(var t=0;t<e.length;t++){var r=e[t],a=r.event;r=r.listeners;e:{var o=void 0;if(n)for(var l=r.length-1;0<=l;l--){var i=r[l],u=i.instance,c=i.currentTarget;if(i=i.listener,u!==o&&a.isPropagationStopped())break e;Ir(a,i,c),o=u}else for(l=0;l<r.length;l++){if(u=(i=r[l]).instance,c=i.currentTarget,i=i.listener,u!==o&&a.isPropagationStopped())break e;Ir(a,i,c),o=u}}}if(Re)throw e=Me,Re=!1,Me=null,e}function Mr(e,n){var t=n[Aa];void 0===t&&(t=n[Aa]=new Set);var r=e+"__bubble";t.has(r)||($r(n,e,2,!1),t.add(r))}function Dr(e,n,t){var r=0;n&&(r|=4),$r(t,e,r,n)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function Wr(e){if(!e[Ur]){e[Ur]=!0,l.forEach(function(n){"selectionchange"!==n&&(Lr.has(n)||Dr(n,!1,e),Dr(n,!0,e))});var n=9===e.nodeType?e:e.ownerDocument;null===n||n[Ur]||(n[Ur]=!0,Dr("selectionchange",!1,n))}}function $r(e,n,t,r){switch(Kn(n)){case 1:var a=Hn;break;case 4:a=qn;break;default:a=Yn}t=a.bind(null,n,t,e),a=void 0,!ze||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(a=!0),r?void 0!==a?e.addEventListener(n,t,{capture:!0,passive:a}):e.addEventListener(n,t,!0):void 0!==a?e.addEventListener(n,t,{passive:a}):e.addEventListener(n,t,!1)}function Vr(e,n,t,r,a){var o=r;if(!(1&n||2&n||null===r))e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===l)for(l=r.return;null!==l;){var u=l.tag;if((3===u||4===u)&&((u=l.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;l=l.return}for(;null!==i;){if(null===(l=va(i)))return;if(5===(u=l.tag)||6===u){r=o=l;continue e}i=i.parentNode}}r=r.return}_e(function(){var r=o,a=Ee(t),l=[];e:{var i=Pr.get(e);if(void 0!==i){var u=st,c=e;switch(e){case"keypress":if(0===tt(t))break e;case"keydown":case"keyup":u=St;break;case"focusin":c="focus",u=ht;break;case"focusout":c="blur",u=ht;break;case"beforeblur":case"afterblur":u=ht;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=mt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=At;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Nt;break;case xr:case Sr:case jr:u=gt;break;case Nr:u=Pt;break;case"scroll":u=dt;break;case"wheel":u=Ot;break;case"copy":case"cut":case"paste":u=yt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=jt}var s=!!(4&n),f=!s&&"scroll"===e,d=s?null!==i?i+"Capture":null:i;s=[];for(var p,m=r;null!==m;){var A=(p=m).stateNode;if(5===p.tag&&null!==A&&(p=A,null!==d&&null!=(A=Oe(m,d))&&s.push(Gr(m,A,p))),f)break;m=m.return}0<s.length&&(i=new u(i,c,null,t,a),l.push({event:i,listeners:s}))}}if(!(7&n)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||t===be||!(c=t.relatedTarget||t.fromElement)||!va(c)&&!c[ma])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(c=(c=t.relatedTarget||t.toElement)?va(c):null)&&(c!==(f=We(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(s=mt,A="onMouseLeave",d="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(s=jt,A="onPointerLeave",d="onPointerEnter",m="pointer"),f=null==u?i:ba(u),p=null==c?i:ba(c),(i=new s(A,m+"leave",u,t,a)).target=f,i.relatedTarget=p,A=null,va(a)===r&&((s=new s(d,m+"enter",c,t,a)).target=p,s.relatedTarget=f,A=s),f=A,u&&c)e:{for(d=c,m=0,p=s=u;p;p=qr(p))m++;for(p=0,A=d;A;A=qr(A))p++;for(;0<m-p;)s=qr(s),m--;for(;0<p-m;)d=qr(d),p--;for(;m--;){if(s===d||null!==d&&s===d.alternate)break e;s=qr(s),d=qr(d)}s=null}else s=null;null!==u&&Yr(l,i,u,s,!1),null!==c&&null!==f&&Yr(l,f,c,s,!0)}if("select"===(u=(i=r?ba(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var h=Xt;else if(Vt(i))if(Kt)h=lr;else{h=ar;var g=rr}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(h=or);switch(h&&(h=h(e,r))?Gt(l,h,t,a):(g&&g(e,i,r),"focusout"===e&&(g=i._wrapperState)&&g.controlled&&"number"===i.type&&ee(i,"number",i.value)),g=r?ba(r):window,e){case"focusin":(Vt(g)||"true"===g.contentEditable)&&(hr=g,gr=r,vr=null);break;case"focusout":vr=gr=hr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,br(l,t,a);break;case"selectionchange":if(Ar)break;case"keydown":case"keyup":br(l,t,a)}var v;if(Tt)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Wt?Dt(e,t)&&(y="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(y="onCompositionStart");y&&(It&&"ko"!==t.locale&&(Wt||"onCompositionStart"!==y?"onCompositionEnd"===y&&Wt&&(v=nt()):(Jn="value"in(Zn=a)?Zn.value:Zn.textContent,Wt=!0)),0<(g=Hr(r,y)).length&&(y=new bt(y,e,null,t,a),l.push({event:y,listeners:g}),(v||null!==(v=Ut(t)))&&(y.data=v))),(v=Lt?function(e,n){switch(e){case"compositionend":return Ut(n);case"keypress":return 32!==n.which?null:(Mt=!0,Rt);case"textInput":return(e=n.data)===Rt&&Mt?null:e;default:return null}}(e,t):function(e,n){if(Wt)return"compositionend"===e||!Tt&&Dt(e,n)?(e=nt(),et=Jn=Zn=null,Wt=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return It&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(r=Hr(r,"onBeforeInput")).length&&(a=new bt("onBeforeInput","beforeinput",null,t,a),l.push({event:a,listeners:r}),a.data=v)}Rr(l,n)})}function Gr(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Hr(e,n){for(var t=n+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Oe(e,t))&&r.unshift(Gr(e,o,a)),null!=(o=Oe(e,n))&&r.push(Gr(e,o,a))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Yr(e,n,t,r,a){for(var o=n._reactName,l=[];null!==t&&t!==r;){var i=t,u=i.alternate,c=i.stateNode;if(null!==u&&u===r)break;5===i.tag&&null!==c&&(i=c,a?null!=(u=Oe(t,o))&&l.unshift(Gr(t,u,i)):a||null!=(u=Oe(t,o))&&l.push(Gr(t,u,i))),t=t.return}0!==l.length&&e.push({event:n,listeners:l})}var Qr=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function Kr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(Xr,"")}function Zr(e,n,t){if(n=Kr(n),Kr(e)!==n&&t)throw Error(o(425))}function Jr(){}var ea=null,na=null;function ta(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,la="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(ia)}:ra;function ia(e){setTimeout(function(){throw e})}function ua(e,n){var t=n,r=0;do{var a=t.nextSibling;if(e.removeChild(t),a&&8===a.nodeType)if("/$"===(t=a.data)){if(0===r)return e.removeChild(a),void $n(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=a}while(t);$n(n)}function ca(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n)break;if("/$"===n)return null}}return e}function sa(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var fa=Math.random().toString(36).slice(2),da="__reactFiber$"+fa,pa="__reactProps$"+fa,ma="__reactContainer$"+fa,Aa="__reactEvents$"+fa,ha="__reactListeners$"+fa,ga="__reactHandles$"+fa;function va(e){var n=e[da];if(n)return n;for(var t=e.parentNode;t;){if(n=t[ma]||t[da]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=sa(e);null!==e;){if(t=e[da])return t;e=sa(e)}return n}t=(e=t).parentNode}return null}function ya(e){return!(e=e[da]||e[ma])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ba(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function Ea(e){return e[pa]||null}var Ca=[],Ba=-1;function wa(e){return{current:e}}function ka(e){0>Ba||(e.current=Ca[Ba],Ca[Ba]=null,Ba--)}function xa(e,n){Ba++,Ca[Ba]=e.current,e.current=n}var Sa={},ja=wa(Sa),Na=wa(!1),Pa=Sa;function _a(e,n){var t=e.type.contextTypes;if(!t)return Sa;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in t)o[a]=n[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=o),o}function Oa(e){return null!=e.childContextTypes}function za(){ka(Na),ka(ja)}function Ta(e,n,t){if(ja.current!==Sa)throw Error(o(168));xa(ja,n),xa(Na,t)}function Fa(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var a in r=r.getChildContext())if(!(a in n))throw Error(o(108,$(e)||"Unknown",a));return I({},t,r)}function La(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Sa,Pa=ja.current,xa(ja,e),xa(Na,Na.current),!0}function Ia(e,n,t){var r=e.stateNode;if(!r)throw Error(o(169));t?(e=Fa(e,n,Pa),r.__reactInternalMemoizedMergedChildContext=e,ka(Na),ka(ja),xa(ja,e)):ka(Na),xa(Na,t)}var Ra=null,Ma=!1,Da=!1;function Ua(e){null===Ra?Ra=[e]:Ra.push(e)}function Wa(){if(!Da&&null!==Ra){Da=!0;var e=0,n=bn;try{var t=Ra;for(bn=1;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}Ra=null,Ma=!1}catch(n){throw null!==Ra&&(Ra=Ra.slice(e+1)),qe(Je,Wa),n}finally{bn=n,Da=!1}}return null}var $a=[],Va=0,Ga=null,Ha=0,qa=[],Ya=0,Qa=null,Xa=1,Ka="";function Za(e,n){$a[Va++]=Ha,$a[Va++]=Ga,Ga=e,Ha=n}function Ja(e,n,t){qa[Ya++]=Xa,qa[Ya++]=Ka,qa[Ya++]=Qa,Qa=e;var r=Xa;e=Ka;var a=32-ln(r)-1;r&=~(1<<a),t+=1;var o=32-ln(n)+a;if(30<o){var l=a-a%5;o=(r&(1<<l)-1).toString(32),r>>=l,a-=l,Xa=1<<32-ln(n)+a|t<<a|r,Ka=o+e}else Xa=1<<o|t<<a|r,Ka=e}function eo(e){null!==e.return&&(Za(e,1),Ja(e,1,0))}function no(e){for(;e===Ga;)Ga=$a[--Va],$a[Va]=null,Ha=$a[--Va],$a[Va]=null;for(;e===Qa;)Qa=qa[--Ya],qa[Ya]=null,Ka=qa[--Ya],qa[Ya]=null,Xa=qa[--Ya],qa[Ya]=null}var to=null,ro=null,ao=!1,oo=null;function lo(e,n){var t=_c(5,null,null,0);t.elementType="DELETED",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function io(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,to=e,ro=ca(n.firstChild),!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,to=e,ro=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(t=null!==Qa?{id:Xa,overflow:Ka}:null,e.memoizedState={dehydrated:n,treeContext:t,retryLane:1073741824},(t=_c(18,null,null,0)).stateNode=n,t.return=e,e.child=t,to=e,ro=null,!0);default:return!1}}function uo(e){return!(!(1&e.mode)||128&e.flags)}function co(e){if(ao){var n=ro;if(n){var t=n;if(!io(e,n)){if(uo(e))throw Error(o(418));n=ca(t.nextSibling);var r=to;n&&io(e,n)?lo(r,t):(e.flags=-4097&e.flags|2,ao=!1,to=e)}}else{if(uo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,to=e}}}function so(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;to=e}function fo(e){if(e!==to)return!1;if(!ao)return so(e),ao=!0,!1;var n;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n="head"!==(n=e.type)&&"body"!==n&&!ta(e.type,e.memoizedProps)),n&&(n=ro)){if(uo(e))throw po(),Error(o(418));for(;n;)lo(e,n),n=ca(n.nextSibling)}if(so(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){ro=ca(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}ro=null}}else ro=to?ca(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=ca(e.nextSibling)}function mo(){ro=to=null,ao=!1}function Ao(e){null===oo?oo=[e]:oo.push(e)}var ho=b.ReactCurrentBatchConfig;function go(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(o(309));var r=t.stateNode}if(!r)throw Error(o(147,e));var a=r,l=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===l?n.ref:(n=function(e){var n=a.refs;null===e?delete n[l]:n[l]=e},n._stringRef=l,n)}if("string"!=typeof e)throw Error(o(284));if(!t._owner)throw Error(o(290,e))}return e}function vo(e,n){throw e=Object.prototype.toString.call(n),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function yo(e){return(0,e._init)(e._payload)}function bo(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function a(e,n){return(e=zc(e,n)).index=0,e.sibling=null,e}function l(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function i(n){return e&&null===n.alternate&&(n.flags|=2),n}function u(e,n,t,r){return null===n||6!==n.tag?((n=Ic(t,e.mode,r)).return=e,n):((n=a(n,t)).return=e,n)}function c(e,n,t,r){var o=t.type;return o===B?f(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===O&&yo(o)===n.type)?((r=a(n,t.props)).ref=go(e,n,t),r.return=e,r):((r=Tc(t.type,t.key,t.props,null,e.mode,r)).ref=go(e,n,t),r.return=e,r)}function s(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Rc(t,e.mode,r)).return=e,n):((n=a(n,t.children||[])).return=e,n)}function f(e,n,t,r,o){return null===n||7!==n.tag?((n=Fc(t,e.mode,r,o)).return=e,n):((n=a(n,t)).return=e,n)}function d(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n)return(n=Ic(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return(t=Tc(n.type,n.key,n.props,null,e.mode,t)).ref=go(e,null,n),t.return=e,t;case C:return(n=Rc(n,e.mode,t)).return=e,n;case O:return d(e,(0,n._init)(n._payload),t)}if(ne(n)||F(n))return(n=Fc(n,e.mode,t,null)).return=e,n;vo(e,n)}return null}function p(e,n,t,r){var a=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==a?null:u(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return t.key===a?c(e,n,t,r):null;case C:return t.key===a?s(e,n,t,r):null;case O:return p(e,n,(a=t._init)(t._payload),r)}if(ne(t)||F(t))return null!==a?null:f(e,n,t,r,null);vo(e,t)}return null}function m(e,n,t,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(n,e=e.get(t)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return c(n,e=e.get(null===r.key?t:r.key)||null,r,a);case C:return s(n,e=e.get(null===r.key?t:r.key)||null,r,a);case O:return m(e,n,t,(0,r._init)(r._payload),a)}if(ne(r)||F(r))return f(n,e=e.get(t)||null,r,a,null);vo(n,r)}return null}function A(a,o,i,u){for(var c=null,s=null,f=o,A=o=0,h=null;null!==f&&A<i.length;A++){f.index>A?(h=f,f=null):h=f.sibling;var g=p(a,f,i[A],u);if(null===g){null===f&&(f=h);break}e&&f&&null===g.alternate&&n(a,f),o=l(g,o,A),null===s?c=g:s.sibling=g,s=g,f=h}if(A===i.length)return t(a,f),ao&&Za(a,A),c;if(null===f){for(;A<i.length;A++)null!==(f=d(a,i[A],u))&&(o=l(f,o,A),null===s?c=f:s.sibling=f,s=f);return ao&&Za(a,A),c}for(f=r(a,f);A<i.length;A++)null!==(h=m(f,a,A,i[A],u))&&(e&&null!==h.alternate&&f.delete(null===h.key?A:h.key),o=l(h,o,A),null===s?c=h:s.sibling=h,s=h);return e&&f.forEach(function(e){return n(a,e)}),ao&&Za(a,A),c}function h(a,i,u,c){var s=F(u);if("function"!=typeof s)throw Error(o(150));if(null==(u=s.call(u)))throw Error(o(151));for(var f=s=null,A=i,h=i=0,g=null,v=u.next();null!==A&&!v.done;h++,v=u.next()){A.index>h?(g=A,A=null):g=A.sibling;var y=p(a,A,v.value,c);if(null===y){null===A&&(A=g);break}e&&A&&null===y.alternate&&n(a,A),i=l(y,i,h),null===f?s=y:f.sibling=y,f=y,A=g}if(v.done)return t(a,A),ao&&Za(a,h),s;if(null===A){for(;!v.done;h++,v=u.next())null!==(v=d(a,v.value,c))&&(i=l(v,i,h),null===f?s=v:f.sibling=v,f=v);return ao&&Za(a,h),s}for(A=r(a,A);!v.done;h++,v=u.next())null!==(v=m(A,a,h,v.value,c))&&(e&&null!==v.alternate&&A.delete(null===v.key?h:v.key),i=l(v,i,h),null===f?s=v:f.sibling=v,f=v);return e&&A.forEach(function(e){return n(a,e)}),ao&&Za(a,h),s}return function e(r,o,l,u){if("object"==typeof l&&null!==l&&l.type===B&&null===l.key&&(l=l.props.children),"object"==typeof l&&null!==l){switch(l.$$typeof){case E:e:{for(var c=l.key,s=o;null!==s;){if(s.key===c){if((c=l.type)===B){if(7===s.tag){t(r,s.sibling),(o=a(s,l.props.children)).return=r,r=o;break e}}else if(s.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===O&&yo(c)===s.type){t(r,s.sibling),(o=a(s,l.props)).ref=go(r,s,l),o.return=r,r=o;break e}t(r,s);break}n(r,s),s=s.sibling}l.type===B?((o=Fc(l.props.children,r.mode,u,l.key)).return=r,r=o):((u=Tc(l.type,l.key,l.props,null,r.mode,u)).ref=go(r,o,l),u.return=r,r=u)}return i(r);case C:e:{for(s=l.key;null!==o;){if(o.key===s){if(4===o.tag&&o.stateNode.containerInfo===l.containerInfo&&o.stateNode.implementation===l.implementation){t(r,o.sibling),(o=a(o,l.children||[])).return=r,r=o;break e}t(r,o);break}n(r,o),o=o.sibling}(o=Rc(l,r.mode,u)).return=r,r=o}return i(r);case O:return e(r,o,(s=l._init)(l._payload),u)}if(ne(l))return A(r,o,l,u);if(F(l))return h(r,o,l,u);vo(r,l)}return"string"==typeof l&&""!==l||"number"==typeof l?(l=""+l,null!==o&&6===o.tag?(t(r,o.sibling),(o=a(o,l)).return=r,r=o):(t(r,o),(o=Ic(l,r.mode,u)).return=r,r=o),i(r)):t(r,o)}}var Eo=bo(!0),Co=bo(!1),Bo=wa(null),wo=null,ko=null,xo=null;function So(){xo=ko=wo=null}function jo(e){var n=Bo.current;ka(Bo),e._currentValue=n}function No(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function Po(e,n){wo=e,xo=ko=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!==(e.lanes&n)&&(yi=!0),e.firstContext=null)}function _o(e){var n=e._currentValue;if(xo!==e)if(e={context:e,memoizedValue:n,next:null},null===ko){if(null===wo)throw Error(o(308));ko=e,wo.dependencies={lanes:0,firstContext:e}}else ko=ko.next=e;return n}var Oo=null;function zo(e){null===Oo?Oo=[e]:Oo.push(e)}function To(e,n,t,r){var a=n.interleaved;return null===a?(t.next=t,zo(n)):(t.next=a.next,a.next=t),n.interleaved=t,Fo(e,r)}function Fo(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var Lo=!1;function Io(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ro(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Mo(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function Do(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&ju){var a=r.pending;return null===a?n.next=n:(n.next=a.next,a.next=n),r.pending=n,Fo(e,t)}return null===(a=r.interleaved)?(n.next=n,zo(r)):(n.next=a.next,a.next=n),r.interleaved=n,Fo(e,t)}function Uo(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,4194240&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,yn(e,t)}}function Wo(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var a=null,o=null;if(null!==(t=t.firstBaseUpdate)){do{var l={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===o?a=o=l:o=o.next=l,t=t.next}while(null!==t);null===o?a=o=n:o=o.next=n}else a=o=n;return t={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function $o(e,n,t,r){var a=e.updateQueue;Lo=!1;var o=a.firstBaseUpdate,l=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,c=u.next;u.next=null,null===l?o=c:l.next=c,l=u;var s=e.alternate;null!==s&&(i=(s=s.updateQueue).lastBaseUpdate)!==l&&(null===i?s.firstBaseUpdate=c:i.next=c,s.lastBaseUpdate=u)}if(null!==o){var f=a.baseState;for(l=0,s=c=u=null,i=o;;){var d=i.lane,p=i.eventTime;if((r&d)===d){null!==s&&(s=s.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var m=e,A=i;switch(d=n,p=t,A.tag){case 1:if("function"==typeof(m=A.payload)){f=m.call(p,f,d);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(d="function"==typeof(m=A.payload)?m.call(p,f,d):m))break e;f=I({},f,d);break e;case 2:Lo=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[i]:d.push(i))}else p={eventTime:p,lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===s?(c=s=p,u=f):s=s.next=p,l|=d;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(d=i).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===s&&(u=f),a.baseState=u,a.firstBaseUpdate=c,a.lastBaseUpdate=s,null!==(n=a.shared.interleaved)){a=n;do{l|=a.lane,a=a.next}while(a!==n)}else null===o&&(a.shared.lanes=0);Lu|=l,e.lanes=l,e.memoizedState=f}}function Vo(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],a=r.callback;if(null!==a){if(r.callback=null,r=t,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Go={},Ho=wa(Go),qo=wa(Go),Yo=wa(Go);function Qo(e){if(e===Go)throw Error(o(174));return e}function Xo(e,n){switch(xa(Yo,n),xa(qo,e),xa(Ho,Go),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:ue(null,"");break;default:n=ue(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}ka(Ho),xa(Ho,n)}function Ko(){ka(Ho),ka(qo),ka(Yo)}function Zo(e){Qo(Yo.current);var n=Qo(Ho.current),t=ue(n,e.type);n!==t&&(xa(qo,e),xa(Ho,t))}function Jo(e){qo.current===e&&(ka(Ho),ka(qo))}var el=wa(0);function nl(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(128&n.flags)return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var tl=[];function rl(){for(var e=0;e<tl.length;e++)tl[e]._workInProgressVersionPrimary=null;tl.length=0}var al=b.ReactCurrentDispatcher,ol=b.ReactCurrentBatchConfig,ll=0,il=null,ul=null,cl=null,sl=!1,fl=!1,dl=0,pl=0;function ml(){throw Error(o(321))}function Al(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!ir(e[t],n[t]))return!1;return!0}function hl(e,n,t,r,a,l){if(ll=l,il=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,al.current=null===e||null===e.memoizedState?Jl:ei,e=t(r,a),fl){l=0;do{if(fl=!1,dl=0,25<=l)throw Error(o(301));l+=1,cl=ul=null,n.updateQueue=null,al.current=ni,e=t(r,a)}while(fl)}if(al.current=Zl,n=null!==ul&&null!==ul.next,ll=0,cl=ul=il=null,sl=!1,n)throw Error(o(300));return e}function gl(){var e=0!==dl;return dl=0,e}function vl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===cl?il.memoizedState=cl=e:cl=cl.next=e,cl}function yl(){if(null===ul){var e=il.alternate;e=null!==e?e.memoizedState:null}else e=ul.next;var n=null===cl?il.memoizedState:cl.next;if(null!==n)cl=n,ul=e;else{if(null===e)throw Error(o(310));e={memoizedState:(ul=e).memoizedState,baseState:ul.baseState,baseQueue:ul.baseQueue,queue:ul.queue,next:null},null===cl?il.memoizedState=cl=e:cl=cl.next=e}return cl}function bl(e,n){return"function"==typeof n?n(e):n}function El(e){var n=yl(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=ul,a=r.baseQueue,l=t.pending;if(null!==l){if(null!==a){var i=a.next;a.next=l.next,l.next=i}r.baseQueue=a=l,t.pending=null}if(null!==a){l=a.next,r=r.baseState;var u=i=null,c=null,s=l;do{var f=s.lane;if((ll&f)===f)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var d={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(u=c=d,i=r):c=c.next=d,il.lanes|=f,Lu|=f}s=s.next}while(null!==s&&s!==l);null===c?i=r:c.next=u,ir(r,n.memoizedState)||(yi=!0),n.memoizedState=r,n.baseState=i,n.baseQueue=c,t.lastRenderedState=r}if(null!==(e=t.interleaved)){a=e;do{l=a.lane,il.lanes|=l,Lu|=l,a=a.next}while(a!==e)}else null===a&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function Cl(e){var n=yl(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=t.dispatch,a=t.pending,l=n.memoizedState;if(null!==a){t.pending=null;var i=a=a.next;do{l=e(l,i.action),i=i.next}while(i!==a);ir(l,n.memoizedState)||(yi=!0),n.memoizedState=l,null===n.baseQueue&&(n.baseState=l),t.lastRenderedState=l}return[l,r]}function Bl(){}function wl(e,n){var t=il,r=yl(),a=n(),l=!ir(r.memoizedState,a);if(l&&(r.memoizedState=a,yi=!0),r=r.queue,Ll(Sl.bind(null,t,r,e),[e]),r.getSnapshot!==n||l||null!==cl&&1&cl.memoizedState.tag){if(t.flags|=2048,_l(9,xl.bind(null,t,r,a,n),void 0,null),null===Nu)throw Error(o(349));30&ll||kl(t,n,a)}return a}function kl(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=il.updateQueue)?(n={lastEffect:null,stores:null},il.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function xl(e,n,t,r){n.value=t,n.getSnapshot=r,jl(n)&&Nl(e)}function Sl(e,n,t){return t(function(){jl(n)&&Nl(e)})}function jl(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!ir(e,t)}catch(e){return!0}}function Nl(e){var n=Fo(e,1);null!==n&&tc(n,e,1,-1)}function Pl(e){var n=vl();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:bl,lastRenderedState:e},n.queue=e,e=e.dispatch=Yl.bind(null,il,e),[n.memoizedState,e]}function _l(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=il.updateQueue)?(n={lastEffect:null,stores:null},il.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function Ol(){return yl().memoizedState}function zl(e,n,t,r){var a=vl();il.flags|=e,a.memoizedState=_l(1|n,t,void 0,void 0===r?null:r)}function Tl(e,n,t,r){var a=yl();r=void 0===r?null:r;var o=void 0;if(null!==ul){var l=ul.memoizedState;if(o=l.destroy,null!==r&&Al(r,l.deps))return void(a.memoizedState=_l(n,t,o,r))}il.flags|=e,a.memoizedState=_l(1|n,t,o,r)}function Fl(e,n){return zl(8390656,8,e,n)}function Ll(e,n){return Tl(2048,8,e,n)}function Il(e,n){return Tl(4,2,e,n)}function Rl(e,n){return Tl(4,4,e,n)}function Ml(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function Dl(e,n,t){return t=null!=t?t.concat([e]):null,Tl(4,4,Ml.bind(null,n,e),t)}function Ul(){}function Wl(e,n){var t=yl();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&Al(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function $l(e,n){var t=yl();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&Al(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Vl(e,n,t){return 21&ll?(ir(t,n)||(t=hn(),il.lanes|=t,Lu|=t,e.baseState=!0),n):(e.baseState&&(e.baseState=!1,yi=!0),e.memoizedState=t)}function Gl(e,n){var t=bn;bn=0!==t&&4>t?t:4,e(!0);var r=ol.transition;ol.transition={};try{e(!1),n()}finally{bn=t,ol.transition=r}}function Hl(){return yl().memoizedState}function ql(e,n,t){var r=nc(e);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},Ql(e)?Xl(n,t):null!==(t=To(e,n,t,r))&&(tc(t,e,r,ec()),Kl(t,n,r))}function Yl(e,n,t){var r=nc(e),a={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(Ql(e))Xl(n,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=n.lastRenderedReducer))try{var l=n.lastRenderedState,i=o(l,t);if(a.hasEagerState=!0,a.eagerState=i,ir(i,l)){var u=n.interleaved;return null===u?(a.next=a,zo(n)):(a.next=u.next,u.next=a),void(n.interleaved=a)}}catch(e){}null!==(t=To(e,n,a,r))&&(tc(t,e,r,a=ec()),Kl(t,n,r))}}function Ql(e){var n=e.alternate;return e===il||null!==n&&n===il}function Xl(e,n){fl=sl=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function Kl(e,n,t){if(4194240&t){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,yn(e,t)}}var Zl={readContext:_o,useCallback:ml,useContext:ml,useEffect:ml,useImperativeHandle:ml,useInsertionEffect:ml,useLayoutEffect:ml,useMemo:ml,useReducer:ml,useRef:ml,useState:ml,useDebugValue:ml,useDeferredValue:ml,useTransition:ml,useMutableSource:ml,useSyncExternalStore:ml,useId:ml,unstable_isNewReconciler:!1},Jl={readContext:_o,useCallback:function(e,n){return vl().memoizedState=[e,void 0===n?null:n],e},useContext:_o,useEffect:Fl,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,zl(4194308,4,Ml.bind(null,n,e),t)},useLayoutEffect:function(e,n){return zl(4194308,4,e,n)},useInsertionEffect:function(e,n){return zl(4,2,e,n)},useMemo:function(e,n){var t=vl();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=vl();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},r.queue=e,e=e.dispatch=ql.bind(null,il,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},vl().memoizedState=e},useState:Pl,useDebugValue:Ul,useDeferredValue:function(e){return vl().memoizedState=e},useTransition:function(){var e=Pl(!1),n=e[0];return e=Gl.bind(null,e[1]),vl().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=il,a=vl();if(ao){if(void 0===t)throw Error(o(407));t=t()}else{if(t=n(),null===Nu)throw Error(o(349));30&ll||kl(r,n,t)}a.memoizedState=t;var l={value:t,getSnapshot:n};return a.queue=l,Fl(Sl.bind(null,r,l,e),[e]),r.flags|=2048,_l(9,xl.bind(null,r,l,t,n),void 0,null),t},useId:function(){var e=vl(),n=Nu.identifierPrefix;if(ao){var t=Ka;n=":"+n+"R"+(t=(Xa&~(1<<32-ln(Xa)-1)).toString(32)+t),0<(t=dl++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=pl++).toString(32)+":";return e.memoizedState=n},unstable_isNewReconciler:!1},ei={readContext:_o,useCallback:Wl,useContext:_o,useEffect:Ll,useImperativeHandle:Dl,useInsertionEffect:Il,useLayoutEffect:Rl,useMemo:$l,useReducer:El,useRef:Ol,useState:function(){return El(bl)},useDebugValue:Ul,useDeferredValue:function(e){return Vl(yl(),ul.memoizedState,e)},useTransition:function(){return[El(bl)[0],yl().memoizedState]},useMutableSource:Bl,useSyncExternalStore:wl,useId:Hl,unstable_isNewReconciler:!1},ni={readContext:_o,useCallback:Wl,useContext:_o,useEffect:Ll,useImperativeHandle:Dl,useInsertionEffect:Il,useLayoutEffect:Rl,useMemo:$l,useReducer:Cl,useRef:Ol,useState:function(){return Cl(bl)},useDebugValue:Ul,useDeferredValue:function(e){var n=yl();return null===ul?n.memoizedState=e:Vl(n,ul.memoizedState,e)},useTransition:function(){return[Cl(bl)[0],yl().memoizedState]},useMutableSource:Bl,useSyncExternalStore:wl,useId:Hl,unstable_isNewReconciler:!1};function ti(e,n){if(e&&e.defaultProps){for(var t in n=I({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}function ri(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:I({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var ai={isMounted:function(e){return!!(e=e._reactInternals)&&We(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=ec(),a=nc(e),o=Mo(r,a);o.payload=n,null!=t&&(o.callback=t),null!==(n=Do(e,o,a))&&(tc(n,e,a,r),Uo(n,e,a))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=ec(),a=nc(e),o=Mo(r,a);o.tag=1,o.payload=n,null!=t&&(o.callback=t),null!==(n=Do(e,o,a))&&(tc(n,e,a,r),Uo(n,e,a))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=ec(),r=nc(e),a=Mo(t,r);a.tag=2,null!=n&&(a.callback=n),null!==(n=Do(e,a,r))&&(tc(n,e,r,t),Uo(n,e,r))}};function oi(e,n,t,r,a,o,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,l):!(n.prototype&&n.prototype.isPureReactComponent&&ur(t,r)&&ur(a,o))}function li(e,n,t){var r=!1,a=Sa,o=n.contextType;return"object"==typeof o&&null!==o?o=_o(o):(a=Oa(n)?Pa:ja.current,o=(r=null!=(r=n.contextTypes))?_a(e,a):Sa),n=new n(t,o),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=ai,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),n}function ii(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&ai.enqueueReplaceState(n,n.state,null)}function ui(e,n,t,r){var a=e.stateNode;a.props=t,a.state=e.memoizedState,a.refs={},Io(e);var o=n.contextType;"object"==typeof o&&null!==o?a.context=_o(o):(o=Oa(n)?Pa:ja.current,a.context=_a(e,o)),a.state=e.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(ri(e,n,o,t),a.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(n=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),n!==a.state&&ai.enqueueReplaceState(a,a.state,null),$o(e,t,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function ci(e,n){try{var t="",r=n;do{t+=U(r),r=r.return}while(r);var a=t}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:a,digest:null}}function si(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function fi(e,n){try{console.error(n.value)}catch(e){setTimeout(function(){throw e})}}var di="function"==typeof WeakMap?WeakMap:Map;function pi(e,n,t){(t=Mo(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){Vu||(Vu=!0,Gu=r),fi(0,n)},t}function mi(e,n,t){(t=Mo(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=n.value;t.payload=function(){return r(a)},t.callback=function(){fi(0,n)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(t.callback=function(){fi(0,n),"function"!=typeof r&&(null===Hu?Hu=new Set([this]):Hu.add(this));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}function Ai(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new di;var a=new Set;r.set(n,a)}else void 0===(a=r.get(n))&&(a=new Set,r.set(n,a));a.has(t)||(a.add(t),e=kc.bind(null,e,n,t),n.then(e,e))}function hi(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function gi(e,n,t,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=Mo(-1,1)).tag=2,Do(t,n,1))),t.lanes|=1),e)}var vi=b.ReactCurrentOwner,yi=!1;function bi(e,n,t,r){n.child=null===e?Co(n,null,t,r):Eo(n,e.child,t,r)}function Ei(e,n,t,r,a){t=t.render;var o=n.ref;return Po(n,a),r=hl(e,n,t,r,o,a),t=gl(),null===e||yi?(ao&&t&&eo(n),n.flags|=1,bi(e,n,r,a),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~a,Vi(e,n,a))}function Ci(e,n,t,r,a){if(null===e){var o=t.type;return"function"!=typeof o||Oc(o)||void 0!==o.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=Tc(t.type,null,r,n,n.mode,a)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=o,Bi(e,n,o,r,a))}if(o=e.child,0===(e.lanes&a)){var l=o.memoizedProps;if((t=null!==(t=t.compare)?t:ur)(l,r)&&e.ref===n.ref)return Vi(e,n,a)}return n.flags|=1,(e=zc(o,r)).ref=n.ref,e.return=n,n.child=e}function Bi(e,n,t,r,a){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===n.ref){if(yi=!1,n.pendingProps=r=o,0===(e.lanes&a))return n.lanes=e.lanes,Vi(e,n,a);131072&e.flags&&(yi=!0)}}return xi(e,n,t,r,a)}function wi(e,n,t){var r=n.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&n.mode){if(!(1073741824&t))return e=null!==o?o.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,xa(zu,Ou),Ou|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:t,xa(zu,Ou),Ou|=r}else n.memoizedState={baseLanes:0,cachePool:null,transitions:null},xa(zu,Ou),Ou|=t;else null!==o?(r=o.baseLanes|t,n.memoizedState=null):r=t,xa(zu,Ou),Ou|=r;return bi(e,n,a,t),n.child}function ki(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function xi(e,n,t,r,a){var o=Oa(t)?Pa:ja.current;return o=_a(n,o),Po(n,a),t=hl(e,n,t,r,o,a),r=gl(),null===e||yi?(ao&&r&&eo(n),n.flags|=1,bi(e,n,t,a),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~a,Vi(e,n,a))}function Si(e,n,t,r,a){if(Oa(t)){var o=!0;La(n)}else o=!1;if(Po(n,a),null===n.stateNode)$i(e,n),li(n,t,r),ui(n,t,r,a),r=!0;else if(null===e){var l=n.stateNode,i=n.memoizedProps;l.props=i;var u=l.context,c=t.contextType;c="object"==typeof c&&null!==c?_o(c):_a(n,c=Oa(t)?Pa:ja.current);var s=t.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof l.getSnapshotBeforeUpdate;f||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==r||u!==c)&&ii(n,l,r,c),Lo=!1;var d=n.memoizedState;l.state=d,$o(n,r,l,a),u=n.memoizedState,i!==r||d!==u||Na.current||Lo?("function"==typeof s&&(ri(n,t,s,r),u=n.memoizedState),(i=Lo||oi(n,t,i,r,d,u,c))?(f||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(n.flags|=4194308)):("function"==typeof l.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=u),l.props=r,l.state=u,l.context=c,r=i):("function"==typeof l.componentDidMount&&(n.flags|=4194308),r=!1)}else{l=n.stateNode,Ro(e,n),i=n.memoizedProps,c=n.type===n.elementType?i:ti(n.type,i),l.props=c,f=n.pendingProps,d=l.context,u="object"==typeof(u=t.contextType)&&null!==u?_o(u):_a(n,u=Oa(t)?Pa:ja.current);var p=t.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==f||d!==u)&&ii(n,l,r,u),Lo=!1,d=n.memoizedState,l.state=d,$o(n,r,l,a);var m=n.memoizedState;i!==f||d!==m||Na.current||Lo?("function"==typeof p&&(ri(n,t,p,r),m=n.memoizedState),(c=Lo||oi(n,t,c,r,d,m,u)||!1)?(s||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,m,u),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof l.componentDidUpdate&&(n.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=m),l.props=r,l.state=m,l.context=u,r=c):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),r=!1)}return ji(e,n,t,r,o,a)}function ji(e,n,t,r,a,o){ki(e,n);var l=!!(128&n.flags);if(!r&&!l)return a&&Ia(n,t,!1),Vi(e,n,o);r=n.stateNode,vi.current=n;var i=l&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&l?(n.child=Eo(n,e.child,null,o),n.child=Eo(n,null,i,o)):bi(e,n,i,o),n.memoizedState=r.state,a&&Ia(n,t,!0),n.child}function Ni(e){var n=e.stateNode;n.pendingContext?Ta(0,n.pendingContext,n.pendingContext!==n.context):n.context&&Ta(0,n.context,!1),Xo(e,n.containerInfo)}function Pi(e,n,t,r,a){return mo(),Ao(a),n.flags|=256,bi(e,n,t,r),n.child}var _i,Oi,zi,Ti,Fi={dehydrated:null,treeContext:null,retryLane:0};function Li(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ii(e,n,t){var r,a=n.pendingProps,l=el.current,i=!1,u=!!(128&n.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&!!(2&l)),r?(i=!0,n.flags&=-129):null!==e&&null===e.memoizedState||(l|=1),xa(el,1&l),null===e)return co(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)?(1&n.mode?"$!"===e.data?n.lanes=8:n.lanes=1073741824:n.lanes=1,null):(u=a.children,e=a.fallback,i?(a=n.mode,i=n.child,u={mode:"hidden",children:u},1&a||null===i?i=Lc(u,a,0,null):(i.childLanes=0,i.pendingProps=u),e=Fc(e,a,t,null),i.return=n,e.return=n,i.sibling=e,n.child=i,n.child.memoizedState=Li(t),n.memoizedState=Fi,e):Ri(n,u));if(null!==(l=e.memoizedState)&&null!==(r=l.dehydrated))return function(e,n,t,r,a,l,i){if(t)return 256&n.flags?(n.flags&=-257,Mi(e,n,i,r=si(Error(o(422))))):null!==n.memoizedState?(n.child=e.child,n.flags|=128,null):(l=r.fallback,a=n.mode,r=Lc({mode:"visible",children:r.children},a,0,null),(l=Fc(l,a,i,null)).flags|=2,r.return=n,l.return=n,r.sibling=l,n.child=r,1&n.mode&&Eo(n,e.child,null,i),n.child.memoizedState=Li(i),n.memoizedState=Fi,l);if(!(1&n.mode))return Mi(e,n,i,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var u=r.dgst;return r=u,Mi(e,n,i,r=si(l=Error(o(419)),r,void 0))}if(u=0!==(i&e.childLanes),yi||u){if(null!==(r=Nu)){switch(i&-i){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!==(a&(r.suspendedLanes|i))?0:a)&&a!==l.retryLane&&(l.retryLane=a,Fo(e,a),tc(r,e,a,-1))}return Ac(),Mi(e,n,i,r=si(Error(o(421))))}return"$?"===a.data?(n.flags|=128,n.child=e.child,n=Sc.bind(null,e),a._reactRetry=n,null):(e=l.treeContext,ro=ca(a.nextSibling),to=n,ao=!0,oo=null,null!==e&&(qa[Ya++]=Xa,qa[Ya++]=Ka,qa[Ya++]=Qa,Xa=e.id,Ka=e.overflow,Qa=n),(n=Ri(n,r.children)).flags|=4096,n)}(e,n,u,a,r,l,t);if(i){i=a.fallback,u=n.mode,r=(l=e.child).sibling;var c={mode:"hidden",children:a.children};return 1&u||n.child===l?(a=zc(l,c)).subtreeFlags=14680064&l.subtreeFlags:((a=n.child).childLanes=0,a.pendingProps=c,n.deletions=null),null!==r?i=zc(r,i):(i=Fc(i,u,t,null)).flags|=2,i.return=n,a.return=n,a.sibling=i,n.child=a,a=i,i=n.child,u=null===(u=e.child.memoizedState)?Li(t):{baseLanes:u.baseLanes|t,cachePool:null,transitions:u.transitions},i.memoizedState=u,i.childLanes=e.childLanes&~t,n.memoizedState=Fi,a}return e=(i=e.child).sibling,a=zc(i,{mode:"visible",children:a.children}),!(1&n.mode)&&(a.lanes=t),a.return=n,a.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=a,n.memoizedState=null,a}function Ri(e,n){return(n=Lc({mode:"visible",children:n},e.mode,0,null)).return=e,e.child=n}function Mi(e,n,t,r){return null!==r&&Ao(r),Eo(n,e.child,null,t),(e=Ri(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function Di(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),No(e.return,n,t)}function Ui(e,n,t,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:a}:(o.isBackwards=n,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=t,o.tailMode=a)}function Wi(e,n,t){var r=n.pendingProps,a=r.revealOrder,o=r.tail;if(bi(e,n,r.children,t),2&(r=el.current))r=1&r|2,n.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Di(e,t,n);else if(19===e.tag)Di(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(xa(el,r),1&n.mode)switch(a){case"forwards":for(t=n.child,a=null;null!==t;)null!==(e=t.alternate)&&null===nl(e)&&(a=t),t=t.sibling;null===(t=a)?(a=n.child,n.child=null):(a=t.sibling,t.sibling=null),Ui(n,!1,a,t,o);break;case"backwards":for(t=null,a=n.child,n.child=null;null!==a;){if(null!==(e=a.alternate)&&null===nl(e)){n.child=a;break}e=a.sibling,a.sibling=t,t=a,a=e}Ui(n,!0,t,null,o);break;case"together":Ui(n,!1,null,null,void 0);break;default:n.memoizedState=null}else n.memoizedState=null;return n.child}function $i(e,n){!(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function Vi(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),Lu|=n.lanes,0===(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(o(153));if(null!==n.child){for(t=zc(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=zc(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Gi(e,n){if(!ao)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Hi(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var a=e.child;null!==a;)t|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)t|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function qi(e,n,t){var r=n.pendingProps;switch(no(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Hi(n),null;case 1:case 17:return Oa(n.type)&&za(),Hi(n),null;case 3:return r=n.stateNode,Ko(),ka(Na),ka(ja),rl(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&n.flags)||(n.flags|=1024,null!==oo&&(lc(oo),oo=null))),Oi(e,n),Hi(n),null;case 5:Jo(n);var a=Qo(Yo.current);if(t=n.type,null!==e&&null!=n.stateNode)zi(e,n,t,r,a),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(o(166));return Hi(n),null}if(e=Qo(Ho.current),fo(n)){r=n.stateNode,t=n.type;var l=n.memoizedProps;switch(r[da]=n,r[pa]=l,e=!!(1&n.mode),t){case"dialog":Mr("cancel",r),Mr("close",r);break;case"iframe":case"object":case"embed":Mr("load",r);break;case"video":case"audio":for(a=0;a<Fr.length;a++)Mr(Fr[a],r);break;case"source":Mr("error",r);break;case"img":case"image":case"link":Mr("error",r),Mr("load",r);break;case"details":Mr("toggle",r);break;case"input":X(r,l),Mr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Mr("invalid",r);break;case"textarea":ae(r,l),Mr("invalid",r)}for(var u in ve(t,l),a=null,l)if(l.hasOwnProperty(u)){var c=l[u];"children"===u?"string"==typeof c?r.textContent!==c&&(!0!==l.suppressHydrationWarning&&Zr(r.textContent,c,e),a=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==l.suppressHydrationWarning&&Zr(r.textContent,c,e),a=["children",""+c]):i.hasOwnProperty(u)&&null!=c&&"onScroll"===u&&Mr("scroll",r)}switch(t){case"input":H(r),J(r,l,!0);break;case"textarea":H(r),le(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Jr)}r=a,n.updateQueue=r,null!==r&&(n.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(t)),"http://www.w3.org/1999/xhtml"===e?"script"===t?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(t,{is:r.is}):(e=u.createElement(t),"select"===t&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,t),e[da]=n,e[pa]=r,_i(e,n,!1,!1),n.stateNode=e;e:{switch(u=ye(t,r),t){case"dialog":Mr("cancel",e),Mr("close",e),a=r;break;case"iframe":case"object":case"embed":Mr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Fr.length;a++)Mr(Fr[a],e);a=r;break;case"source":Mr("error",e),a=r;break;case"img":case"image":case"link":Mr("error",e),Mr("load",e),a=r;break;case"details":Mr("toggle",e),a=r;break;case"input":X(e,r),a=Q(e,r),Mr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=I({},r,{value:void 0}),Mr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Mr("invalid",e)}for(l in ve(t,a),c=a)if(c.hasOwnProperty(l)){var s=c[l];"style"===l?he(e,s):"dangerouslySetInnerHTML"===l?null!=(s=s?s.__html:void 0)&&fe(e,s):"children"===l?"string"==typeof s?("textarea"!==t||""!==s)&&de(e,s):"number"==typeof s&&de(e,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(i.hasOwnProperty(l)?null!=s&&"onScroll"===l&&Mr("scroll",e):null!=s&&y(e,l,s,u))}switch(t){case"input":H(e),J(e,r,!1);break;case"textarea":H(e),le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?te(e,!!r.multiple,l,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return Hi(n),null;case 6:if(e&&null!=n.stateNode)Ti(e,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(o(166));if(t=Qo(Yo.current),Qo(Ho.current),fo(n)){if(r=n.stateNode,t=n.memoizedProps,r[da]=n,(l=r.nodeValue!==t)&&null!==(e=to))switch(e.tag){case 3:Zr(r.nodeValue,t,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,t,!!(1&e.mode))}l&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[da]=n,n.stateNode=r}return Hi(n),null;case 13:if(ka(el),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&1&n.mode&&!(128&n.flags))po(),mo(),n.flags|=98560,l=!1;else if(l=fo(n),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(o(318));if(!(l=null!==(l=n.memoizedState)?l.dehydrated:null))throw Error(o(317));l[da]=n}else mo(),!(128&n.flags)&&(n.memoizedState=null),n.flags|=4;Hi(n),l=!1}else null!==oo&&(lc(oo),oo=null),l=!0;if(!l)return 65536&n.flags?n:null}return 128&n.flags?(n.lanes=t,n):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,1&n.mode&&(null===e||1&el.current?0===Tu&&(Tu=3):Ac())),null!==n.updateQueue&&(n.flags|=4),Hi(n),null);case 4:return Ko(),Oi(e,n),null===e&&Wr(n.stateNode.containerInfo),Hi(n),null;case 10:return jo(n.type._context),Hi(n),null;case 19:if(ka(el),null===(l=n.memoizedState))return Hi(n),null;if(r=!!(128&n.flags),null===(u=l.rendering))if(r)Gi(l,!1);else{if(0!==Tu||null!==e&&128&e.flags)for(e=n.child;null!==e;){if(null!==(u=nl(e))){for(n.flags|=128,Gi(l,!1),null!==(r=u.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)e=r,(l=t).flags&=14680066,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return xa(el,1&el.current|2),n.child}e=e.sibling}null!==l.tail&&Ke()>Wu&&(n.flags|=128,r=!0,Gi(l,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=nl(u))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),Gi(l,!0),null===l.tail&&"hidden"===l.tailMode&&!u.alternate&&!ao)return Hi(n),null}else 2*Ke()-l.renderingStartTime>Wu&&1073741824!==t&&(n.flags|=128,r=!0,Gi(l,!1),n.lanes=4194304);l.isBackwards?(u.sibling=n.child,n.child=u):(null!==(t=l.last)?t.sibling=u:n.child=u,l.last=u)}return null!==l.tail?(n=l.tail,l.rendering=n,l.tail=n.sibling,l.renderingStartTime=Ke(),n.sibling=null,t=el.current,xa(el,r?1&t|2:1&t),n):(Hi(n),null);case 22:case 23:return fc(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&1&n.mode?!!(1073741824&Ou)&&(Hi(n),6&n.subtreeFlags&&(n.flags|=8192)):Hi(n),null;case 24:case 25:return null}throw Error(o(156,n.tag))}function Yi(e,n){switch(no(n),n.tag){case 1:return Oa(n.type)&&za(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return Ko(),ka(Na),ka(ja),rl(),65536&(e=n.flags)&&!(128&e)?(n.flags=-65537&e|128,n):null;case 5:return Jo(n),null;case 13:if(ka(el),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(o(340));mo()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return ka(el),null;case 4:return Ko(),null;case 10:return jo(n.type._context),null;case 22:case 23:return fc(),null;default:return null}}_i=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},Oi=function(){},zi=function(e,n,t,r){var a=e.memoizedProps;if(a!==r){e=n.stateNode,Qo(Ho.current);var o,l=null;switch(t){case"input":a=Q(e,a),r=Q(e,r),l=[];break;case"select":a=I({},a,{value:void 0}),r=I({},r,{value:void 0}),l=[];break;case"textarea":a=re(e,a),r=re(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(s in ve(t,r),t=null,a)if(!r.hasOwnProperty(s)&&a.hasOwnProperty(s)&&null!=a[s])if("style"===s){var u=a[s];for(o in u)u.hasOwnProperty(o)&&(t||(t={}),t[o]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(i.hasOwnProperty(s)?l||(l=[]):(l=l||[]).push(s,null));for(s in r){var c=r[s];if(u=null!=a?a[s]:void 0,r.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(o in u)!u.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(t||(t={}),t[o]="");for(o in c)c.hasOwnProperty(o)&&u[o]!==c[o]&&(t||(t={}),t[o]=c[o])}else t||(l||(l=[]),l.push(s,t)),t=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(l=l||[]).push(s,c)):"children"===s?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(i.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&Mr("scroll",e),l||u===c||(l=[])):(l=l||[]).push(s,c))}t&&(l=l||[]).push("style",t);var s=l;(n.updateQueue=s)&&(n.flags|=4)}},Ti=function(e,n,t,r){t!==r&&(n.flags|=4)};var Qi=!1,Xi=!1,Ki="function"==typeof WeakSet?WeakSet:Set,Zi=null;function Ji(e,n){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){wc(e,n,t)}else t.current=null}function eu(e,n,t){try{t()}catch(t){wc(e,n,t)}}var nu=!1;function tu(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&eu(n,t,o)}a=a.next}while(a!==r)}}function ru(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function au(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,"function"==typeof n?n(e):n.current=e}}function ou(e){var n=e.alternate;null!==n&&(e.alternate=null,ou(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&(delete n[da],delete n[pa],delete n[Aa],delete n[ha],delete n[ga]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function iu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(uu(e,n,t),e=e.sibling;null!==e;)uu(e,n,t),e=e.sibling}function cu(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,n,t),e=e.sibling;null!==e;)cu(e,n,t),e=e.sibling}var su=null,fu=!1;function du(e,n,t){for(t=t.child;null!==t;)pu(e,n,t),t=t.sibling}function pu(e,n,t){if(on&&"function"==typeof on.onCommitFiberUnmount)try{on.onCommitFiberUnmount(an,t)}catch(e){}switch(t.tag){case 5:Xi||Ji(t,n);case 6:var r=su,a=fu;su=null,du(e,n,t),fu=a,null!==(su=r)&&(fu?(e=su,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):su.removeChild(t.stateNode));break;case 18:null!==su&&(fu?(e=su,t=t.stateNode,8===e.nodeType?ua(e.parentNode,t):1===e.nodeType&&ua(e,t),$n(e)):ua(su,t.stateNode));break;case 4:r=su,a=fu,su=t.stateNode.containerInfo,fu=!0,du(e,n,t),su=r,fu=a;break;case 0:case 11:case 14:case 15:if(!Xi&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,l=o.destroy;o=o.tag,void 0!==l&&(2&o||4&o)&&eu(t,n,l),a=a.next}while(a!==r)}du(e,n,t);break;case 1:if(!Xi&&(Ji(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(e){wc(t,n,e)}du(e,n,t);break;case 21:du(e,n,t);break;case 22:1&t.mode?(Xi=(r=Xi)||null!==t.memoizedState,du(e,n,t),Xi=r):du(e,n,t);break;default:du(e,n,t)}}function mu(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new Ki),n.forEach(function(n){var r=jc.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))})}}function Au(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var a=t[r];try{var l=e,i=n,u=i;e:for(;null!==u;){switch(u.tag){case 5:su=u.stateNode,fu=!1;break e;case 3:case 4:su=u.stateNode.containerInfo,fu=!0;break e}u=u.return}if(null===su)throw Error(o(160));pu(l,i,a),su=null,fu=!1;var c=a.alternate;null!==c&&(c.return=null),a.return=null}catch(e){wc(a,n,e)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)hu(n,e),n=n.sibling}function hu(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(Au(n,e),gu(e),4&r){try{tu(3,e,e.return),ru(3,e)}catch(n){wc(e,e.return,n)}try{tu(5,e,e.return)}catch(n){wc(e,e.return,n)}}break;case 1:Au(n,e),gu(e),512&r&&null!==t&&Ji(t,t.return);break;case 5:if(Au(n,e),gu(e),512&r&&null!==t&&Ji(t,t.return),32&e.flags){var a=e.stateNode;try{de(a,"")}catch(n){wc(e,e.return,n)}}if(4&r&&null!=(a=e.stateNode)){var l=e.memoizedProps,i=null!==t?t.memoizedProps:l,u=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===u&&"radio"===l.type&&null!=l.name&&K(a,l),ye(u,i);var s=ye(u,l);for(i=0;i<c.length;i+=2){var f=c[i],d=c[i+1];"style"===f?he(a,d):"dangerouslySetInnerHTML"===f?fe(a,d):"children"===f?de(a,d):y(a,f,d,s)}switch(u){case"input":Z(a,l);break;case"textarea":oe(a,l);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!l.multiple;var m=l.value;null!=m?te(a,!!l.multiple,m,!1):p!==!!l.multiple&&(null!=l.defaultValue?te(a,!!l.multiple,l.defaultValue,!0):te(a,!!l.multiple,l.multiple?[]:"",!1))}a[pa]=l}catch(n){wc(e,e.return,n)}}break;case 6:if(Au(n,e),gu(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,l=e.memoizedProps;try{a.nodeValue=l}catch(n){wc(e,e.return,n)}}break;case 3:if(Au(n,e),gu(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{$n(n.containerInfo)}catch(n){wc(e,e.return,n)}break;case 4:default:Au(n,e),gu(e);break;case 13:Au(n,e),gu(e),8192&(a=e.child).flags&&(l=null!==a.memoizedState,a.stateNode.isHidden=l,!l||null!==a.alternate&&null!==a.alternate.memoizedState||(Uu=Ke())),4&r&&mu(e);break;case 22:if(f=null!==t&&null!==t.memoizedState,1&e.mode?(Xi=(s=Xi)||f,Au(n,e),Xi=s):Au(n,e),gu(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!f&&1&e.mode)for(Zi=e,f=e.child;null!==f;){for(d=Zi=f;null!==Zi;){switch(m=(p=Zi).child,p.tag){case 0:case 11:case 14:case 15:tu(4,p,p.return);break;case 1:Ji(p,p.return);var A=p.stateNode;if("function"==typeof A.componentWillUnmount){r=p,t=p.return;try{n=r,A.props=n.memoizedProps,A.state=n.memoizedState,A.componentWillUnmount()}catch(e){wc(r,t,e)}}break;case 5:Ji(p,p.return);break;case 22:if(null!==p.memoizedState){Eu(d);continue}}null!==m?(m.return=p,Zi=m):Eu(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{a=d.stateNode,s?"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none":(u=d.stateNode,i=null!=(c=d.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,u.style.display=Ae("display",i))}catch(n){wc(e,e.return,n)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=s?"":d.memoizedProps}catch(n){wc(e,e.return,n)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:Au(n,e),gu(e),4&r&&mu(e);case 21:}}function gu(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(lu(t)){var r=t;break e}t=t.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(de(a,""),r.flags&=-33),cu(e,iu(e),a);break;case 3:case 4:var l=r.stateNode.containerInfo;uu(e,iu(e),l);break;default:throw Error(o(161))}}catch(n){wc(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function vu(e,n,t){Zi=e,yu(e,n,t)}function yu(e,n,t){for(var r=!!(1&e.mode);null!==Zi;){var a=Zi,o=a.child;if(22===a.tag&&r){var l=null!==a.memoizedState||Qi;if(!l){var i=a.alternate,u=null!==i&&null!==i.memoizedState||Xi;i=Qi;var c=Xi;if(Qi=l,(Xi=u)&&!c)for(Zi=a;null!==Zi;)u=(l=Zi).child,22===l.tag&&null!==l.memoizedState?Cu(a):null!==u?(u.return=l,Zi=u):Cu(a);for(;null!==o;)Zi=o,yu(o,n,t),o=o.sibling;Zi=a,Qi=i,Xi=c}bu(e)}else 8772&a.subtreeFlags&&null!==o?(o.return=a,Zi=o):bu(e)}}function bu(e){for(;null!==Zi;){var n=Zi;if(8772&n.flags){var t=n.alternate;try{if(8772&n.flags)switch(n.tag){case 0:case 11:case 15:Xi||ru(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!Xi)if(null===t)r.componentDidMount();else{var a=n.elementType===n.type?t.memoizedProps:ti(n.type,t.memoizedProps);r.componentDidUpdate(a,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var l=n.updateQueue;null!==l&&Vo(n,l,r);break;case 3:var i=n.updateQueue;if(null!==i){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}Vo(n,i,t)}break;case 5:var u=n.stateNode;if(null===t&&4&n.flags){t=u;var c=n.memoizedProps;switch(n.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&t.focus();break;case"img":c.src&&(t.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var s=n.alternate;if(null!==s){var f=s.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&$n(d)}}}break;default:throw Error(o(163))}Xi||512&n.flags&&au(n)}catch(e){wc(n,n.return,e)}}if(n===e){Zi=null;break}if(null!==(t=n.sibling)){t.return=n.return,Zi=t;break}Zi=n.return}}function Eu(e){for(;null!==Zi;){var n=Zi;if(n===e){Zi=null;break}var t=n.sibling;if(null!==t){t.return=n.return,Zi=t;break}Zi=n.return}}function Cu(e){for(;null!==Zi;){var n=Zi;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{ru(4,n)}catch(e){wc(n,t,e)}break;case 1:var r=n.stateNode;if("function"==typeof r.componentDidMount){var a=n.return;try{r.componentDidMount()}catch(e){wc(n,a,e)}}var o=n.return;try{au(n)}catch(e){wc(n,o,e)}break;case 5:var l=n.return;try{au(n)}catch(e){wc(n,l,e)}}}catch(e){wc(n,n.return,e)}if(n===e){Zi=null;break}var i=n.sibling;if(null!==i){i.return=n.return,Zi=i;break}Zi=n.return}}var Bu,wu=Math.ceil,ku=b.ReactCurrentDispatcher,xu=b.ReactCurrentOwner,Su=b.ReactCurrentBatchConfig,ju=0,Nu=null,Pu=null,_u=0,Ou=0,zu=wa(0),Tu=0,Fu=null,Lu=0,Iu=0,Ru=0,Mu=null,Du=null,Uu=0,Wu=1/0,$u=null,Vu=!1,Gu=null,Hu=null,qu=!1,Yu=null,Qu=0,Xu=0,Ku=null,Zu=-1,Ju=0;function ec(){return 6&ju?Ke():-1!==Zu?Zu:Zu=Ke()}function nc(e){return 1&e.mode?2&ju&&0!==_u?_u&-_u:null!==ho.transition?(0===Ju&&(Ju=hn()),Ju):0!==(e=bn)?e:e=void 0===(e=window.event)?16:Kn(e.type):1}function tc(e,n,t,r){if(50<Xu)throw Xu=0,Ku=null,Error(o(185));vn(e,t,r),2&ju&&e===Nu||(e===Nu&&(!(2&ju)&&(Iu|=t),4===Tu&&ic(e,_u)),rc(e,r),1===t&&0===ju&&!(1&n.mode)&&(Wu=Ke()+500,Ma&&Wa()))}function rc(e,n){var t=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var l=31-ln(o),i=1<<l,u=a[l];-1===u?0!==(i&t)&&0===(i&r)||(a[l]=mn(i,n)):u<=n&&(e.expiredLanes|=i),o&=~i}}(e,n);var r=pn(e,e===Nu?_u:0);if(0===r)null!==t&&Ye(t),e.callbackNode=null,e.callbackPriority=0;else if(n=r&-r,e.callbackPriority!==n){if(null!=t&&Ye(t),1===n)0===e.tag?function(e){Ma=!0,Ua(e)}(uc.bind(null,e)):Ua(uc.bind(null,e)),la(function(){!(6&ju)&&Wa()}),t=null;else{switch(En(r)){case 1:t=Je;break;case 4:t=en;break;case 16:default:t=nn;break;case 536870912:t=rn}t=Nc(t,ac.bind(null,e))}e.callbackPriority=n,e.callbackNode=t}}function ac(e,n){if(Zu=-1,Ju=0,6&ju)throw Error(o(327));var t=e.callbackNode;if(Cc()&&e.callbackNode!==t)return null;var r=pn(e,e===Nu?_u:0);if(0===r)return null;if(30&r||0!==(r&e.expiredLanes)||n)n=hc(e,r);else{n=r;var a=ju;ju|=2;var l=mc();for(Nu===e&&_u===n||($u=null,Wu=Ke()+500,dc(e,n));;)try{vc();break}catch(n){pc(e,n)}So(),ku.current=l,ju=a,null!==Pu?n=0:(Nu=null,_u=0,n=Tu)}if(0!==n){if(2===n&&0!==(a=An(e))&&(r=a,n=oc(e,a)),1===n)throw t=Fu,dc(e,0),ic(e,r),rc(e,Ke()),t;if(6===n)ic(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var a=t[r],o=a.getSnapshot;a=a.value;try{if(!ir(o(),a))return!1}catch(e){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(a)||(n=hc(e,r),2===n&&(l=An(e),0!==l&&(r=l,n=oc(e,l))),1!==n)))throw t=Fu,dc(e,0),ic(e,r),rc(e,Ke()),t;switch(e.finishedWork=a,e.finishedLanes=r,n){case 0:case 1:throw Error(o(345));case 2:case 5:Ec(e,Du,$u);break;case 3:if(ic(e,r),(130023424&r)===r&&10<(n=Uu+500-Ke())){if(0!==pn(e,0))break;if(((a=e.suspendedLanes)&r)!==r){ec(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(Ec.bind(null,e,Du,$u),n);break}Ec(e,Du,$u);break;case 4:if(ic(e,r),(4194240&r)===r)break;for(n=e.eventTimes,a=-1;0<r;){var i=31-ln(r);l=1<<i,(i=n[i])>a&&(a=i),r&=~l}if(r=a,10<(r=(120>(r=Ke()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*wu(r/1960))-r)){e.timeoutHandle=ra(Ec.bind(null,e,Du,$u),r);break}Ec(e,Du,$u);break;default:throw Error(o(329))}}}return rc(e,Ke()),e.callbackNode===t?ac.bind(null,e):null}function oc(e,n){var t=Mu;return e.current.memoizedState.isDehydrated&&(dc(e,n).flags|=256),2!==(e=hc(e,n))&&(n=Du,Du=t,null!==n&&lc(n)),e}function lc(e){null===Du?Du=e:Du.push.apply(Du,e)}function ic(e,n){for(n&=~Ru,n&=~Iu,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-ln(n),r=1<<t;e[t]=-1,n&=~r}}function uc(e){if(6&ju)throw Error(o(327));Cc();var n=pn(e,0);if(!(1&n))return rc(e,Ke()),null;var t=hc(e,n);if(0!==e.tag&&2===t){var r=An(e);0!==r&&(n=r,t=oc(e,r))}if(1===t)throw t=Fu,dc(e,0),ic(e,n),rc(e,Ke()),t;if(6===t)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,Ec(e,Du,$u),rc(e,Ke()),null}function cc(e,n){var t=ju;ju|=1;try{return e(n)}finally{0===(ju=t)&&(Wu=Ke()+500,Ma&&Wa())}}function sc(e){null!==Yu&&0===Yu.tag&&!(6&ju)&&Cc();var n=ju;ju|=1;var t=Su.transition,r=bn;try{if(Su.transition=null,bn=1,e)return e()}finally{bn=r,Su.transition=t,!(6&(ju=n))&&Wa()}}function fc(){Ou=zu.current,ka(zu)}function dc(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,aa(t)),null!==Pu)for(t=Pu.return;null!==t;){var r=t;switch(no(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&za();break;case 3:Ko(),ka(Na),ka(ja),rl();break;case 5:Jo(r);break;case 4:Ko();break;case 13:case 19:ka(el);break;case 10:jo(r.type._context);break;case 22:case 23:fc()}t=t.return}if(Nu=e,Pu=e=zc(e.current,null),_u=Ou=n,Tu=0,Fu=null,Ru=Iu=Lu=0,Du=Mu=null,null!==Oo){for(n=0;n<Oo.length;n++)if(null!==(r=(t=Oo[n]).interleaved)){t.interleaved=null;var a=r.next,o=t.pending;if(null!==o){var l=o.next;o.next=a,r.next=l}t.pending=r}Oo=null}return e}function pc(e,n){for(;;){var t=Pu;try{if(So(),al.current=Zl,sl){for(var r=il.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}sl=!1}if(ll=0,cl=ul=il=null,fl=!1,dl=0,xu.current=null,null===t||null===t.return){Tu=1,Fu=n,Pu=null;break}e:{var l=e,i=t.return,u=t,c=n;if(n=_u,u.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var s=c,f=u,d=f.tag;if(!(1&f.mode||0!==d&&11!==d&&15!==d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var m=hi(i);if(null!==m){m.flags&=-257,gi(m,i,u,0,n),1&m.mode&&Ai(l,s,n),c=s;var A=(n=m).updateQueue;if(null===A){var h=new Set;h.add(c),n.updateQueue=h}else A.add(c);break e}if(!(1&n)){Ai(l,s,n),Ac();break e}c=Error(o(426))}else if(ao&&1&u.mode){var g=hi(i);if(null!==g){!(65536&g.flags)&&(g.flags|=256),gi(g,i,u,0,n),Ao(ci(c,u));break e}}l=c=ci(c,u),4!==Tu&&(Tu=2),null===Mu?Mu=[l]:Mu.push(l),l=i;do{switch(l.tag){case 3:l.flags|=65536,n&=-n,l.lanes|=n,Wo(l,pi(0,c,n));break e;case 1:u=c;var v=l.type,y=l.stateNode;if(!(128&l.flags||"function"!=typeof v.getDerivedStateFromError&&(null===y||"function"!=typeof y.componentDidCatch||null!==Hu&&Hu.has(y)))){l.flags|=65536,n&=-n,l.lanes|=n,Wo(l,mi(l,u,n));break e}}l=l.return}while(null!==l)}bc(t)}catch(e){n=e,Pu===t&&null!==t&&(Pu=t=t.return);continue}break}}function mc(){var e=ku.current;return ku.current=Zl,null===e?Zl:e}function Ac(){0!==Tu&&3!==Tu&&2!==Tu||(Tu=4),null===Nu||!(268435455&Lu)&&!(268435455&Iu)||ic(Nu,_u)}function hc(e,n){var t=ju;ju|=2;var r=mc();for(Nu===e&&_u===n||($u=null,dc(e,n));;)try{gc();break}catch(n){pc(e,n)}if(So(),ju=t,ku.current=r,null!==Pu)throw Error(o(261));return Nu=null,_u=0,Tu}function gc(){for(;null!==Pu;)yc(Pu)}function vc(){for(;null!==Pu&&!Qe();)yc(Pu)}function yc(e){var n=Bu(e.alternate,e,Ou);e.memoizedProps=e.pendingProps,null===n?bc(e):Pu=n,xu.current=null}function bc(e){var n=e;do{var t=n.alternate;if(e=n.return,32768&n.flags){if(null!==(t=Yi(t,n)))return t.flags&=32767,void(Pu=t);if(null===e)return Tu=6,void(Pu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(t=qi(t,n,Ou)))return void(Pu=t);if(null!==(n=n.sibling))return void(Pu=n);Pu=n=e}while(null!==n);0===Tu&&(Tu=5)}function Ec(e,n,t){var r=bn,a=Su.transition;try{Su.transition=null,bn=1,function(e,n,t,r){do{Cc()}while(null!==Yu);if(6&ju)throw Error(o(327));t=e.finishedWork;var a=e.finishedLanes;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var l=t.lanes|t.childLanes;if(function(e,n){var t=e.pendingLanes&~n;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=n,e.mutableReadLanes&=n,e.entangledLanes&=n,n=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<t;){var a=31-ln(t),o=1<<a;n[a]=0,r[a]=-1,e[a]=-1,t&=~o}}(e,l),e===Nu&&(Pu=Nu=null,_u=0),!(2064&t.subtreeFlags)&&!(2064&t.flags)||qu||(qu=!0,Nc(nn,function(){return Cc(),null})),l=!!(15990&t.flags),15990&t.subtreeFlags||l){l=Su.transition,Su.transition=null;var i=bn;bn=1;var u=ju;ju|=4,xu.current=null,function(e,n){if(ea=Gn,pr(e=dr())){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var a=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{t.nodeType,l.nodeType}catch(e){t=null;break e}var i=0,u=-1,c=-1,s=0,f=0,d=e,p=null;n:for(;;){for(var m;d!==t||0!==a&&3!==d.nodeType||(u=i+a),d!==l||0!==r&&3!==d.nodeType||(c=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(m=d.firstChild);)p=d,d=m;for(;;){if(d===e)break n;if(p===t&&++s===a&&(u=i),p===l&&++f===r&&(c=i),null!==(m=d.nextSibling))break;p=(d=p).parentNode}d=m}t=-1===u||-1===c?null:{start:u,end:c}}else t=null}t=t||{start:0,end:0}}else t=null;for(na={focusedElem:e,selectionRange:t},Gn=!1,Zi=n;null!==Zi;)if(e=(n=Zi).child,1028&n.subtreeFlags&&null!==e)e.return=n,Zi=e;else for(;null!==Zi;){n=Zi;try{var A=n.alternate;if(1024&n.flags)switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==A){var h=A.memoizedProps,g=A.memoizedState,v=n.stateNode,y=v.getSnapshotBeforeUpdate(n.elementType===n.type?h:ti(n.type,h),g);v.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var b=n.stateNode.containerInfo;1===b.nodeType?b.textContent="":9===b.nodeType&&b.documentElement&&b.removeChild(b.documentElement);break;default:throw Error(o(163))}}catch(e){wc(n,n.return,e)}if(null!==(e=n.sibling)){e.return=n.return,Zi=e;break}Zi=n.return}A=nu,nu=!1}(e,t),hu(t,e),mr(na),Gn=!!ea,na=ea=null,e.current=t,vu(t,e,a),Xe(),ju=u,bn=i,Su.transition=l}else e.current=t;if(qu&&(qu=!1,Yu=e,Qu=a),0===(l=e.pendingLanes)&&(Hu=null),function(e){if(on&&"function"==typeof on.onCommitFiberRoot)try{on.onCommitFiberRoot(an,e,void 0,!(128&~e.current.flags))}catch(e){}}(t.stateNode),rc(e,Ke()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)r((a=n[t]).value,{componentStack:a.stack,digest:a.digest});if(Vu)throw Vu=!1,e=Gu,Gu=null,e;!!(1&Qu)&&0!==e.tag&&Cc(),1&(l=e.pendingLanes)?e===Ku?Xu++:(Xu=0,Ku=e):Xu=0,Wa()}(e,n,t,r)}finally{Su.transition=a,bn=r}return null}function Cc(){if(null!==Yu){var e=En(Qu),n=Su.transition,t=bn;try{if(Su.transition=null,bn=16>e?16:e,null===Yu)var r=!1;else{if(e=Yu,Yu=null,Qu=0,6&ju)throw Error(o(331));var a=ju;for(ju|=4,Zi=e.current;null!==Zi;){var l=Zi,i=l.child;if(16&Zi.flags){var u=l.deletions;if(null!==u){for(var c=0;c<u.length;c++){var s=u[c];for(Zi=s;null!==Zi;){var f=Zi;switch(f.tag){case 0:case 11:case 15:tu(8,f,l)}var d=f.child;if(null!==d)d.return=f,Zi=d;else for(;null!==Zi;){var p=(f=Zi).sibling,m=f.return;if(ou(f),f===s){Zi=null;break}if(null!==p){p.return=m,Zi=p;break}Zi=m}}}var A=l.alternate;if(null!==A){var h=A.child;if(null!==h){A.child=null;do{var g=h.sibling;h.sibling=null,h=g}while(null!==h)}}Zi=l}}if(2064&l.subtreeFlags&&null!==i)i.return=l,Zi=i;else e:for(;null!==Zi;){if(2048&(l=Zi).flags)switch(l.tag){case 0:case 11:case 15:tu(9,l,l.return)}var v=l.sibling;if(null!==v){v.return=l.return,Zi=v;break e}Zi=l.return}}var y=e.current;for(Zi=y;null!==Zi;){var b=(i=Zi).child;if(2064&i.subtreeFlags&&null!==b)b.return=i,Zi=b;else e:for(i=y;null!==Zi;){if(2048&(u=Zi).flags)try{switch(u.tag){case 0:case 11:case 15:ru(9,u)}}catch(e){wc(u,u.return,e)}if(u===i){Zi=null;break e}var E=u.sibling;if(null!==E){E.return=u.return,Zi=E;break e}Zi=u.return}}if(ju=a,Wa(),on&&"function"==typeof on.onPostCommitFiberRoot)try{on.onPostCommitFiberRoot(an,e)}catch(e){}r=!0}return r}finally{bn=t,Su.transition=n}}return!1}function Bc(e,n,t){e=Do(e,n=pi(0,n=ci(t,n),1),1),n=ec(),null!==e&&(vn(e,1,n),rc(e,n))}function wc(e,n,t){if(3===e.tag)Bc(e,e,t);else for(;null!==n;){if(3===n.tag){Bc(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hu||!Hu.has(r))){n=Do(n,e=mi(n,e=ci(t,e),1),1),e=ec(),null!==n&&(vn(n,1,e),rc(n,e));break}}n=n.return}}function kc(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=ec(),e.pingedLanes|=e.suspendedLanes&t,Nu===e&&(_u&t)===t&&(4===Tu||3===Tu&&(130023424&_u)===_u&&500>Ke()-Uu?dc(e,0):Ru|=t),rc(e,n)}function xc(e,n){0===n&&(1&e.mode?(n=fn,!(130023424&(fn<<=1))&&(fn=4194304)):n=1);var t=ec();null!==(e=Fo(e,n))&&(vn(e,n,t),rc(e,t))}function Sc(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),xc(e,t)}function jc(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(t=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(n),xc(e,t)}function Nc(e,n){return qe(e,n)}function Pc(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function _c(e,n,t,r){return new Pc(e,n,t,r)}function Oc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zc(e,n){var t=e.alternate;return null===t?((t=_c(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function Tc(e,n,t,r,a,l){var i=2;if(r=e,"function"==typeof e)Oc(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case B:return Fc(t.children,a,l,n);case w:i=8,a|=8;break;case k:return(e=_c(12,t,n,2|a)).elementType=k,e.lanes=l,e;case N:return(e=_c(13,t,n,a)).elementType=N,e.lanes=l,e;case P:return(e=_c(19,t,n,a)).elementType=P,e.lanes=l,e;case z:return Lc(t,a,l,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case x:i=10;break e;case S:i=9;break e;case j:i=11;break e;case _:i=14;break e;case O:i=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(n=_c(i,t,n,a)).elementType=e,n.type=r,n.lanes=l,n}function Fc(e,n,t,r){return(e=_c(7,e,r,n)).lanes=t,e}function Lc(e,n,t,r){return(e=_c(22,e,r,n)).elementType=z,e.lanes=t,e.stateNode={isHidden:!1},e}function Ic(e,n,t){return(e=_c(6,e,null,n)).lanes=t,e}function Rc(e,n,t){return(n=_c(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function Mc(e,n,t,r,a){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gn(0),this.expirationTimes=gn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gn(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Dc(e,n,t,r,a,o,l,i,u){return e=new Mc(e,n,t,i,u),1===n?(n=1,!0===o&&(n|=8)):n=0,o=_c(3,null,null,n),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},Io(o),e}function Uc(e){if(!e)return Sa;e:{if(We(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(Oa(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(o(171))}if(1===e.tag){var t=e.type;if(Oa(t))return Fa(e,t,n)}return n}function Wc(e,n,t,r,a,o,l,i,u){return(e=Dc(t,r,!0,e,0,o,0,i,u)).context=Uc(null),t=e.current,(o=Mo(r=ec(),a=nc(t))).callback=null!=n?n:null,Do(t,o,a),e.current.lanes=a,vn(e,a,r),rc(e,r),e}function $c(e,n,t,r){var a=n.current,o=ec(),l=nc(a);return t=Uc(t),null===n.context?n.context=t:n.pendingContext=t,(n=Mo(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=Do(a,n,l))&&(tc(e,a,l,o),Uo(e,a,l)),l}function Vc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Gc(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Hc(e,n){Gc(e,n),(e=e.alternate)&&Gc(e,n)}Bu=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||Na.current)yi=!0;else{if(0===(e.lanes&t)&&!(128&n.flags))return yi=!1,function(e,n,t){switch(n.tag){case 3:Ni(n),mo();break;case 5:Zo(n);break;case 1:Oa(n.type)&&La(n);break;case 4:Xo(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,a=n.memoizedProps.value;xa(Bo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=n.memoizedState))return null!==r.dehydrated?(xa(el,1&el.current),n.flags|=128,null):0!==(t&n.child.childLanes)?Ii(e,n,t):(xa(el,1&el.current),null!==(e=Vi(e,n,t))?e.sibling:null);xa(el,1&el.current);break;case 19:if(r=0!==(t&n.childLanes),128&e.flags){if(r)return Wi(e,n,t);n.flags|=128}if(null!==(a=n.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),xa(el,el.current),r)break;return null;case 22:case 23:return n.lanes=0,wi(e,n,t)}return Vi(e,n,t)}(e,n,t);yi=!!(131072&e.flags)}else yi=!1,ao&&1048576&n.flags&&Ja(n,Ha,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;$i(e,n),e=n.pendingProps;var a=_a(n,ja.current);Po(n,t),a=hl(null,n,r,e,a,t);var l=gl();return n.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,Oa(r)?(l=!0,La(n)):l=!1,n.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Io(n),a.updater=ai,n.stateNode=a,a._reactInternals=n,ui(n,r,e,t),n=ji(null,n,r,!0,l,t)):(n.tag=0,ao&&l&&eo(n),bi(null,n,a,t),n=n.child),n;case 16:r=n.elementType;e:{switch($i(e,n),e=n.pendingProps,r=(a=r._init)(r._payload),n.type=r,a=n.tag=function(e){if("function"==typeof e)return Oc(e)?1:0;if(null!=e){if((e=e.$$typeof)===j)return 11;if(e===_)return 14}return 2}(r),e=ti(r,e),a){case 0:n=xi(null,n,r,e,t);break e;case 1:n=Si(null,n,r,e,t);break e;case 11:n=Ei(null,n,r,e,t);break e;case 14:n=Ci(null,n,r,ti(r.type,e),t);break e}throw Error(o(306,r,""))}return n;case 0:return r=n.type,a=n.pendingProps,xi(e,n,r,a=n.elementType===r?a:ti(r,a),t);case 1:return r=n.type,a=n.pendingProps,Si(e,n,r,a=n.elementType===r?a:ti(r,a),t);case 3:e:{if(Ni(n),null===e)throw Error(o(387));r=n.pendingProps,a=(l=n.memoizedState).element,Ro(e,n),$o(n,r,null,t);var i=n.memoizedState;if(r=i.element,l.isDehydrated){if(l={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},n.updateQueue.baseState=l,n.memoizedState=l,256&n.flags){n=Pi(e,n,r,t,a=ci(Error(o(423)),n));break e}if(r!==a){n=Pi(e,n,r,t,a=ci(Error(o(424)),n));break e}for(ro=ca(n.stateNode.containerInfo.firstChild),to=n,ao=!0,oo=null,t=Co(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(mo(),r===a){n=Vi(e,n,t);break e}bi(e,n,r,t)}n=n.child}return n;case 5:return Zo(n),null===e&&co(n),r=n.type,a=n.pendingProps,l=null!==e?e.memoizedProps:null,i=a.children,ta(r,a)?i=null:null!==l&&ta(r,l)&&(n.flags|=32),ki(e,n),bi(e,n,i,t),n.child;case 6:return null===e&&co(n),null;case 13:return Ii(e,n,t);case 4:return Xo(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=Eo(n,null,r,t):bi(e,n,r,t),n.child;case 11:return r=n.type,a=n.pendingProps,Ei(e,n,r,a=n.elementType===r?a:ti(r,a),t);case 7:return bi(e,n,n.pendingProps,t),n.child;case 8:case 12:return bi(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,a=n.pendingProps,l=n.memoizedProps,i=a.value,xa(Bo,r._currentValue),r._currentValue=i,null!==l)if(ir(l.value,i)){if(l.children===a.children&&!Na.current){n=Vi(e,n,t);break e}}else for(null!==(l=n.child)&&(l.return=n);null!==l;){var u=l.dependencies;if(null!==u){i=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r){if(1===l.tag){(c=Mo(-1,t&-t)).tag=2;var s=l.updateQueue;if(null!==s){var f=(s=s.shared).pending;null===f?c.next=c:(c.next=f.next,f.next=c),s.pending=c}}l.lanes|=t,null!==(c=l.alternate)&&(c.lanes|=t),No(l.return,t,n),u.lanes|=t;break}c=c.next}}else if(10===l.tag)i=l.type===n.type?null:l.child;else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=t,null!==(u=i.alternate)&&(u.lanes|=t),No(i,t,n),i=l.sibling}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===n){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}bi(e,n,a.children,t),n=n.child}return n;case 9:return a=n.type,r=n.pendingProps.children,Po(n,t),r=r(a=_o(a)),n.flags|=1,bi(e,n,r,t),n.child;case 14:return a=ti(r=n.type,n.pendingProps),Ci(e,n,r,a=ti(r.type,a),t);case 15:return Bi(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,a=n.pendingProps,a=n.elementType===r?a:ti(r,a),$i(e,n),n.tag=1,Oa(r)?(e=!0,La(n)):e=!1,Po(n,t),li(n,r,a),ui(n,r,a,t),ji(null,n,r,!0,e,t);case 19:return Wi(e,n,t);case 22:return wi(e,n,t)}throw Error(o(156,n.tag))};var qc="function"==typeof reportError?reportError:function(e){console.error(e)};function Yc(e){this._internalRoot=e}function Qc(e){this._internalRoot=e}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Kc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zc(){}function Jc(e,n,t,r,a){var o=t._reactRootContainer;if(o){var l=o;if("function"==typeof a){var i=a;a=function(){var e=Vc(l);i.call(e)}}$c(n,l,e,a)}else l=function(e,n,t,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Vc(l);o.call(e)}}var l=Wc(n,r,e,0,null,!1,0,"",Zc);return e._reactRootContainer=l,e[ma]=l.current,Wr(8===e.nodeType?e.parentNode:e),sc(),l}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var i=r;r=function(){var e=Vc(u);i.call(e)}}var u=Dc(e,0,!1,null,0,!1,0,"",Zc);return e._reactRootContainer=u,e[ma]=u.current,Wr(8===e.nodeType?e.parentNode:e),sc(function(){$c(n,u,t,r)}),u}(t,n,e,a,r);return Vc(l)}Qc.prototype.render=Yc.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(o(409));$c(e,n,null,null)},Qc.prototype.unmount=Yc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;sc(function(){$c(null,e,null,null)}),n[ma]=null}},Qc.prototype.unstable_scheduleHydration=function(e){if(e){var n=kn();e={blockedOn:null,target:e,priority:n};for(var t=0;t<Tn.length&&0!==n&&n<Tn[t].priority;t++);Tn.splice(t,0,e),0===t&&Rn(e)}},Cn=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=dn(n.pendingLanes);0!==t&&(yn(n,1|t),rc(n,Ke()),!(6&ju)&&(Wu=Ke()+500,Wa()))}break;case 13:sc(function(){var n=Fo(e,1);if(null!==n){var t=ec();tc(n,e,1,t)}}),Hc(e,1)}},Bn=function(e){if(13===e.tag){var n=Fo(e,134217728);null!==n&&tc(n,e,134217728,ec()),Hc(e,134217728)}},wn=function(e){if(13===e.tag){var n=nc(e),t=Fo(e,n);null!==t&&tc(t,e,n,ec()),Hc(e,n)}},kn=function(){return bn},xn=function(e,n){var t=bn;try{return bn=e,n()}finally{bn=t}},Ce=function(e,n,t){switch(n){case"input":if(Z(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var a=Ea(r);if(!a)throw Error(o(90));q(r),Z(r,a)}}}break;case"textarea":oe(e,t);break;case"select":null!=(n=t.value)&&te(e,!!t.multiple,n,!1)}},je=cc,Ne=sc;var es={usingClientEntryPoint:!1,Events:[ya,ba,Ea,xe,Se,cc]},ns={findFiberByHostInstance:va,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},ts={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ge(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rs=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rs.isDisabled&&rs.supportsFiber)try{an=rs.inject(ts),on=rs}catch(se){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=es,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xc(n))throw Error(o(200));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:C,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.createRoot=function(e,n){if(!Xc(e))throw Error(o(299));var t=!1,r="",a=qc;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(a=n.onRecoverableError)),n=Dc(e,1,!1,null,0,t,0,r,a),e[ma]=n.current,Wr(8===e.nodeType?e.parentNode:e),new Yc(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=Ge(n))?null:e.stateNode},n.flushSync=function(e){return sc(e)},n.hydrate=function(e,n,t){if(!Kc(n))throw Error(o(200));return Jc(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!Xc(e))throw Error(o(405));var r=null!=t&&t.hydratedSources||null,a=!1,l="",i=qc;if(null!=t&&(!0===t.unstable_strictMode&&(a=!0),void 0!==t.identifierPrefix&&(l=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),n=Wc(n,null,e,1,null!=t?t:null,a,0,l,i),e[ma]=n.current,Wr(e),r)for(e=0;e<r.length;e++)a=(a=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a);return new Qc(n)},n.render=function(e,n,t){if(!Kc(n))throw Error(o(200));return Jc(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!Kc(e))throw Error(o(40));return!!e._reactRootContainer&&(sc(function(){Jc(null,null,e,!1,function(){e._reactRootContainer=null,e[ma]=null})}),!0)},n.unstable_batchedUpdates=cc,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!Kc(t))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Jc(e,n,t,!1,r)},n.version="18.3.1-next-f1338f8080-20240426"},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},961:(e,n,t)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(551)},982:(e,n,t)=>{e.exports=t(463)}},r={};function a(e){var n=r[e];if(void 0!==n)return n.exports;var o=r[e]={id:e,exports:{}};return t[e](o,o.exports,a),o.exports}a.m=t,a.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return a.d(n,{a:n}),n},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(t,r){if(1&r&&(t=this(t)),8&r)return t;if("object"==typeof t&&t){if(4&r&&t.__esModule)return t;if(16&r&&"function"==typeof t.then)return t}var o=Object.create(null);a.r(o);var l={};e=e||[null,n({}),n([]),n(n)];for(var i=2&r&&t;("object"==typeof i||"function"==typeof i)&&!~e.indexOf(i);i=n(i))Object.getOwnPropertyNames(i).forEach(e=>l[e]=()=>t[e]);return l.default=()=>t,a.d(o,l),o},a.d=(e,n)=>{for(var t in n)a.o(n,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},a.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.p="/",a.b=document&&document.baseURI||self.location.href,a.nc=void 0;var o,l=a(540),i=a.t(l,2),u=a(338),c=a(961),s=a.t(c,2);function f(){return f=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},f.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(o||(o={}));const d="popstate";function p(e,n){if(!1===e||null==e)throw new Error(n)}function m(e,n){if(!e){"undefined"!=typeof console&&console.warn(n);try{throw new Error(n)}catch(e){}}}function A(e,n){return{usr:e.state,key:e.key,idx:n}}function h(e,n,t,r){return void 0===t&&(t=null),f({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof n?v(n):n,{state:t,key:n&&n.key||r||Math.random().toString(36).substr(2,8)})}function g(e){let{pathname:n="/",search:t="",hash:r=""}=e;return t&&"?"!==t&&(n+="?"===t.charAt(0)?t:"?"+t),r&&"#"!==r&&(n+="#"===r.charAt(0)?r:"#"+r),n}function v(e){let n={};if(e){let t=e.indexOf("#");t>=0&&(n.hash=e.substr(t),e=e.substr(0,t));let r=e.indexOf("?");r>=0&&(n.search=e.substr(r),e=e.substr(0,r)),e&&(n.pathname=e)}return n}var y;function b(e,n,t){return void 0===t&&(t="/"),function(e,n,t,r){let a=T(("string"==typeof n?v(n):n).pathname||"/",t);if(null==a)return null;let o=E(e);!function(e){e.sort((e,n)=>e.score!==n.score?n.score-e.score:function(e,n){return e.length===n.length&&e.slice(0,-1).every((e,t)=>e===n[t])?e[e.length-1]-n[n.length-1]:0}(e.routesMeta.map(e=>e.childrenIndex),n.routesMeta.map(e=>e.childrenIndex)))}(o);let l=null;for(let e=0;null==l&&e<o.length;++e){let n=z(a);l=_(o[e],n,r)}return l}(e,n,t,!1)}function E(e,n,t,r){void 0===n&&(n=[]),void 0===t&&(t=[]),void 0===r&&(r="");let a=(e,a,o)=>{let l={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};l.relativePath.startsWith("/")&&(p(l.relativePath.startsWith(r),'Absolute route path "'+l.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(r.length));let i=R([r,l.relativePath]),u=t.concat(l);e.children&&e.children.length>0&&(p(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),E(e.children,n,u,i)),(null!=e.path||e.index)&&n.push({path:i,score:P(i,e.index),routesMeta:u})};return e.forEach((e,n)=>{var t;if(""!==e.path&&null!=(t=e.path)&&t.includes("?"))for(let t of C(e.path))a(e,n,t);else a(e,n)}),n}function C(e){let n=e.split("/");if(0===n.length)return[];let[t,...r]=n,a=t.endsWith("?"),o=t.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let l=C(r.join("/")),i=[];return i.push(...l.map(e=>""===e?o:[o,e].join("/"))),a&&i.push(...l),i.map(n=>e.startsWith("/")&&""===n?"/":n)}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(y||(y={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const B=/^:[\w-]+$/,w=3,k=2,x=1,S=10,j=-2,N=e=>"*"===e;function P(e,n){let t=e.split("/"),r=t.length;return t.some(N)&&(r+=j),n&&(r+=k),t.filter(e=>!N(e)).reduce((e,n)=>e+(B.test(n)?w:""===n?x:S),r)}function _(e,n,t){void 0===t&&(t=!1);let{routesMeta:r}=e,a={},o="/",l=[];for(let e=0;e<r.length;++e){let i=r[e],u=e===r.length-1,c="/"===o?n:n.slice(o.length)||"/",s=O({path:i.relativePath,caseSensitive:i.caseSensitive,end:u},c),f=i.route;if(!s&&u&&t&&!r[r.length-1].route.index&&(s=O({path:i.relativePath,caseSensitive:i.caseSensitive,end:!1},c)),!s)return null;Object.assign(a,s.params),l.push({params:a,pathname:R([o,s.pathname]),pathnameBase:M(R([o,s.pathnameBase])),route:f}),"/"!==s.pathnameBase&&(o=R([o,s.pathnameBase]))}return l}function O(e,n){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[t,r]=function(e,n,t){void 0===n&&(n=!1),void 0===t&&(t=!0),m("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(e,n,t)=>(r.push({paramName:n,isOptional:null!=t}),t?"/?([^\\/]+)?":"/([^\\/]+)"));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):t?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,n?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=n.match(t);if(!a)return null;let o=a[0],l=o.replace(/(.)\/+$/,"$1"),i=a.slice(1);return{params:r.reduce((e,n,t)=>{let{paramName:r,isOptional:a}=n;if("*"===r){let e=i[t]||"";l=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const u=i[t];return e[r]=a&&!u?void 0:(u||"").replace(/%2F/g,"/"),e},{}),pathname:o,pathnameBase:l,pattern:e}}function z(e){try{return e.split("/").map(e=>decodeURIComponent(e).replace(/\//g,"%2F")).join("/")}catch(n){return m(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}function T(e,n){if("/"===n)return e;if(!e.toLowerCase().startsWith(n.toLowerCase()))return null;let t=n.endsWith("/")?n.length-1:n.length,r=e.charAt(t);return r&&"/"!==r?null:e.slice(t)||"/"}function F(e,n,t,r){return"Cannot include a '"+e+"' character in a manually specified `to."+n+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+t+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function L(e,n){let t=function(e){return e.filter((e,n)=>0===n||e.route.path&&e.route.path.length>0)}(e);return n?t.map((e,n)=>n===t.length-1?e.pathname:e.pathnameBase):t.map(e=>e.pathnameBase)}function I(e,n,t,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=v(e):(a=f({},e),p(!a.pathname||!a.pathname.includes("?"),F("?","pathname","search",a)),p(!a.pathname||!a.pathname.includes("#"),F("#","pathname","hash",a)),p(!a.search||!a.search.includes("#"),F("#","search","hash",a)));let o,l=""===e||""===a.pathname,i=l?"/":a.pathname;if(null==i)o=t;else{let e=n.length-1;if(!r&&i.startsWith("..")){let n=i.split("/");for(;".."===n[0];)n.shift(),e-=1;a.pathname=n.join("/")}o=e>=0?n[e]:"/"}let u=function(e,n){void 0===n&&(n="/");let{pathname:t,search:r="",hash:a=""}="string"==typeof e?v(e):e,o=t?t.startsWith("/")?t:function(e,n){let t=n.replace(/\/+$/,"").split("/");return e.split("/").forEach(e=>{".."===e?t.length>1&&t.pop():"."!==e&&t.push(e)}),t.length>1?t.join("/"):"/"}(t,n):n;return{pathname:o,search:D(r),hash:U(a)}}(a,o),c=i&&"/"!==i&&i.endsWith("/"),s=(l||"."===i)&&t.endsWith("/");return u.pathname.endsWith("/")||!c&&!s||(u.pathname+="/"),u}const R=e=>e.join("/").replace(/\/\/+/g,"/"),M=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),D=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",U=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const W=["post","put","patch","delete"],$=(new Set(W),["get",...W]);function V(){return V=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},V.apply(this,arguments)}new Set($),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const G=l.createContext(null),H=l.createContext(null),q=l.createContext(null),Y=l.createContext(null),Q=l.createContext({outlet:null,matches:[],isDataRoute:!1}),X=l.createContext(null);function K(){return null!=l.useContext(Y)}function Z(){return K()||p(!1),l.useContext(Y).location}function J(e){l.useContext(q).static||l.useLayoutEffect(e)}function ee(){let{isDataRoute:e}=l.useContext(Q);return e?function(){let{router:e}=function(){let e=l.useContext(G);return e||p(!1),e}(ie.UseNavigateStable),n=ce(ue.UseNavigateStable),t=l.useRef(!1);J(()=>{t.current=!0});let r=l.useCallback(function(r,a){void 0===a&&(a={}),t.current&&("number"==typeof r?e.navigate(r):e.navigate(r,V({fromRouteId:n},a)))},[e,n]);return r}():function(){K()||p(!1);let e=l.useContext(G),{basename:n,future:t,navigator:r}=l.useContext(q),{matches:a}=l.useContext(Q),{pathname:o}=Z(),i=JSON.stringify(L(a,t.v7_relativeSplatPath)),u=l.useRef(!1);J(()=>{u.current=!0});let c=l.useCallback(function(t,a){if(void 0===a&&(a={}),!u.current)return;if("number"==typeof t)return void r.go(t);let l=I(t,JSON.parse(i),o,"path"===a.relative);null==e&&"/"!==n&&(l.pathname="/"===l.pathname?n:R([n,l.pathname])),(a.replace?r.replace:r.push)(l,a.state,a)},[n,r,i,o,e]);return c}()}function ne(e,n){let{relative:t}=void 0===n?{}:n,{future:r}=l.useContext(q),{matches:a}=l.useContext(Q),{pathname:o}=Z(),i=JSON.stringify(L(a,r.v7_relativeSplatPath));return l.useMemo(()=>I(e,JSON.parse(i),o,"path"===t),[e,i,o,t])}function te(e,n,t,r){K()||p(!1);let{navigator:a}=l.useContext(q),{matches:i}=l.useContext(Q),u=i[i.length-1],c=u?u.params:{},s=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let f,d=Z();if(n){var m;let e="string"==typeof n?v(n):n;"/"===s||(null==(m=e.pathname)?void 0:m.startsWith(s))||p(!1),f=e}else f=d;let A=f.pathname||"/",h=A;if("/"!==s){let e=s.replace(/^\//,"").split("/");h="/"+A.replace(/^\//,"").split("/").slice(e.length).join("/")}let g=b(e,{pathname:h}),y=function(e,n,t,r){var a;if(void 0===n&&(n=[]),void 0===t&&(t=null),void 0===r&&(r=null),null==e){var o;if(!t)return null;if(t.errors)e=t.matches;else{if(!(null!=(o=r)&&o.v7_partialHydration&&0===n.length&&!t.initialized&&t.matches.length>0))return null;e=t.matches}}let i=e,u=null==(a=t)?void 0:a.errors;if(null!=u){let e=i.findIndex(e=>e.route.id&&void 0!==(null==u?void 0:u[e.route.id]));e>=0||p(!1),i=i.slice(0,Math.min(i.length,e+1))}let c=!1,s=-1;if(t&&r&&r.v7_partialHydration)for(let e=0;e<i.length;e++){let n=i[e];if((n.route.HydrateFallback||n.route.hydrateFallbackElement)&&(s=e),n.route.id){let{loaderData:e,errors:r}=t,a=n.route.loader&&void 0===e[n.route.id]&&(!r||void 0===r[n.route.id]);if(n.route.lazy||a){c=!0,i=s>=0?i.slice(0,s+1):[i[0]];break}}}return i.reduceRight((e,r,a)=>{let o,f=!1,d=null,p=null;var m;t&&(o=u&&r.route.id?u[r.route.id]:void 0,d=r.route.errorElement||ae,c&&(s<0&&0===a?(se[m="route-fallback"]||(se[m]=!0),f=!0,p=null):s===a&&(f=!0,p=r.route.hydrateFallbackElement||null)));let A=n.concat(i.slice(0,a+1)),h=()=>{let n;return n=o?d:f?p:r.route.Component?l.createElement(r.route.Component,null):r.route.element?r.route.element:e,l.createElement(le,{match:r,routeContext:{outlet:e,matches:A,isDataRoute:null!=t},children:n})};return t&&(r.route.ErrorBoundary||r.route.errorElement||0===a)?l.createElement(oe,{location:t.location,revalidation:t.revalidation,component:d,error:o,children:h(),routeContext:{outlet:null,matches:A,isDataRoute:!0}}):h()},null)}(g&&g.map(e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:R([s,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?s:R([s,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])})),i,t,r);return n&&y?l.createElement(Y.Provider,{value:{location:V({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:o.Pop}},y):y}function re(){let e=function(){var e;let n=l.useContext(X),t=function(){let e=l.useContext(H);return e||p(!1),e}(ue.UseRouteError),r=ce(ue.UseRouteError);return void 0!==n?n:null==(e=t.errors)?void 0:e[r]}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),t=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return l.createElement(l.Fragment,null,l.createElement("h2",null,"Unexpected Application Error!"),l.createElement("h3",{style:{fontStyle:"italic"}},n),t?l.createElement("pre",{style:r},t):null,null)}const ae=l.createElement(re,null);class oe extends l.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,n){return n.location!==e.location||"idle"!==n.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:n.error,location:n.location,revalidation:e.revalidation||n.revalidation}}componentDidCatch(e,n){console.error("React Router caught the following error during render",e,n)}render(){return void 0!==this.state.error?l.createElement(Q.Provider,{value:this.props.routeContext},l.createElement(X.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function le(e){let{routeContext:n,match:t,children:r}=e,a=l.useContext(G);return a&&a.static&&a.staticContext&&(t.route.errorElement||t.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=t.route.id),l.createElement(Q.Provider,{value:n},r)}var ie=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(ie||{}),ue=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(ue||{});function ce(e){let n=function(){let e=l.useContext(Q);return e||p(!1),e}(),t=n.matches[n.matches.length-1];return t.route.id||p(!1),t.route.id}const se={};function fe(e){p(!1)}function de(e){let{basename:n="/",children:t=null,location:r,navigationType:a=o.Pop,navigator:i,static:u=!1,future:c}=e;K()&&p(!1);let s=n.replace(/^\/*/,"/"),f=l.useMemo(()=>({basename:s,navigator:i,static:u,future:V({v7_relativeSplatPath:!1},c)}),[s,c,i,u]);"string"==typeof r&&(r=v(r));let{pathname:d="/",search:m="",hash:A="",state:h=null,key:g="default"}=r,y=l.useMemo(()=>{let e=T(d,s);return null==e?null:{location:{pathname:e,search:m,hash:A,state:h,key:g},navigationType:a}},[s,d,m,A,h,g,a]);return null==y?null:l.createElement(q.Provider,{value:f},l.createElement(Y.Provider,{children:t,value:y}))}function pe(e){let{children:n,location:t}=e;return te(me(n),t)}function me(e,n){void 0===n&&(n=[]);let t=[];return l.Children.forEach(e,(e,r)=>{if(!l.isValidElement(e))return;let a=[...n,r];if(e.type===l.Fragment)return void t.push.apply(t,me(e.props.children,a));e.type!==fe&&p(!1),e.props.index&&e.props.children&&p(!1);let o={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(o.children=me(e.props.children,a)),t.push(o)}),t}function Ae(){return Ae=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},Ae.apply(this,arguments)}i.startTransition,new Promise(()=>{}),l.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const he=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","viewTransition"];try{window.__reactRouterVersion="6"}catch(e){}new Map;const ge=i.startTransition;function ve(e){let{basename:n,children:t,future:r,window:a}=e,i=l.useRef();null==i.current&&(i.current=function(e){return void 0===e&&(e={}),function(e,n,t,r){void 0===r&&(r={});let{window:a=document.defaultView,v5Compat:l=!1}=r,i=a.history,u=o.Pop,c=null,s=m();function m(){return(i.state||{idx:null}).idx}function v(){u=o.Pop;let e=m(),n=null==e?null:e-s;s=e,c&&c({action:u,location:b.location,delta:n})}function y(e){let n="null"!==a.location.origin?a.location.origin:a.location.href,t="string"==typeof e?e:g(e);return t=t.replace(/ $/,"%20"),p(n,"No window.location.(origin|href) available to create URL for href: "+t),new URL(t,n)}null==s&&(s=0,i.replaceState(f({},i.state,{idx:s}),""));let b={get action(){return u},get location(){return e(a,i)},listen(e){if(c)throw new Error("A history only accepts one active listener");return a.addEventListener(d,v),c=e,()=>{a.removeEventListener(d,v),c=null}},createHref:e=>n(a,e),createURL:y,encodeLocation(e){let n=y(e);return{pathname:n.pathname,search:n.search,hash:n.hash}},push:function(e,n){u=o.Push;let r=h(b.location,e,n);t&&t(r,e),s=m()+1;let f=A(r,s),d=b.createHref(r);try{i.pushState(f,"",d)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(d)}l&&c&&c({action:u,location:b.location,delta:1})},replace:function(e,n){u=o.Replace;let r=h(b.location,e,n);t&&t(r,e),s=m();let a=A(r,s),f=b.createHref(r);i.replaceState(a,"",f),l&&c&&c({action:u,location:b.location,delta:0})},go:e=>i.go(e)};return b}(function(e,n){let{pathname:t,search:r,hash:a}=e.location;return h("",{pathname:t,search:r,hash:a},n.state&&n.state.usr||null,n.state&&n.state.key||"default")},function(e,n){return"string"==typeof n?n:g(n)},null,e)}({window:a,v5Compat:!0}));let u=i.current,[c,s]=l.useState({action:u.action,location:u.location}),{v7_startTransition:m}=r||{},v=l.useCallback(e=>{m&&ge?ge(()=>s(e)):s(e)},[s,m]);return l.useLayoutEffect(()=>u.listen(v),[u,v]),l.useEffect(()=>{return null==(e=r)||e.v7_startTransition,void 0===(null==e?void 0:e.v7_relativeSplatPath)&&(!n||n.v7_relativeSplatPath),void(n&&(n.v7_fetcherPersist,n.v7_normalizeFormMethod,n.v7_partialHydration,n.v7_skipActionErrorRevalidation));var e,n},[r]),l.createElement(de,{basename:n,children:t,location:c.location,navigationType:c.action,navigator:u,future:r})}s.flushSync,i.useId;const ye="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,be=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Ee=l.forwardRef(function(e,n){let t,{onClick:r,relative:a,reloadDocument:o,replace:i,state:u,target:c,to:s,preventScrollReset:f,viewTransition:d}=e,m=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,he),{basename:A}=l.useContext(q),h=!1;if("string"==typeof s&&be.test(s)&&(t=s,ye))try{let e=new URL(window.location.href),n=s.startsWith("//")?new URL(e.protocol+s):new URL(s),t=T(n.pathname,A);n.origin===e.origin&&null!=t?s=t+n.search+n.hash:h=!0}catch(e){}let v=function(e,n){let{relative:t}=void 0===n?{}:n;K()||p(!1);let{basename:r,navigator:a}=l.useContext(q),{hash:o,pathname:i,search:u}=ne(e,{relative:t}),c=i;return"/"!==r&&(c="/"===i?r:R([r,i])),a.createHref({pathname:c,search:u,hash:o})}(s,{relative:a}),y=function(e,n){let{target:t,replace:r,state:a,preventScrollReset:o,relative:i,viewTransition:u}=void 0===n?{}:n,c=ee(),s=Z(),f=ne(e,{relative:i});return l.useCallback(n=>{if(function(e,n){return!(0!==e.button||n&&"_self"!==n||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(n,t)){n.preventDefault();let t=void 0!==r?r:g(s)===g(f);c(e,{replace:t,state:a,preventScrollReset:o,relative:i,viewTransition:u})}},[s,c,f,r,a,t,e,o,i,u])}(s,{replace:i,state:u,target:c,preventScrollReset:f,relative:a,viewTransition:d});return l.createElement("a",Ae({},m,{href:t||v,onClick:h||o?r:function(e){r&&r(e),e.defaultPrevented||y(e)},ref:n,target:c}))});var Ce,Be;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(Ce||(Ce={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Be||(Be={}));const we=function(){return l.createElement("main",{className:"splash-content"},l.createElement("div",{className:"logo-container"},l.createElement("img",{src:"/assets/images/Code Cave Logo.png",alt:"Code Cave Logo",className:"splash-logo-img"})),l.createElement("h2",null,"Collaborate. Version. Share"),l.createElement("p",{className:"subtitle"},"Build code projects with your peers. ",l.createElement("br",null),"Check in and out. Track changes. Stay in sync ",l.createElement("br",null),"Your personal developer hub clean, fast and secure."),l.createElement(Ee,{to:"/home",className:"btn get-started-btn"},"Get Started"))},ke=function(){return l.createElement("div",{className:"splash-page"},l.createElement(we,null))};function xe(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var u=r&&r.prototype instanceof i?r:i,c=Object.create(u.prototype);return Se(c,"_invoke",function(t,r,a){var o,i,u,c=0,s=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(n,t){return o=n,i=0,u=e,d.n=t,l}};function p(t,r){for(i=t,u=r,n=0;!f&&c&&!a&&n<s.length;n++){var a,o=s[n],p=d.p,m=o[2];t>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=t<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=t<3||o[0]>r||r>m)&&(o[4]=t,o[5]=r,d.n=m,i=0))}if(a||t>1)return l;throw f=!0,r}return function(a,s,m){if(c>1)throw TypeError("Generator is already running");for(f&&1===s&&p(s,m),i=s,u=m;(n=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(c=2,o){if(i||(a="next"),n=o[a]){if(!(n=n.call(o,u)))throw TypeError("iterator result is not an object");if(!n.done)return n;u=n.value,i<2&&(i=0)}else 1===i&&(n=o.return)&&n.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((n=(f=d.n<0)?u:t.call(r,d))!==l)break}catch(n){o=e,i=1,u=n}finally{c=1}}return{value:n,done:f}}}(t,a,o),!0),c}var l={};function i(){}function u(){}function c(){}n=Object.getPrototypeOf;var s=[][r]?n(n([][r]())):(Se(n={},r,function(){return this}),n),f=c.prototype=i.prototype=Object.create(s);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Se(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=c,Se(f,"constructor",c),Se(c,"constructor",u),u.displayName="GeneratorFunction",Se(c,a,"GeneratorFunction"),Se(f),Se(f,a,"Generator"),Se(f,r,function(){return this}),Se(f,"toString",function(){return"[object Generator]"}),(xe=function(){return{w:o,m:d}})()}function Se(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}Se=function(e,n,t,r){function o(n,t){Se(e,n,function(e){return this._invoke(n,t,e)})}n?a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t:(o("next",0),o("throw",1),o("return",2))},Se(e,n,t,r)}function je(e,n,t,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void t(e)}i.done?n(u):Promise.resolve(u).then(r,a)}function Ne(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,l,i=[],u=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;u=!1}else for(;!(u=(r=o.call(t)).done)&&(i.push(r.value),i.length!==n);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(c)throw a}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Pe(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Pe(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Pe(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const _e=function(){var e=Ne((0,l.useState)(!1),2),n=e[0],t=e[1],r=Ne((0,l.useState)(""),2),a=r[0],o=r[1],i=ee();(0,l.useEffect)(function(){var e=localStorage.getItem("userId"),n=localStorage.getItem("username");t(!!e),o(n||"")},[]);var u=function(){var e,n=(e=xe().m(function e(){return xe().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("http://localhost:3000/api/logout",{method:"POST",credentials:"include"});case 1:localStorage.clear(),t(!1),o(""),i("/login");case 2:return e.a(2)}},e)}),function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function l(e){je(o,r,a,l,i,"next",e)}function i(e){je(o,r,a,l,i,"throw",e)}l(void 0)})});return function(){return n.apply(this,arguments)}}();return l.createElement("header",{className:"header"},l.createElement("div",{className:"left-group"},l.createElement("div",{className:"logo"},l.createElement("img",{src:"/assets/images/Code Cave Logo.png",alt:"Code Cave Logo",className:"logo-img"})),l.createElement("nav",{className:"nav-links"},l.createElement("ul",null,l.createElement("li",null,l.createElement(Ee,{to:"/home"},"Home")),l.createElement("li",null,l.createElement(Ee,{to:"/projects"},"Projects")),l.createElement("li",null,l.createElement(Ee,{to:"/friends"},"Friends"))))),n?l.createElement("div",{className:"user-actions-logged-in"},l.createElement("input",{type:"text",placeholder:"Search...",className:"search-input"}),l.createElement(Ee,{to:"/profile",className:"profile-link"},a),l.createElement(Ee,{to:"/profile"},l.createElement("img",{src:"/assets/images/User Icon.png",alt:"User Icon",className:"user-icon"})),l.createElement("button",{className:"btn logout-btn",onClick:u},"Log out")):l.createElement("div",{className:"user-actions-logged-out"},l.createElement(Ee,{to:"/login",className:"btn login-btn"},"Log in"),l.createElement(Ee,{to:"/signup",className:"btn signup-btn"},"Sign up")))},Oe=function(e){var n,t=e.project,r=ee();return l.createElement("div",{className:"project-card"},l.createElement("h3",null,t.projectName),l.createElement("p",null,null===(n=t.owner)||void 0===n?void 0:n.username,": ",t.description),l.createElement("span",{className:"btn view-btn",onClick:function(e){e.stopPropagation(),r("/projects/".concat(t._id))}},"view"))};function ze(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const Te=function(){var e,n,t=(e=(0,l.useState)(!1),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,l,i=[],u=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;u=!1}else for(;!(u=(r=o.call(t)).done)&&(i.push(r.value),i.length!==n);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(c)throw a}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return ze(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ze(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=t[0],a=t[1];return{isPopupVisible:r,showPopup:function(){a(!0)},hidePopup:function(){a(!1)}}};function Fe(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,l,i=[],u=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;u=!1}else for(;!(u=(r=o.call(t)).done)&&(i.push(r.value),i.length!==n);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(c)throw a}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Le(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Le(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Le(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const Ie=function(e){var n=e.onClose,t=e.onCreate,r=Fe((0,l.useState)(""),2),a=r[0],o=r[1],i=Fe((0,l.useState)(""),2),u=i[0],c=i[1],s=Fe((0,l.useState)(""),2),f=s[0],d=s[1];return l.createElement("div",{className:"popup-overlay"},l.createElement("div",{className:"popup-card"},l.createElement("div",{className:"popup-header"},l.createElement("h2",null,"Create New Project"),l.createElement("button",{onClick:n,className:"close-btn"},"×")),l.createElement("form",{onSubmit:function(e){e.preventDefault(),""!==a.trim()?(t({projectName:a,description:u}),o(""),c(""),d(""),n()):d("Project name is required.")},className:"popup-form"},l.createElement("div",{className:"form-group"},l.createElement("label",{htmlFor:"projectName"},"Project Name"),l.createElement("input",{type:"text",id:"projectName",placeholder:"My First App",value:a,onChange:function(e){return o(e.target.value)},required:!0})),l.createElement("div",{className:"form-group"},l.createElement("label",{htmlFor:"description"},"Description"),l.createElement("textarea",{id:"description",placeholder:"Describe your project",value:u,onChange:function(e){return c(e.target.value)}})),f&&l.createElement("p",{className:"error-message"},f),l.createElement("div",{className:"popup-actions"},l.createElement("button",{type:"button",onClick:n,className:"btn cancel-btn"},"Cancel"),l.createElement("button",{type:"submit",className:"btn create-btn"},"Create")))))},Re=function(e){var n=e.projects,t=e.onNewProject,r=Te(),a=r.isPopupVisible,o=r.showPopup,i=r.hidePopup,u=Array.isArray(n)?n:[];return l.createElement("div",{className:"left-panel"},l.createElement("button",{onClick:o,className:"btn new-project-btn"},"+ new project"),l.createElement("h3",null,"Your projects:"),l.createElement("div",{className:"projects-list"},u.length>0?u.map(function(e){return l.createElement(Oe,{key:e._id||e.id,project:e})}):l.createElement("div",{className:"no-projects"},"No projects to show.")),a&&l.createElement(Ie,{onClose:i,onCreate:t}))},Me=function(e){var n,t,r,a,o=e.activity,i=ee();return l.createElement("div",{className:"activity-card",onClick:function(){var e,n=(null===(e=o.project)||void 0===e?void 0:e._id)||o.project_id;n&&i("/projects/".concat(n))},style:{cursor:"pointer"}},l.createElement("p",null,l.createElement("strong",null,null===(n=o.user)||void 0===n?void 0:n.username)," ",(null===(t=o.type)||void 0===t?void 0:t.replace("_"," "))||o.action),l.createElement("p",null,"Project: ",l.createElement("strong",null,(null===(r=o.project)||void 0===r?void 0:r.projectName)||o.project)," (",null===(a=o.project)||void 0===a?void 0:a.type,")"),l.createElement("p",null,"Time: ",new Date(o.createdAt||o.time).toLocaleString()))},De=function(e){var n=e.activities;return l.createElement("div",{className:"activity-feed-container"},l.createElement("h2",null,"Activity Feed"),l.createElement("div",{className:"activity-feed"},n.map(function(e){return l.createElement(Me,{key:e._id||e.id,activity:e})})))};function Ue(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var u=r&&r.prototype instanceof i?r:i,c=Object.create(u.prototype);return We(c,"_invoke",function(t,r,a){var o,i,u,c=0,s=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(n,t){return o=n,i=0,u=e,d.n=t,l}};function p(t,r){for(i=t,u=r,n=0;!f&&c&&!a&&n<s.length;n++){var a,o=s[n],p=d.p,m=o[2];t>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=t<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=t<3||o[0]>r||r>m)&&(o[4]=t,o[5]=r,d.n=m,i=0))}if(a||t>1)return l;throw f=!0,r}return function(a,s,m){if(c>1)throw TypeError("Generator is already running");for(f&&1===s&&p(s,m),i=s,u=m;(n=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(c=2,o){if(i||(a="next"),n=o[a]){if(!(n=n.call(o,u)))throw TypeError("iterator result is not an object");if(!n.done)return n;u=n.value,i<2&&(i=0)}else 1===i&&(n=o.return)&&n.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((n=(f=d.n<0)?u:t.call(r,d))!==l)break}catch(n){o=e,i=1,u=n}finally{c=1}}return{value:n,done:f}}}(t,a,o),!0),c}var l={};function i(){}function u(){}function c(){}n=Object.getPrototypeOf;var s=[][r]?n(n([][r]())):(We(n={},r,function(){return this}),n),f=c.prototype=i.prototype=Object.create(s);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,We(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=c,We(f,"constructor",c),We(c,"constructor",u),u.displayName="GeneratorFunction",We(c,a,"GeneratorFunction"),We(f),We(f,a,"Generator"),We(f,r,function(){return this}),We(f,"toString",function(){return"[object Generator]"}),(Ue=function(){return{w:o,m:d}})()}function We(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}We=function(e,n,t,r){function o(n,t){We(e,n,function(e){return this._invoke(n,t,e)})}n?a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t:(o("next",0),o("throw",1),o("return",2))},We(e,n,t,r)}function $e(e,n,t,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void t(e)}i.done?n(u):Promise.resolve(u).then(r,a)}function Ve(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,l,i=[],u=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;u=!1}else for(;!(u=(r=o.call(t)).done)&&(i.push(r.value),i.length!==n);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(c)throw a}}return i}}(e,n)||Ge(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ge(e,n){if(e){if("string"==typeof e)return He(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?He(e,n):void 0}}function He(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const qe=function(){var e=Ve((0,l.useState)([]),2),n=e[0],t=e[1],r=Ve((0,l.useState)([]),2),a=r[0],o=r[1];(0,l.useEffect)(function(){fetch("http://localhost:3000/api/projects/mine",{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return t(e)}),fetch("http://localhost:3000/api/activity",{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return o(e)})},[]);var i=function(){var e,n=(e=Ue().m(function e(n){var r,a;return Ue().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("http://localhost:3000/api/projects",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(n)});case 1:return r=e.v,e.n=2,r.json();case 2:a=e.v,r.ok&&t(function(e){return[].concat(function(e){if(Array.isArray(e))return He(e)}(n=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||Ge(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[a.project]);var n});case 3:return e.a(2)}},e)}),function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function l(e){$e(o,r,a,l,i,"next",e)}function i(e){$e(o,r,a,l,i,"throw",e)}l(void 0)})});return function(e){return n.apply(this,arguments)}}();return l.createElement("div",{className:"home-page"},l.createElement(_e,null),l.createElement("div",{className:"main-content"},l.createElement(Re,{projects:n,onNewProject:i}),l.createElement("div",{className:"right-panel"},l.createElement(De,{activities:a}))))};function Ye(e){return Ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ye(e)}function Qe(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var u=r&&r.prototype instanceof i?r:i,c=Object.create(u.prototype);return Xe(c,"_invoke",function(t,r,a){var o,i,u,c=0,s=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(n,t){return o=n,i=0,u=e,d.n=t,l}};function p(t,r){for(i=t,u=r,n=0;!f&&c&&!a&&n<s.length;n++){var a,o=s[n],p=d.p,m=o[2];t>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=t<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=t<3||o[0]>r||r>m)&&(o[4]=t,o[5]=r,d.n=m,i=0))}if(a||t>1)return l;throw f=!0,r}return function(a,s,m){if(c>1)throw TypeError("Generator is already running");for(f&&1===s&&p(s,m),i=s,u=m;(n=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(c=2,o){if(i||(a="next"),n=o[a]){if(!(n=n.call(o,u)))throw TypeError("iterator result is not an object");if(!n.done)return n;u=n.value,i<2&&(i=0)}else 1===i&&(n=o.return)&&n.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((n=(f=d.n<0)?u:t.call(r,d))!==l)break}catch(n){o=e,i=1,u=n}finally{c=1}}return{value:n,done:f}}}(t,a,o),!0),c}var l={};function i(){}function u(){}function c(){}n=Object.getPrototypeOf;var s=[][r]?n(n([][r]())):(Xe(n={},r,function(){return this}),n),f=c.prototype=i.prototype=Object.create(s);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Xe(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=c,Xe(f,"constructor",c),Xe(c,"constructor",u),u.displayName="GeneratorFunction",Xe(c,a,"GeneratorFunction"),Xe(f),Xe(f,a,"Generator"),Xe(f,r,function(){return this}),Xe(f,"toString",function(){return"[object Generator]"}),(Qe=function(){return{w:o,m:d}})()}function Xe(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}Xe=function(e,n,t,r){function o(n,t){Xe(e,n,function(e){return this._invoke(n,t,e)})}n?a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t:(o("next",0),o("throw",1),o("return",2))},Xe(e,n,t,r)}function Ke(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function Ze(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ke(Object(t),!0).forEach(function(n){Je(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ke(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function Je(e,n,t){return(n=function(e){var n=function(e){if("object"!=Ye(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=Ye(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Ye(n)?n:n+""}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function en(e){return function(e){if(Array.isArray(e))return an(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||rn(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nn(e,n,t,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void t(e)}i.done?n(u):Promise.resolve(u).then(r,a)}function tn(e){return function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function l(e){nn(o,r,a,l,i,"next",e)}function i(e){nn(o,r,a,l,i,"throw",e)}l(void 0)})}}function rn(e,n){if(e){if("string"==typeof e)return an(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?an(e,n):void 0}}function an(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const on=function(){var e,n,t=Te(),r=t.isPopupVisible,a=t.showPopup,o=t.hidePopup,i=(e=(0,l.useState)([]),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,l,i=[],u=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;u=!1}else for(;!(u=(r=o.call(t)).done)&&(i.push(r.value),i.length!==n);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(c)throw a}}return i}}(e,n)||rn(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=i[0],c=i[1];(0,l.useEffect)(function(){fetch("http://localhost:3000/api/projects/mine",{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return c(e)})},[]);var s=function(){var e=tn(Qe().m(function e(n){var t,r;return Qe().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("http://localhost:3000/api/projects",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(n)});case 1:return t=e.v,e.n=2,t.json();case 2:r=e.v,t.ok&&r.project&&c(function(e){return[].concat(en(e),[Ze(Ze({},r.project),{},{owner:{username:r.project.owner}})])}),o();case 3:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}(),f=function(){var e=tn(Qe().m(function e(n){return Qe().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("http://localhost:3000/api/projects/".concat(n),{method:"DELETE",credentials:"include"});case 1:e.v.ok&&c(function(e){return e.filter(function(e){return e._id!==n&&e.id!==n})});case 2:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}();return l.createElement("div",{className:"projects-page"},l.createElement(_e,null),l.createElement("div",{className:"main-content"},l.createElement("div",{className:"content-container"},l.createElement("div",{className:"projects-header"},l.createElement("h1",null,"Your Projects"),l.createElement("button",{onClick:a,className:"btn new-project-btn"},"+ new project")),l.createElement("div",{className:"projects-list"},u.map(function(e){return l.createElement("div",{key:e._id||e.id,className:"project-list-item"},l.createElement(Oe,{project:e}),l.createElement("button",{className:"btn remove-btn",onClick:function(){return f(e._id||e.id)}},"Remove"))})))),r&&l.createElement(Ie,{onClose:o,onCreate:s}))};function ln(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var u=r&&r.prototype instanceof i?r:i,c=Object.create(u.prototype);return un(c,"_invoke",function(t,r,a){var o,i,u,c=0,s=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(n,t){return o=n,i=0,u=e,d.n=t,l}};function p(t,r){for(i=t,u=r,n=0;!f&&c&&!a&&n<s.length;n++){var a,o=s[n],p=d.p,m=o[2];t>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=t<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=t<3||o[0]>r||r>m)&&(o[4]=t,o[5]=r,d.n=m,i=0))}if(a||t>1)return l;throw f=!0,r}return function(a,s,m){if(c>1)throw TypeError("Generator is already running");for(f&&1===s&&p(s,m),i=s,u=m;(n=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(c=2,o){if(i||(a="next"),n=o[a]){if(!(n=n.call(o,u)))throw TypeError("iterator result is not an object");if(!n.done)return n;u=n.value,i<2&&(i=0)}else 1===i&&(n=o.return)&&n.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((n=(f=d.n<0)?u:t.call(r,d))!==l)break}catch(n){o=e,i=1,u=n}finally{c=1}}return{value:n,done:f}}}(t,a,o),!0),c}var l={};function i(){}function u(){}function c(){}n=Object.getPrototypeOf;var s=[][r]?n(n([][r]())):(un(n={},r,function(){return this}),n),f=c.prototype=i.prototype=Object.create(s);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,un(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=c,un(f,"constructor",c),un(c,"constructor",u),u.displayName="GeneratorFunction",un(c,a,"GeneratorFunction"),un(f),un(f,a,"Generator"),un(f,r,function(){return this}),un(f,"toString",function(){return"[object Generator]"}),(ln=function(){return{w:o,m:d}})()}function un(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}un=function(e,n,t,r){function o(n,t){un(e,n,function(e){return this._invoke(n,t,e)})}n?a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t:(o("next",0),o("throw",1),o("return",2))},un(e,n,t,r)}function cn(e,n,t,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void t(e)}i.done?n(u):Promise.resolve(u).then(r,a)}function sn(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,l,i=[],u=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;u=!1}else for(;!(u=(r=o.call(t)).done)&&(i.push(r.value),i.length!==n);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(c)throw a}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return fn(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?fn(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function fn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const dn=function(e){var n=e.project,t=e.onClose,r=e.onSave,a=sn((0,l.useState)(n.projectName),2),o=a[0],i=a[1],u=sn((0,l.useState)(n.description),2),c=u[0],s=u[1],f=sn((0,l.useState)(n.hashtags?n.hashtags.join(", "):""),2),d=f[0],p=f[1],m=sn((0,l.useState)(n.type||""),2),A=m[0],h=m[1],g=sn((0,l.useState)(n.version||""),2),v=g[0],y=g[1],b=sn((0,l.useState)([]),2),E=b[0],C=b[1],B=sn((0,l.useState)(n.files||[]),2),w=B[0],k=B[1],x=function(){var e,n=(e=ln().m(function e(n){var a;return ln().w(function(e){for(;;)switch(e.n){case 0:return n.preventDefault(),(a=new FormData).append("projectName",o),a.append("description",c),a.append("hashtags",d),a.append("type",A),a.append("version",v),E.forEach(function(e){return a.append("files",e)}),a.append("keepFiles",JSON.stringify(w.map(function(e){return e._id}))),e.n=1,r(a);case 1:t();case 2:return e.a(2)}},e)}),function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function l(e){cn(o,r,a,l,i,"next",e)}function i(e){cn(o,r,a,l,i,"throw",e)}l(void 0)})});return function(e){return n.apply(this,arguments)}}();return l.createElement("div",{className:"popup-overlay"},l.createElement("div",{className:"popup-card"},l.createElement("h2",null,"Edit Project"),l.createElement("form",{onSubmit:x},l.createElement("div",{className:"form-group"},l.createElement("label",null,"Project Name"),l.createElement("input",{type:"text",value:o,onChange:function(e){return i(e.target.value)},required:!0})),l.createElement("div",{className:"form-group"},l.createElement("label",null,"Description"),l.createElement("textarea",{value:c,onChange:function(e){return s(e.target.value)},required:!0})),l.createElement("div",{className:"form-group"},l.createElement("label",null,"Hashtags (comma separated)"),l.createElement("input",{type:"text",value:d,onChange:function(e){return p(e.target.value)},placeholder:"e.g. web, react, backend"})),l.createElement("div",{className:"form-group"},l.createElement("label",null,"Type"),l.createElement("select",{value:A,onChange:function(e){return h(e.target.value)}},l.createElement("option",{value:""},"Select type"),l.createElement("option",{value:"web application"},"Web Application"),l.createElement("option",{value:"game"},"Game"),l.createElement("option",{value:"mobile app"},"Mobile App"),l.createElement("option",{value:"desktop app"},"Desktop App"),l.createElement("option",{value:"library"},"Library"),l.createElement("option",{value:"other"},"Other"))),l.createElement("div",{className:"form-group"},l.createElement("label",null,"Version"),l.createElement("input",{type:"text",value:v,onChange:function(e){return y(e.target.value)},placeholder:"e.g. v1.0.0"})),l.createElement("div",{className:"form-group"},l.createElement("label",null,"Existing Files"),l.createElement("ul",null,w.map(function(e){return l.createElement("li",{key:e._id},e.fileName,l.createElement("button",{type:"button",className:"btn remove-btn",onClick:function(){return n=e._id,void k(w.filter(function(e){return e._id!==n}));var n}},"Remove"))}))),l.createElement("div",{className:"form-group"},l.createElement("label",null,"Upload New Files"),l.createElement("input",{type:"file",multiple:!0,onChange:function(e){C(Array.from(e.target.files))}})),l.createElement("div",{className:"popup-actions"},l.createElement("button",{type:"button",onClick:t,className:"btn cancel-btn"},"Cancel"),l.createElement("button",{type:"submit",className:"btn save-btn"},"Save Changes")))))};function pn(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var u=r&&r.prototype instanceof i?r:i,c=Object.create(u.prototype);return mn(c,"_invoke",function(t,r,a){var o,i,u,c=0,s=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(n,t){return o=n,i=0,u=e,d.n=t,l}};function p(t,r){for(i=t,u=r,n=0;!f&&c&&!a&&n<s.length;n++){var a,o=s[n],p=d.p,m=o[2];t>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=t<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=t<3||o[0]>r||r>m)&&(o[4]=t,o[5]=r,d.n=m,i=0))}if(a||t>1)return l;throw f=!0,r}return function(a,s,m){if(c>1)throw TypeError("Generator is already running");for(f&&1===s&&p(s,m),i=s,u=m;(n=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(c=2,o){if(i||(a="next"),n=o[a]){if(!(n=n.call(o,u)))throw TypeError("iterator result is not an object");if(!n.done)return n;u=n.value,i<2&&(i=0)}else 1===i&&(n=o.return)&&n.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((n=(f=d.n<0)?u:t.call(r,d))!==l)break}catch(n){o=e,i=1,u=n}finally{c=1}}return{value:n,done:f}}}(t,a,o),!0),c}var l={};function i(){}function u(){}function c(){}n=Object.getPrototypeOf;var s=[][r]?n(n([][r]())):(mn(n={},r,function(){return this}),n),f=c.prototype=i.prototype=Object.create(s);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,mn(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=c,mn(f,"constructor",c),mn(c,"constructor",u),u.displayName="GeneratorFunction",mn(c,a,"GeneratorFunction"),mn(f),mn(f,a,"Generator"),mn(f,r,function(){return this}),mn(f,"toString",function(){return"[object Generator]"}),(pn=function(){return{w:o,m:d}})()}function mn(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}mn=function(e,n,t,r){function o(n,t){mn(e,n,function(e){return this._invoke(n,t,e)})}n?a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t:(o("next",0),o("throw",1),o("return",2))},mn(e,n,t,r)}function An(e,n,t,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void t(e)}i.done?n(u):Promise.resolve(u).then(r,a)}function hn(e){return function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function l(e){An(o,r,a,l,i,"next",e)}function i(e){An(o,r,a,l,i,"throw",e)}l(void 0)})}}function gn(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,l,i=[],u=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;u=!1}else for(;!(u=(r=o.call(t)).done)&&(i.push(r.value),i.length!==n);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(c)throw a}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return vn(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?vn(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}function yn(e){var n=e.onClose,t=e.onUpload,r=gn((0,l.useState)(null),2),a=r[0],o=r[1],i=function(){var e=hn(pn().m(function e(r){var o;return pn().w(function(e){for(;;)switch(e.n){case 0:if(r.preventDefault(),a){e.n=1;break}return e.a(2);case 1:return(o=new FormData).append("file",a),e.n=2,t(o);case 2:n();case 3:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}();return l.createElement("div",{className:"popup-overlay"},l.createElement("div",{className:"popup-card"},l.createElement("h2",null,"Check In & Upload File"),l.createElement("form",{onSubmit:i},l.createElement("input",{type:"file",onChange:function(e){return o(e.target.files[0])},required:!0}),l.createElement("div",{className:"popup-actions"},l.createElement("button",{type:"button",onClick:n,className:"btn cancel-btn"},"Cancel"),l.createElement("button",{type:"submit",className:"btn save-btn"},"Upload")))))}const bn=function(e){var n=e.files,t=e.project,r=e.onEditProject,a=e.refreshFiles,o=gn((0,l.useState)(!1),2),i=o[0],u=o[1],c=gn((0,l.useState)(null),2),s=c[0],f=c[1],d=localStorage.getItem("userId"),p=(0,l.useRef)({}),m=function(){var e=hn(pn().m(function e(n){return pn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("http://localhost:3000/api/files/".concat(n,"/checkout"),{method:"POST",credentials:"include"});case 1:p.current[n]&&p.current[n].click(),a&&a();case 2:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}(),A=function(){var e=hn(pn().m(function e(n){return pn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("http://localhost:3000/api/files/".concat(s,"/checkin"),{method:"POST",credentials:"include",body:n});case 1:f(null),a&&a();case 2:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}();return l.createElement("div",{className:"project-files"},l.createElement("h2",null,"Files"),l.createElement("div",{className:"file-list"},0===n.length&&l.createElement("p",null,"No files uploaded yet."),n.map(function(e,n){return l.createElement("div",{key:n,className:"file-item"},l.createElement("span",null,l.createElement("strong",null,e.fileName)),l.createElement("span",null,"Uploaded: ",new Date(e.uploadedAt).toLocaleString()),e.status&&l.createElement("span",null,"Status: ",e.status),l.createElement("a",{href:"http://localhost:3000/api/files/".concat(e._id),download:e.fileName,ref:function(n){return p.current[e._id]=n},style:{display:"none"}}),"checkedIn"===e.status&&l.createElement("button",{className:"btn check-out-btn",onClick:function(){return m(e._id)}},"Check Out & Download"),"checkedOut"===e.status&&e.checkedOutBy===d&&l.createElement("button",{className:"btn check-in-btn",onClick:function(){return n=e._id,void f(n);var n}},"Check In & Upload"))})),l.createElement("button",{className:"btn edit-btn",onClick:function(){return u(!0)}},"edit project"),i&&l.createElement(dn,{project:t,onClose:function(){return u(!1)},onSave:r}),s&&l.createElement(yn,{onClose:function(){return f(null)},onUpload:A}))},En=function(e){var n=e.project;return l.createElement("div",{className:"project-details"},l.createElement("h2",null,"Details"),l.createElement("p",null,l.createElement("strong",null,"Description:")," ",n.description),l.createElement("p",null,l.createElement("strong",null,"Hashtags:")," ",n.hashtags.map(function(e){return l.createElement("span",{key:e,className:"tag-item"},"#",e)})),l.createElement("p",null,l.createElement("strong",null,"Type:")," ",n.type),l.createElement("p",null,l.createElement("strong",null,"Version:")," ",n.version))},Cn=function(e){var n=e.members;return l.createElement("div",{className:"project-members"},l.createElement("h2",null,"Members"),l.createElement("div",{className:"member-list"},n.map(function(e,n){return l.createElement("div",{key:n,className:"member-item"},l.createElement("img",{src:"/assets/images/User Icon.png",alt:"".concat(e.name,"'s avatar"),className:"user-icon"}),l.createElement("span",null,e.name," ",e.role&&"(".concat(e.role,")")))})))},Bn=function(e){var n=e.project,t=e.members;return l.createElement("div",{className:"project-info"},l.createElement(En,{project:n}),l.createElement(Cn,{members:t}))};function wn(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var u=r&&r.prototype instanceof i?r:i,c=Object.create(u.prototype);return kn(c,"_invoke",function(t,r,a){var o,i,u,c=0,s=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(n,t){return o=n,i=0,u=e,d.n=t,l}};function p(t,r){for(i=t,u=r,n=0;!f&&c&&!a&&n<s.length;n++){var a,o=s[n],p=d.p,m=o[2];t>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=t<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=t<3||o[0]>r||r>m)&&(o[4]=t,o[5]=r,d.n=m,i=0))}if(a||t>1)return l;throw f=!0,r}return function(a,s,m){if(c>1)throw TypeError("Generator is already running");for(f&&1===s&&p(s,m),i=s,u=m;(n=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(c=2,o){if(i||(a="next"),n=o[a]){if(!(n=n.call(o,u)))throw TypeError("iterator result is not an object");if(!n.done)return n;u=n.value,i<2&&(i=0)}else 1===i&&(n=o.return)&&n.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((n=(f=d.n<0)?u:t.call(r,d))!==l)break}catch(n){o=e,i=1,u=n}finally{c=1}}return{value:n,done:f}}}(t,a,o),!0),c}var l={};function i(){}function u(){}function c(){}n=Object.getPrototypeOf;var s=[][r]?n(n([][r]())):(kn(n={},r,function(){return this}),n),f=c.prototype=i.prototype=Object.create(s);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,kn(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=c,kn(f,"constructor",c),kn(c,"constructor",u),u.displayName="GeneratorFunction",kn(c,a,"GeneratorFunction"),kn(f),kn(f,a,"Generator"),kn(f,r,function(){return this}),kn(f,"toString",function(){return"[object Generator]"}),(wn=function(){return{w:o,m:d}})()}function kn(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}kn=function(e,n,t,r){function o(n,t){kn(e,n,function(e){return this._invoke(n,t,e)})}n?a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t:(o("next",0),o("throw",1),o("return",2))},kn(e,n,t,r)}function xn(e,n,t,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void t(e)}i.done?n(u):Promise.resolve(u).then(r,a)}function Sn(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,l,i=[],u=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;u=!1}else for(;!(u=(r=o.call(t)).done)&&(i.push(r.value),i.length!==n);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(c)throw a}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return jn(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?jn(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const Nn=function(){var e=function(){let{matches:e}=l.useContext(Q),n=e[e.length-1];return n?n.params:{}}().id,n=Sn((0,l.useState)(null),2),t=n[0],r=n[1],a=Sn((0,l.useState)([]),2),o=a[0],i=a[1],u=Sn((0,l.useState)([]),2),c=u[0],s=u[1],f=Sn((0,l.useState)([]),2),d=f[0],p=f[1];(0,l.useEffect)(function(){fetch("http://localhost:3000/api/projects/".concat(e),{credentials:"include"}).then(function(e){return e.json()}).then(function(e){r(e),i(e.files||[]),s(e.members||[])}),fetch("http://localhost:3000/api/projects/".concat(e,"/activity"),{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return p(e.activities||[])})},[e]);var m=function(){var n,t=(n=wn().m(function n(t){var a,o;return wn().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,fetch("http://localhost:3000/api/projects/".concat(e),{method:"PUT",credentials:"include",body:t});case 1:return a=n.v,n.n=2,a.json();case 2:o=n.v,a.ok&&(r(o.project),i(o.project.files||[]),s(o.project.members||[]));case 3:return n.a(2)}},n)}),function(){var e=this,t=arguments;return new Promise(function(r,a){var o=n.apply(e,t);function l(e){xn(o,r,a,l,i,"next",e)}function i(e){xn(o,r,a,l,i,"throw",e)}l(void 0)})});return function(e){return t.apply(this,arguments)}}();return t?l.createElement("div",{className:"project-view-page"},l.createElement(_e,null),l.createElement("div",{className:"main-content"},l.createElement("div",{className:"left-panel"},l.createElement(Ee,{to:"/projects",className:"back-link"}," < back to projects"),l.createElement("h1",null,t.projectName),l.createElement(bn,{files:o,project:t,onEditProject:m,refreshFiles:function(){fetch("http://localhost:3000/api/projects/".concat(e),{credentials:"include"}).then(function(e){return e.json()}).then(function(e){r(e),i(e.files||[]),s(e.members||[])})}}),l.createElement(De,{activities:d})),l.createElement("div",{className:"right-panel"},l.createElement(Bn,{project:t,members:c})))):l.createElement("div",{className:"project-view-page"},l.createElement(_e,null),l.createElement("div",{className:"main-content"},l.createElement("div",{className:"left-panel"},l.createElement(Ee,{to:"/projects",className:"back-link"}," < back to projects"),l.createElement("p",null,"Loading project..."))))},Pn=function(e){var n,t,r=e.profile,a=null!==(n=r.details)&&void 0!==n&&n.avatar?"/".concat(r.details.avatar.replace(/\\/g,"/")):"/assets/images/User Icon.png";return l.createElement("div",{className:"profile-info"},l.createElement("img",{src:a,alt:"User Profile",className:"profile-img"}),l.createElement("h1",{className:"profile-username"},r.username),l.createElement("p",{className:"profile-location"},null===(t=r.details)||void 0===t?void 0:t.location))},_n=function(e){var n,t=e.details;return l.createElement("div",{className:"profile-details-container"},l.createElement("div",{className:"details-header"},l.createElement("h2",null,"Details")),l.createElement("div",{className:"details-list"},l.createElement("p",null,l.createElement("strong",null,"Username:")," ",t.username),l.createElement("p",null,l.createElement("strong",null,"Email:")," ",t.email),l.createElement("p",null,l.createElement("strong",null,"Bio:")," ",null===(n=t.details)||void 0===n?void 0:n.bio)))};function On(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var u=r&&r.prototype instanceof i?r:i,c=Object.create(u.prototype);return zn(c,"_invoke",function(t,r,a){var o,i,u,c=0,s=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(n,t){return o=n,i=0,u=e,d.n=t,l}};function p(t,r){for(i=t,u=r,n=0;!f&&c&&!a&&n<s.length;n++){var a,o=s[n],p=d.p,m=o[2];t>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=t<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=t<3||o[0]>r||r>m)&&(o[4]=t,o[5]=r,d.n=m,i=0))}if(a||t>1)return l;throw f=!0,r}return function(a,s,m){if(c>1)throw TypeError("Generator is already running");for(f&&1===s&&p(s,m),i=s,u=m;(n=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(c=2,o){if(i||(a="next"),n=o[a]){if(!(n=n.call(o,u)))throw TypeError("iterator result is not an object");if(!n.done)return n;u=n.value,i<2&&(i=0)}else 1===i&&(n=o.return)&&n.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((n=(f=d.n<0)?u:t.call(r,d))!==l)break}catch(n){o=e,i=1,u=n}finally{c=1}}return{value:n,done:f}}}(t,a,o),!0),c}var l={};function i(){}function u(){}function c(){}n=Object.getPrototypeOf;var s=[][r]?n(n([][r]())):(zn(n={},r,function(){return this}),n),f=c.prototype=i.prototype=Object.create(s);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,zn(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=c,zn(f,"constructor",c),zn(c,"constructor",u),u.displayName="GeneratorFunction",zn(c,a,"GeneratorFunction"),zn(f),zn(f,a,"Generator"),zn(f,r,function(){return this}),zn(f,"toString",function(){return"[object Generator]"}),(On=function(){return{w:o,m:d}})()}function zn(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}zn=function(e,n,t,r){function o(n,t){zn(e,n,function(e){return this._invoke(n,t,e)})}n?a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t:(o("next",0),o("throw",1),o("return",2))},zn(e,n,t,r)}function Tn(e,n,t,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void t(e)}i.done?n(u):Promise.resolve(u).then(r,a)}function Fn(e){return function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function l(e){Tn(o,r,a,l,i,"next",e)}function i(e){Tn(o,r,a,l,i,"throw",e)}l(void 0)})}}function Ln(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,l,i=[],u=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;u=!1}else for(;!(u=(r=o.call(t)).done)&&(i.push(r.value),i.length!==n);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(c)throw a}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return In(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?In(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function In(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}function Rn(e){var n,t,r=e.profile,a=e.onClose,o=e.onSave,i=Ln((0,l.useState)((null===(n=r.details)||void 0===n?void 0:n.bio)||""),2),u=i[0],c=i[1],s=Ln((0,l.useState)((null===(t=r.details)||void 0===t?void 0:t.location)||""),2),f=s[0],d=s[1],p=Ln((0,l.useState)(null),2),m=p[0],A=p[1],h=function(){var e=Fn(On().m(function e(n){var t;return On().w(function(e){for(;;)switch(e.n){case 0:return n.preventDefault(),(t=new FormData).append("bio",u),t.append("location",f),m&&t.append("avatar",m),e.n=1,o(t);case 1:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}();return l.createElement("div",{className:"popup-overlay"},l.createElement("div",{className:"popup-card"},l.createElement("h2",null,"Edit Profile"),l.createElement("form",{onSubmit:h},l.createElement("div",{className:"form-group"},l.createElement("label",null,"Bio"),l.createElement("textarea",{value:u,onChange:function(e){return c(e.target.value)}})),l.createElement("div",{className:"form-group"},l.createElement("label",null,"Location"),l.createElement("input",{type:"text",value:f,onChange:function(e){return d(e.target.value)}})),l.createElement("div",{className:"form-group"},l.createElement("label",null,"Profile Image"),l.createElement("input",{type:"file",accept:"image/*",onChange:function(e){return A(e.target.files[0])}})),l.createElement("div",{className:"popup-actions"},l.createElement("button",{type:"button",className:"btn cancel-btn",onClick:a},"Cancel"),l.createElement("button",{type:"submit",className:"btn save-btn"},"Save")))))}function Mn(e){var n=e.onClose,t=e.onDelete,r=Ln((0,l.useState)(""),2),a=r[0],o=r[1],i="delete"===a;return l.createElement("div",{className:"popup-overlay"},l.createElement("div",{className:"popup-card"},l.createElement("h2",null,"Delete Account"),l.createElement("p",null,"Type ",l.createElement("strong",null,"delete")," below to confirm account deletion."),l.createElement("input",{type:"text",value:a,onChange:function(e){return o(e.target.value)},placeholder:"Type 'delete' to confirm"}),l.createElement("div",{className:"popup-actions"},l.createElement("button",{type:"button",className:"btn cancel-btn",onClick:n},"Cancel"),l.createElement("button",{type:"button",className:"btn delete-btn",disabled:!i,onClick:i?t:void 0},"Delete Account"))))}const Dn=function(){var e=Ln((0,l.useState)(null),2),n=e[0],t=e[1],r=Ln((0,l.useState)([]),2),a=r[0],o=r[1],i=Ln((0,l.useState)([]),2),u=i[0],c=i[1],s=Ln((0,l.useState)([]),2),f=s[0],d=s[1],p=Ln((0,l.useState)(!1),2),m=p[0],A=p[1],h=Ln((0,l.useState)(!1),2),g=h[0],v=h[1];(0,l.useEffect)(function(){fetch("http://localhost:3000/api/profile",{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return t(e)})},[]),(0,l.useEffect)(function(){fetch("http://localhost:3000/api/projects/mine",{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return o(e)})},[]),(0,l.useEffect)(function(){fetch("http://localhost:3000/api/friends",{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return c(e)})},[]),(0,l.useEffect)(function(){fetch("http://localhost:3000/api/activity",{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return d(e)})},[]);var y=function(){var e=Fn(On().m(function e(n){return On().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("http://localhost:3000/api/profile/details",{method:"PUT",credentials:"include",body:n});case 1:A(!1),fetch("http://localhost:3000/api/profile",{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return t(e)});case 2:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}(),b=function(){var e=Fn(On().m(function e(){return On().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("http://localhost:3000/api/profile",{method:"DELETE",credentials:"include"});case 1:window.location.href="/login";case 2:return e.a(2)}},e)}));return function(){return e.apply(this,arguments)}}();return n?l.createElement("div",{className:"profile-page"},l.createElement(_e,null),l.createElement("div",{className:"main-content"},l.createElement("div",{className:"left-panel"},l.createElement(Pn,{profile:n}),l.createElement("button",{className:"btn edit-btn",onClick:function(){return A(!0)}},"Edit Profile"),l.createElement("button",{className:"btn delete-btn",onClick:function(){return v(!0)}},"Delete Account"),l.createElement("div",{className:"profile-sections"},l.createElement("div",{className:"section"},l.createElement("h2",null,"Projects"),a.map(function(e,n){return l.createElement("p",{key:e._id||n},e.projectName||e.name)})),l.createElement("div",{className:"section"},l.createElement("h2",null,"Friends"),u.map(function(e,n){return l.createElement("p",{key:e._id||n},e.username||e.name)})))),l.createElement("div",{className:"right-panel"},l.createElement(_n,{details:n||n}),l.createElement(De,{activities:f}))),m&&l.createElement(Rn,{profile:n,onClose:function(){return A(!1)},onSave:y}),g&&l.createElement(Mn,{onClose:function(){return v(!1)},onDelete:b})):l.createElement("div",{className:"profile-page"},l.createElement(_e,null),l.createElement("div",{className:"main-content"},l.createElement("p",null,"Loading profile...")))};function Un(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var u=r&&r.prototype instanceof i?r:i,c=Object.create(u.prototype);return Wn(c,"_invoke",function(t,r,a){var o,i,u,c=0,s=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(n,t){return o=n,i=0,u=e,d.n=t,l}};function p(t,r){for(i=t,u=r,n=0;!f&&c&&!a&&n<s.length;n++){var a,o=s[n],p=d.p,m=o[2];t>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=t<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=t<3||o[0]>r||r>m)&&(o[4]=t,o[5]=r,d.n=m,i=0))}if(a||t>1)return l;throw f=!0,r}return function(a,s,m){if(c>1)throw TypeError("Generator is already running");for(f&&1===s&&p(s,m),i=s,u=m;(n=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(c=2,o){if(i||(a="next"),n=o[a]){if(!(n=n.call(o,u)))throw TypeError("iterator result is not an object");if(!n.done)return n;u=n.value,i<2&&(i=0)}else 1===i&&(n=o.return)&&n.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((n=(f=d.n<0)?u:t.call(r,d))!==l)break}catch(n){o=e,i=1,u=n}finally{c=1}}return{value:n,done:f}}}(t,a,o),!0),c}var l={};function i(){}function u(){}function c(){}n=Object.getPrototypeOf;var s=[][r]?n(n([][r]())):(Wn(n={},r,function(){return this}),n),f=c.prototype=i.prototype=Object.create(s);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Wn(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=c,Wn(f,"constructor",c),Wn(c,"constructor",u),u.displayName="GeneratorFunction",Wn(c,a,"GeneratorFunction"),Wn(f),Wn(f,a,"Generator"),Wn(f,r,function(){return this}),Wn(f,"toString",function(){return"[object Generator]"}),(Un=function(){return{w:o,m:d}})()}function Wn(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}Wn=function(e,n,t,r){function o(n,t){Wn(e,n,function(e){return this._invoke(n,t,e)})}n?a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t:(o("next",0),o("throw",1),o("return",2))},Wn(e,n,t,r)}function $n(e,n,t,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void t(e)}i.done?n(u):Promise.resolve(u).then(r,a)}function Vn(e){return function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function l(e){$n(o,r,a,l,i,"next",e)}function i(e){$n(o,r,a,l,i,"throw",e)}l(void 0)})}}function Gn(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,l,i=[],u=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;u=!1}else for(;!(u=(r=o.call(t)).done)&&(i.push(r.value),i.length!==n);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(c)throw a}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Hn(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Hn(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Hn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const qn=function(){var e=Gn((0,l.useState)([]),2),n=e[0],t=e[1],r=Gn((0,l.useState)({}),2),a=r[0],o=r[1],i=Gn((0,l.useState)(""),2),u=i[0],c=i[1];(0,l.useEffect)(function(){fetch("http://localhost:3000/api/friends",{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return t(e||[])})},[]),(0,l.useEffect)(function(){fetch("http://localhost:3000/api/activity/local",{credentials:"include"}).then(function(e){return e.json()}).then(function(e){var n={};e.forEach(function(e){n[e.user._id]||(n[e.user._id]=[]),n[e.user._id].push(e)}),o(n)})},[n]);var s=function(){var e=Vn(Un().m(function e(){return Un().w(function(e){for(;;)switch(e.n){case 0:if(u.trim()){e.n=1;break}return e.a(2);case 1:return e.n=2,fetch("http://localhost:3000/api/friends",{method:"POST",credentials:"include",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:u})});case 2:c(""),fetch("http://localhost:3000/api/friends",{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return t(e||[])});case 3:return e.a(2)}},e)}));return function(){return e.apply(this,arguments)}}(),f=function(){var e=Vn(Un().m(function e(n){return Un().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("http://localhost:3000/api/friends/".concat(n),{method:"DELETE",credentials:"include"});case 1:t(function(e){return e.filter(function(e){return e._id!==n})});case 2:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}();return l.createElement("div",{className:"friends-page"},l.createElement(_e,null),l.createElement("div",{className:"main-content"},l.createElement("h1",null,"Your Friends"),l.createElement("div",{className:"add-friend-form"},l.createElement("input",{type:"text",value:u,onChange:function(e){return c(e.target.value)},placeholder:"Enter friend's email to add"}),l.createElement("button",{className:"btn add-btn",onClick:s},"Add Friend")),l.createElement("div",{className:"friends-list"},n.map(function(e){return l.createElement("div",{key:e._id,className:"friend-card"},l.createElement("div",null,l.createElement("strong",null,e.username)," (",e.email,")",l.createElement("button",{className:"btn remove-btn",onClick:function(){return f(e._id)}},"Remove")),l.createElement("div",{className:"friend-activities"},l.createElement("h4",null,"Recent Activity:"),l.createElement("ul",null,(a[e._id]||[]).map(function(e){return l.createElement("li",{key:e._id||e.createdAt},e.message||e.type," (",new Date(e.createdAt).toLocaleString(),")")}))))}))))},Yn=function(){return l.createElement("header",{className:"header auth-header"},l.createElement("div",{className:"left-group"},l.createElement(Ee,{to:"/",className:"logo"},l.createElement("img",{src:"/assets/images/Code Cave Logo.png",alt:"Code Cave Logo",className:"logo-img"})),l.createElement("div",{className:"nav-links"},l.createElement("ul",null,l.createElement("li",{className:"nav-item"},l.createElement(Ee,{to:"/home"},"Home")),l.createElement("li",{className:"nav-item"},l.createElement(Ee,{to:"/projects"},"Projects")),l.createElement("li",{className:"nav-item"},l.createElement(Ee,{to:"/friends"},"Friends"))))),l.createElement("div",{className:"user-actions-logged-out"},l.createElement(Ee,{to:"/login",className:"btn login-btn"},"Log in"),l.createElement(Ee,{to:"/signup",className:"btn signup-btn"},"Sign up")))};function Qn(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var u=r&&r.prototype instanceof i?r:i,c=Object.create(u.prototype);return Xn(c,"_invoke",function(t,r,a){var o,i,u,c=0,s=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(n,t){return o=n,i=0,u=e,d.n=t,l}};function p(t,r){for(i=t,u=r,n=0;!f&&c&&!a&&n<s.length;n++){var a,o=s[n],p=d.p,m=o[2];t>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=t<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=t<3||o[0]>r||r>m)&&(o[4]=t,o[5]=r,d.n=m,i=0))}if(a||t>1)return l;throw f=!0,r}return function(a,s,m){if(c>1)throw TypeError("Generator is already running");for(f&&1===s&&p(s,m),i=s,u=m;(n=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(c=2,o){if(i||(a="next"),n=o[a]){if(!(n=n.call(o,u)))throw TypeError("iterator result is not an object");if(!n.done)return n;u=n.value,i<2&&(i=0)}else 1===i&&(n=o.return)&&n.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((n=(f=d.n<0)?u:t.call(r,d))!==l)break}catch(n){o=e,i=1,u=n}finally{c=1}}return{value:n,done:f}}}(t,a,o),!0),c}var l={};function i(){}function u(){}function c(){}n=Object.getPrototypeOf;var s=[][r]?n(n([][r]())):(Xn(n={},r,function(){return this}),n),f=c.prototype=i.prototype=Object.create(s);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Xn(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=c,Xn(f,"constructor",c),Xn(c,"constructor",u),u.displayName="GeneratorFunction",Xn(c,a,"GeneratorFunction"),Xn(f),Xn(f,a,"Generator"),Xn(f,r,function(){return this}),Xn(f,"toString",function(){return"[object Generator]"}),(Qn=function(){return{w:o,m:d}})()}function Xn(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}Xn=function(e,n,t,r){function o(n,t){Xn(e,n,function(e){return this._invoke(n,t,e)})}n?a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t:(o("next",0),o("throw",1),o("return",2))},Xn(e,n,t,r)}function Kn(e,n,t,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void t(e)}i.done?n(u):Promise.resolve(u).then(r,a)}function Zn(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,l,i=[],u=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;u=!1}else for(;!(u=(r=o.call(t)).done)&&(i.push(r.value),i.length!==n);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(c)throw a}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Jn(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Jn(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Jn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const et=function(){var e=Zn((0,l.useState)(""),2),n=e[0],t=e[1],r=Zn((0,l.useState)(""),2),a=r[0],o=r[1],i=Zn((0,l.useState)(""),2),u=i[0],c=i[1],s=ee(),f=function(){var e,t=(e=Qn().m(function e(t){var r,o;return Qn().w(function(e){for(;;)switch(e.p=e.n){case 0:return t.preventDefault(),c(""),e.p=1,e.n=2,fetch("http://localhost:3000/api/login",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({email:n,password:a})});case 2:return r=e.v,e.n=3,r.json();case 3:o=e.v,r.ok?(localStorage.setItem("userId",o.user.id),localStorage.setItem("username",o.user.username),localStorage.setItem("email",o.user.email),s("/home")):c(o.message||"Login failed."),e.n=5;break;case 4:e.p=4,e.v,c("Server error. Please try again.");case 5:return e.a(2)}},e,null,[[1,4]])}),function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function l(e){Kn(o,r,a,l,i,"next",e)}function i(e){Kn(o,r,a,l,i,"throw",e)}l(void 0)})});return function(e){return t.apply(this,arguments)}}();return l.createElement("div",{className:"auth-page"},l.createElement(Yn,null),l.createElement("div",{className:"auth-container"},l.createElement("div",{className:"auth-form-card"},l.createElement("h2",null,"Log in to your account"),l.createElement("form",{className:"auth-form",onSubmit:f},l.createElement("div",{className:"form-group"},l.createElement("label",{htmlFor:"email"},"Email:"),l.createElement("input",{type:"text",id:"email",placeholder:"Enter your email",value:n,onChange:function(e){return t(e.target.value)},required:!0})),l.createElement("div",{className:"form-group"},l.createElement("label",{htmlFor:"password"},"Password:"),l.createElement("input",{type:"password",id:"password",placeholder:"Enter your password",value:a,onChange:function(e){return o(e.target.value)},required:!0})),u&&l.createElement("div",{className:"error-msg"},u),l.createElement("button",{type:"submit",className:"btn auth-btn"},"Log in")),l.createElement("p",{className:"form-link"},"Don't have an account? ",l.createElement("a",{href:"/signup"},"Sign up")))))};function nt(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var u=r&&r.prototype instanceof i?r:i,c=Object.create(u.prototype);return tt(c,"_invoke",function(t,r,a){var o,i,u,c=0,s=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(n,t){return o=n,i=0,u=e,d.n=t,l}};function p(t,r){for(i=t,u=r,n=0;!f&&c&&!a&&n<s.length;n++){var a,o=s[n],p=d.p,m=o[2];t>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=t<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=t<3||o[0]>r||r>m)&&(o[4]=t,o[5]=r,d.n=m,i=0))}if(a||t>1)return l;throw f=!0,r}return function(a,s,m){if(c>1)throw TypeError("Generator is already running");for(f&&1===s&&p(s,m),i=s,u=m;(n=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(c=2,o){if(i||(a="next"),n=o[a]){if(!(n=n.call(o,u)))throw TypeError("iterator result is not an object");if(!n.done)return n;u=n.value,i<2&&(i=0)}else 1===i&&(n=o.return)&&n.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((n=(f=d.n<0)?u:t.call(r,d))!==l)break}catch(n){o=e,i=1,u=n}finally{c=1}}return{value:n,done:f}}}(t,a,o),!0),c}var l={};function i(){}function u(){}function c(){}n=Object.getPrototypeOf;var s=[][r]?n(n([][r]())):(tt(n={},r,function(){return this}),n),f=c.prototype=i.prototype=Object.create(s);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,tt(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=c,tt(f,"constructor",c),tt(c,"constructor",u),u.displayName="GeneratorFunction",tt(c,a,"GeneratorFunction"),tt(f),tt(f,a,"Generator"),tt(f,r,function(){return this}),tt(f,"toString",function(){return"[object Generator]"}),(nt=function(){return{w:o,m:d}})()}function tt(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}tt=function(e,n,t,r){function o(n,t){tt(e,n,function(e){return this._invoke(n,t,e)})}n?a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t:(o("next",0),o("throw",1),o("return",2))},tt(e,n,t,r)}function rt(e,n,t,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void t(e)}i.done?n(u):Promise.resolve(u).then(r,a)}function at(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,l,i=[],u=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;u=!1}else for(;!(u=(r=o.call(t)).done)&&(i.push(r.value),i.length!==n);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(c)throw a}}return i}}(e,n)||function(e,n){if(e){if("string"==typeof e)return ot(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ot(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ot(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const lt=function(){var e=at((0,l.useState)(""),2),n=e[0],t=e[1],r=at((0,l.useState)(""),2),a=r[0],o=r[1],i=at((0,l.useState)(""),2),u=i[0],c=i[1],s=at((0,l.useState)(""),2),f=s[0],d=s[1],p=at((0,l.useState)(""),2),m=p[0],A=p[1],h=at((0,l.useState)(""),2),g=h[0],v=h[1],y=at((0,l.useState)(""),2),b=y[0],E=y[1],C=at((0,l.useState)(""),2),B=C[0],w=C[1],k=ee(),x=function(){var e=!0;return A(""),v(""),E(""),w(""),n.length<3&&(A("Username must be at least 3 characters long."),e=!1),a.includes("@")||(v("Please enter a valid email address."),e=!1),u.length<8&&(E("Password must be at least 8 characters long."),e=!1),u!==f&&(w("Passwords do not match."),e=!1),e},S=function(){var e,t=(e=nt().m(function e(t){var r,o;return nt().w(function(e){for(;;)switch(e.p=e.n){case 0:if(t.preventDefault(),x()){e.n=1;break}return e.a(2);case 1:return e.p=1,e.n=2,fetch("http://localhost:3000/api/signup",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({username:n,email:a,password:u})});case 2:return r=e.v,e.n=3,r.json();case 3:o=e.v,r.ok?(localStorage.setItem("userId",o.user.id),localStorage.setItem("username",o.user.username),localStorage.setItem("email",o.user.email),k("/home")):setErrorMsg(o.message||"Sign up failed."),e.n=5;break;case 4:e.p=4,e.v,setErrorMsg("Server error. Please try again.");case 5:return e.a(2)}},e,null,[[1,4]])}),function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function l(e){rt(o,r,a,l,i,"next",e)}function i(e){rt(o,r,a,l,i,"throw",e)}l(void 0)})});return function(e){return t.apply(this,arguments)}}();return l.createElement("div",{className:"auth-page"},l.createElement(Yn,null),l.createElement("div",{className:"auth-container"},l.createElement("div",{className:"auth-form-card"},l.createElement("h2",null,"Create your account"),l.createElement("form",{className:"auth-form",onSubmit:S},l.createElement("div",{className:"form-group"},l.createElement("label",{htmlFor:"username"},"Username:"),l.createElement("input",{type:"text",id:"username",placeholder:"Choose a username",value:n,onChange:function(e){return t(e.target.value)},required:!0}),m&&l.createElement("span",{className:"error-message"},m)),l.createElement("div",{className:"form-group"},l.createElement("label",{htmlFor:"email"},"Email:"),l.createElement("input",{type:"email",id:"email",placeholder:"Enter your email",value:a,onChange:function(e){return o(e.target.value)},required:!0}),g&&l.createElement("span",{className:"error-message"},g)),l.createElement("div",{className:"form-group"},l.createElement("label",{htmlFor:"password"},"Password:"),l.createElement("input",{type:"password",id:"password",placeholder:"Choose a password",value:u,onChange:function(e){return c(e.target.value)},required:!0}),b&&l.createElement("span",{className:"error-message"},b)),l.createElement("div",{className:"form-group"},l.createElement("label",{htmlFor:"confirm-password"},"Confirm Password:"),l.createElement("input",{type:"password",id:"confirm-password",placeholder:"Confirm your password",value:f,onChange:function(e){return d(e.target.value)},required:!0}),B&&l.createElement("span",{className:"error-message"},B)),l.createElement("button",{type:"submit",className:"btn auth-btn"},"Sign up")),l.createElement("p",{className:"form-link"},"Already have an account? ",l.createElement("a",{href:"/login"},"Log in")))))},it=function(){return l.createElement(pe,null,l.createElement(fe,{path:"/",element:l.createElement(ke,null)}),l.createElement(fe,{path:"/home",element:l.createElement(qe,null)}),l.createElement(fe,{path:"/projects",element:l.createElement(on,null)}),l.createElement(fe,{path:"/projects/:id",element:l.createElement(Nn,null)}),l.createElement(fe,{path:"/profile",element:l.createElement(Dn,null)}),l.createElement(fe,{path:"/friends",element:l.createElement(qn,null)}),l.createElement(fe,{path:"/login",element:l.createElement(et,null)}),l.createElement(fe,{path:"/signup",element:l.createElement(lt,null)}))};var ut=a(72),ct=a.n(ut),st=a(825),ft=a.n(st),dt=a(659),pt=a.n(dt),mt=a(56),At=a.n(mt),ht=a(159),gt=a.n(ht),vt=a(113),yt=a.n(vt),bt=a(16),Et={};Et.styleTagTransform=yt(),Et.setAttributes=At(),Et.insert=pt().bind(null,"head"),Et.domAPI=ft(),Et.insertStyleElement=gt(),ct()(bt.A,Et),bt.A&&bt.A.locals&&bt.A.locals;var Ct=document.getElementById("root");(0,u.H)(Ct).render(l.createElement(l.StrictMode,null,l.createElement(ve,null,l.createElement(it,null))))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,